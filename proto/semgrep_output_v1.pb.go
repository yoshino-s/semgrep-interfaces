// Generated by jsonschema2protobuf.  DO NOT EDIT!
// Source file: semgrep_output_v1.jsonschema
// Source file sha256 digest: 137a32494efacfce57bd0b8db79611f042c9f8015d0007b52b91547054ebec04

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: semgrep_output_v1.proto

package semgrep_output_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CliOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                string                     `protobuf:"bytes,508888787,opt,name=version,proto3" json:"version,omitempty"`
	Results                []*CliMatch                `protobuf:"bytes,260545850,rep,name=results,proto3" json:"results,omitempty"`
	Errors                 []*CliError                `protobuf:"bytes,179828283,rep,name=errors,proto3" json:"errors,omitempty"`
	Paths                  *ScannedAndSkipped         `protobuf:"bytes,109417774,opt,name=paths,proto3" json:"paths,omitempty"`
	Time                   *Profile                   `protobuf:"bytes,3117011,opt,name=time,proto3" json:"time,omitempty"`
	Explanations           []*MatchingExplanation     `protobuf:"bytes,406800568,rep,name=explanations,proto3" json:"explanations,omitempty"`
	RulesByEngine          []*anypb.Any               `protobuf:"bytes,209830003,rep,name=rules_by_engine,json=rulesByEngine,proto3" json:"rules_by_engine,omitempty"`
	EngineRequested        *anypb.Any                 `protobuf:"bytes,513422373,opt,name=engine_requested,json=engineRequested,proto3" json:"engine_requested,omitempty"`
	InterfileLanguagesUsed []string                   `protobuf:"bytes,314311072,rep,name=interfile_languages_used,json=interfileLanguagesUsed,proto3" json:"interfile_languages_used,omitempty"`
	SkippedRules           []*SkippedRule             `protobuf:"bytes,55568936,rep,name=skipped_rules,json=skippedRules,proto3" json:"skipped_rules,omitempty"`
	Subprojects            []*CliOutputSubprojectInfo `protobuf:"bytes,475733982,rep,name=subprojects,proto3" json:"subprojects,omitempty"`
}

func (x *CliOutput) Reset() {
	*x = CliOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliOutput) ProtoMessage() {}

func (x *CliOutput) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliOutput.ProtoReflect.Descriptor instead.
func (*CliOutput) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{0}
}

func (x *CliOutput) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CliOutput) GetResults() []*CliMatch {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CliOutput) GetErrors() []*CliError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *CliOutput) GetPaths() *ScannedAndSkipped {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *CliOutput) GetTime() *Profile {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *CliOutput) GetExplanations() []*MatchingExplanation {
	if x != nil {
		return x.Explanations
	}
	return nil
}

func (x *CliOutput) GetRulesByEngine() []*anypb.Any {
	if x != nil {
		return x.RulesByEngine
	}
	return nil
}

func (x *CliOutput) GetEngineRequested() *anypb.Any {
	if x != nil {
		return x.EngineRequested
	}
	return nil
}

func (x *CliOutput) GetInterfileLanguagesUsed() []string {
	if x != nil {
		return x.InterfileLanguagesUsed
	}
	return nil
}

func (x *CliOutput) GetSkippedRules() []*SkippedRule {
	if x != nil {
		return x.SkippedRules
	}
	return nil
}

func (x *CliOutput) GetSubprojects() []*CliOutputSubprojectInfo {
	if x != nil {
		return x.Subprojects
	}
	return nil
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line   int64 `protobuf:"varint,3117964,opt,name=line,proto3" json:"line,omitempty"`
	Col    int64 `protobuf:"varint,107328,opt,name=col,proto3" json:"col,omitempty"`
	Offset int64 `protobuf:"varint,196558931,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{1}
}

func (x *Position) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Position) GetCol() int64 {
	if x != nil {
		return x.Col
	}
	return 0
}

func (x *Position) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path  string    `protobuf:"bytes,3212859,opt,name=path,proto3" json:"path,omitempty"`
	Start *Position `protobuf:"bytes,110621538,opt,name=start,proto3" json:"start,omitempty"`
	End   *Position `protobuf:"bytes,99611,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{2}
}

func (x *Location) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Location) GetStart() *Position {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Location) GetEnd() *Position {
	if x != nil {
		return x.End
	}
	return nil
}

type ProFeature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterprocTaint      bool `protobuf:"varint,401637410,opt,name=interproc_taint,json=interprocTaint,proto3" json:"interproc_taint,omitempty"`
	InterfileTaint      bool `protobuf:"varint,464345032,opt,name=interfile_taint,json=interfileTaint,proto3" json:"interfile_taint,omitempty"`
	ProprietaryLanguage bool `protobuf:"varint,344690440,opt,name=proprietary_language,json=proprietaryLanguage,proto3" json:"proprietary_language,omitempty"`
}

func (x *ProFeature) Reset() {
	*x = ProFeature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProFeature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProFeature) ProtoMessage() {}

func (x *ProFeature) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProFeature.ProtoReflect.Descriptor instead.
func (*ProFeature) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{3}
}

func (x *ProFeature) GetInterprocTaint() bool {
	if x != nil {
		return x.InterprocTaint
	}
	return false
}

func (x *ProFeature) GetInterfileTaint() bool {
	if x != nil {
		return x.InterfileTaint
	}
	return false
}

func (x *ProFeature) GetProprietaryLanguage() bool {
	if x != nil {
		return x.ProprietaryLanguage
	}
	return false
}

type CliMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckId string         `protobuf:"bytes,244492357,opt,name=check_id,json=checkId,proto3" json:"check_id,omitempty"`
	Path    string         `protobuf:"bytes,3212859,opt,name=path,proto3" json:"path,omitempty"`
	Start   *Position      `protobuf:"bytes,110621538,opt,name=start,proto3" json:"start,omitempty"`
	End     *Position      `protobuf:"bytes,99611,opt,name=end,proto3" json:"end,omitempty"`
	Extra   *CliMatchExtra `protobuf:"bytes,93093008,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CliMatch) Reset() {
	*x = CliMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliMatch) ProtoMessage() {}

func (x *CliMatch) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliMatch.ProtoReflect.Descriptor instead.
func (*CliMatch) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{4}
}

func (x *CliMatch) GetCheckId() string {
	if x != nil {
		return x.CheckId
	}
	return ""
}

func (x *CliMatch) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CliMatch) GetStart() *Position {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CliMatch) GetEnd() *Position {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *CliMatch) GetExtra() *CliMatchExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CliMatchExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metavars        map[string]*MetavarValue `protobuf:"bytes,81814710,rep,name=metavars,proto3" json:"metavars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Message         string                   `protobuf:"bytes,337998899,opt,name=message,proto3" json:"message,omitempty"`
	Fix             string                   `protobuf:"bytes,118677,opt,name=fix,proto3" json:"fix,omitempty"`
	FixedLines      []string                 `protobuf:"bytes,405597072,rep,name=fixed_lines,json=fixedLines,proto3" json:"fixed_lines,omitempty"`
	Metadata        *anypb.Any               `protobuf:"bytes,534382816,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Severity        *anypb.Any               `protobuf:"bytes,191113633,opt,name=severity,proto3" json:"severity,omitempty"`
	Fingerprint     string                   `protobuf:"bytes,426561151,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	Lines           string                   `protobuf:"bytes,109322879,opt,name=lines,proto3" json:"lines,omitempty"`
	IsIgnored       bool                     `protobuf:"varint,531173073,opt,name=is_ignored,json=isIgnored,proto3" json:"is_ignored,omitempty"`
	ScaInfo         *ScaMatch                `protobuf:"bytes,493451,opt,name=sca_info,json=scaInfo,proto3" json:"sca_info,omitempty"`
	ValidationState *anypb.Any               `protobuf:"bytes,332615966,opt,name=validation_state,json=validationState,proto3" json:"validation_state,omitempty"`
	HistoricalInfo  *HistoricalInfo          `protobuf:"bytes,358982721,opt,name=historical_info,json=historicalInfo,proto3" json:"historical_info,omitempty"`
	DataflowTrace   *MatchDataflowTrace      `protobuf:"bytes,359307815,opt,name=dataflow_trace,json=dataflowTrace,proto3" json:"dataflow_trace,omitempty"`
	EngineKind      *anypb.Any               `protobuf:"bytes,428564670,opt,name=engine_kind,json=engineKind,proto3" json:"engine_kind,omitempty"`
	ExtraExtra      *anypb.Any               `protobuf:"bytes,60155542,opt,name=extra_extra,json=extraExtra,proto3" json:"extra_extra,omitempty"`
}

func (x *CliMatchExtra) Reset() {
	*x = CliMatchExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliMatchExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliMatchExtra) ProtoMessage() {}

func (x *CliMatchExtra) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliMatchExtra.ProtoReflect.Descriptor instead.
func (*CliMatchExtra) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{5}
}

func (x *CliMatchExtra) GetMetavars() map[string]*MetavarValue {
	if x != nil {
		return x.Metavars
	}
	return nil
}

func (x *CliMatchExtra) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CliMatchExtra) GetFix() string {
	if x != nil {
		return x.Fix
	}
	return ""
}

func (x *CliMatchExtra) GetFixedLines() []string {
	if x != nil {
		return x.FixedLines
	}
	return nil
}

func (x *CliMatchExtra) GetMetadata() *anypb.Any {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CliMatchExtra) GetSeverity() *anypb.Any {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *CliMatchExtra) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *CliMatchExtra) GetLines() string {
	if x != nil {
		return x.Lines
	}
	return ""
}

func (x *CliMatchExtra) GetIsIgnored() bool {
	if x != nil {
		return x.IsIgnored
	}
	return false
}

func (x *CliMatchExtra) GetScaInfo() *ScaMatch {
	if x != nil {
		return x.ScaInfo
	}
	return nil
}

func (x *CliMatchExtra) GetValidationState() *anypb.Any {
	if x != nil {
		return x.ValidationState
	}
	return nil
}

func (x *CliMatchExtra) GetHistoricalInfo() *HistoricalInfo {
	if x != nil {
		return x.HistoricalInfo
	}
	return nil
}

func (x *CliMatchExtra) GetDataflowTrace() *MatchDataflowTrace {
	if x != nil {
		return x.DataflowTrace
	}
	return nil
}

func (x *CliMatchExtra) GetEngineKind() *anypb.Any {
	if x != nil {
		return x.EngineKind
	}
	return nil
}

func (x *CliMatchExtra) GetExtraExtra() *anypb.Any {
	if x != nil {
		return x.ExtraExtra
	}
	return nil
}

type MetavarValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start           *Position    `protobuf:"bytes,110621538,opt,name=start,proto3" json:"start,omitempty"`
	End             *Position    `protobuf:"bytes,99611,opt,name=end,proto3" json:"end,omitempty"`
	AbstractContent string       `protobuf:"bytes,75232495,opt,name=abstract_content,json=abstractContent,proto3" json:"abstract_content,omitempty"`
	PropagatedValue *SvalueValue `protobuf:"bytes,269991092,opt,name=propagated_value,json=propagatedValue,proto3" json:"propagated_value,omitempty"`
}

func (x *MetavarValue) Reset() {
	*x = MetavarValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetavarValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetavarValue) ProtoMessage() {}

func (x *MetavarValue) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetavarValue.ProtoReflect.Descriptor instead.
func (*MetavarValue) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{6}
}

func (x *MetavarValue) GetStart() *Position {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *MetavarValue) GetEnd() *Position {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *MetavarValue) GetAbstractContent() string {
	if x != nil {
		return x.AbstractContent
	}
	return ""
}

func (x *MetavarValue) GetPropagatedValue() *SvalueValue {
	if x != nil {
		return x.PropagatedValue
	}
	return nil
}

type SvalueValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvalueStart           *Position `protobuf:"bytes,430292789,opt,name=svalue_start,json=svalueStart,proto3" json:"svalue_start,omitempty"`
	SvalueEnd             *Position `protobuf:"bytes,313081881,opt,name=svalue_end,json=svalueEnd,proto3" json:"svalue_end,omitempty"`
	SvalueAbstractContent string    `protobuf:"bytes,526101672,opt,name=svalue_abstract_content,json=svalueAbstractContent,proto3" json:"svalue_abstract_content,omitempty"`
}

func (x *SvalueValue) Reset() {
	*x = SvalueValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SvalueValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SvalueValue) ProtoMessage() {}

func (x *SvalueValue) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SvalueValue.ProtoReflect.Descriptor instead.
func (*SvalueValue) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{7}
}

func (x *SvalueValue) GetSvalueStart() *Position {
	if x != nil {
		return x.SvalueStart
	}
	return nil
}

func (x *SvalueValue) GetSvalueEnd() *Position {
	if x != nil {
		return x.SvalueEnd
	}
	return nil
}

func (x *SvalueValue) GetSvalueAbstractContent() string {
	if x != nil {
		return x.SvalueAbstractContent
	}
	return ""
}

type MatchingExplanation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op       *anypb.Any                `protobuf:"bytes,3583,opt,name=op,proto3" json:"op,omitempty"`
	Children []*MatchingExplanation    `protobuf:"bytes,164828051,rep,name=children,proto3" json:"children,omitempty"`
	Matches  []*CoreMatch              `protobuf:"bytes,363750006,rep,name=matches,proto3" json:"matches,omitempty"`
	Loc      *Location                 `protobuf:"bytes,98688,opt,name=loc,proto3" json:"loc,omitempty"`
	Extra    *MatchingExplanationExtra `protobuf:"bytes,93093008,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *MatchingExplanation) Reset() {
	*x = MatchingExplanation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchingExplanation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingExplanation) ProtoMessage() {}

func (x *MatchingExplanation) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingExplanation.ProtoReflect.Descriptor instead.
func (*MatchingExplanation) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{8}
}

func (x *MatchingExplanation) GetOp() *anypb.Any {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *MatchingExplanation) GetChildren() []*MatchingExplanation {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *MatchingExplanation) GetMatches() []*CoreMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *MatchingExplanation) GetLoc() *Location {
	if x != nil {
		return x.Loc
	}
	return nil
}

func (x *MatchingExplanation) GetExtra() *MatchingExplanationExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

type MatchingExplanationExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeforeNegationMatches *anypb.Any `protobuf:"bytes,6545834,opt,name=before_negation_matches,json=beforeNegationMatches,proto3" json:"before_negation_matches,omitempty"`
	BeforeFilterMatches   *anypb.Any `protobuf:"bytes,316285359,opt,name=before_filter_matches,json=beforeFilterMatches,proto3" json:"before_filter_matches,omitempty"`
}

func (x *MatchingExplanationExtra) Reset() {
	*x = MatchingExplanationExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchingExplanationExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingExplanationExtra) ProtoMessage() {}

func (x *MatchingExplanationExtra) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingExplanationExtra.ProtoReflect.Descriptor instead.
func (*MatchingExplanationExtra) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{9}
}

func (x *MatchingExplanationExtra) GetBeforeNegationMatches() *anypb.Any {
	if x != nil {
		return x.BeforeNegationMatches
	}
	return nil
}

func (x *MatchingExplanationExtra) GetBeforeFilterMatches() *anypb.Any {
	if x != nil {
		return x.BeforeFilterMatches
	}
	return nil
}

type MatchDataflowTrace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaintSource      *anypb.Any              `protobuf:"bytes,109601574,opt,name=taint_source,json=taintSource,proto3" json:"taint_source,omitempty"`
	IntermediateVars []*MatchIntermediateVar `protobuf:"bytes,308706979,rep,name=intermediate_vars,json=intermediateVars,proto3" json:"intermediate_vars,omitempty"`
	TaintSink        *anypb.Any              `protobuf:"bytes,401066254,opt,name=taint_sink,json=taintSink,proto3" json:"taint_sink,omitempty"`
}

func (x *MatchDataflowTrace) Reset() {
	*x = MatchDataflowTrace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchDataflowTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchDataflowTrace) ProtoMessage() {}

func (x *MatchDataflowTrace) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchDataflowTrace.ProtoReflect.Descriptor instead.
func (*MatchDataflowTrace) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{10}
}

func (x *MatchDataflowTrace) GetTaintSource() *anypb.Any {
	if x != nil {
		return x.TaintSource
	}
	return nil
}

func (x *MatchDataflowTrace) GetIntermediateVars() []*MatchIntermediateVar {
	if x != nil {
		return x.IntermediateVars
	}
	return nil
}

func (x *MatchDataflowTrace) GetTaintSink() *anypb.Any {
	if x != nil {
		return x.TaintSink
	}
	return nil
}

type MatchIntermediateVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *Location `protobuf:"bytes,206711021,opt,name=location,proto3" json:"location,omitempty"`
	Content  string    `protobuf:"bytes,432904766,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *MatchIntermediateVar) Reset() {
	*x = MatchIntermediateVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchIntermediateVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchIntermediateVar) ProtoMessage() {}

func (x *MatchIntermediateVar) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchIntermediateVar.ProtoReflect.Descriptor instead.
func (*MatchIntermediateVar) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{11}
}

func (x *MatchIntermediateVar) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *MatchIntermediateVar) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ScaMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReachabilityRule bool             `protobuf:"varint,397050732,opt,name=reachability_rule,json=reachabilityRule,proto3" json:"reachability_rule,omitempty"`
	ScaFindingSchema int64            `protobuf:"varint,176474186,opt,name=sca_finding_schema,json=scaFindingSchema,proto3" json:"sca_finding_schema,omitempty"`
	DependencyMatch  *DependencyMatch `protobuf:"bytes,346591595,opt,name=dependency_match,json=dependencyMatch,proto3" json:"dependency_match,omitempty"`
	Reachable        bool             `protobuf:"varint,496110486,opt,name=reachable,proto3" json:"reachable,omitempty"`
	Kind             *anypb.Any       `protobuf:"bytes,3088172,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *ScaMatch) Reset() {
	*x = ScaMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaMatch) ProtoMessage() {}

func (x *ScaMatch) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaMatch.ProtoReflect.Descriptor instead.
func (*ScaMatch) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{12}
}

func (x *ScaMatch) GetReachabilityRule() bool {
	if x != nil {
		return x.ReachabilityRule
	}
	return false
}

func (x *ScaMatch) GetScaFindingSchema() int64 {
	if x != nil {
		return x.ScaFindingSchema
	}
	return 0
}

func (x *ScaMatch) GetDependencyMatch() *DependencyMatch {
	if x != nil {
		return x.DependencyMatch
	}
	return nil
}

func (x *ScaMatch) GetReachable() bool {
	if x != nil {
		return x.Reachable
	}
	return false
}

func (x *ScaMatch) GetKind() *anypb.Any {
	if x != nil {
		return x.Kind
	}
	return nil
}

type TransitiveReachable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches            []*anypb.Any `protobuf:"bytes,363750006,rep,name=matches,proto3" json:"matches,omitempty"`
	CallgraphReachable *anypb.Any   `protobuf:"bytes,166829567,opt,name=callgraph_reachable,json=callgraphReachable,proto3" json:"callgraph_reachable,omitempty"`
	Explanation        *anypb.Any   `protobuf:"bytes,520780261,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *TransitiveReachable) Reset() {
	*x = TransitiveReachable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransitiveReachable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitiveReachable) ProtoMessage() {}

func (x *TransitiveReachable) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitiveReachable.ProtoReflect.Descriptor instead.
func (*TransitiveReachable) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{13}
}

func (x *TransitiveReachable) GetMatches() []*anypb.Any {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *TransitiveReachable) GetCallgraphReachable() *anypb.Any {
	if x != nil {
		return x.CallgraphReachable
	}
	return nil
}

func (x *TransitiveReachable) GetExplanation() *anypb.Any {
	if x != nil {
		return x.Explanation
	}
	return nil
}

type TransitiveUnreachable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnalyzedPackages []*FoundDependency `protobuf:"bytes,180358889,rep,name=analyzed_packages,json=analyzedPackages,proto3" json:"analyzed_packages,omitempty"`
	Explanation      *anypb.Any         `protobuf:"bytes,520780261,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *TransitiveUnreachable) Reset() {
	*x = TransitiveUnreachable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransitiveUnreachable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitiveUnreachable) ProtoMessage() {}

func (x *TransitiveUnreachable) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitiveUnreachable.ProtoReflect.Descriptor instead.
func (*TransitiveUnreachable) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{14}
}

func (x *TransitiveUnreachable) GetAnalyzedPackages() []*FoundDependency {
	if x != nil {
		return x.AnalyzedPackages
	}
	return nil
}

func (x *TransitiveUnreachable) GetExplanation() *anypb.Any {
	if x != nil {
		return x.Explanation
	}
	return nil
}

type TransitiveUndetermined struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Explanation *anypb.Any `protobuf:"bytes,520780261,opt,name=explanation,proto3" json:"explanation,omitempty"`
}

func (x *TransitiveUndetermined) Reset() {
	*x = TransitiveUndetermined{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransitiveUndetermined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitiveUndetermined) ProtoMessage() {}

func (x *TransitiveUndetermined) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitiveUndetermined.ProtoReflect.Descriptor instead.
func (*TransitiveUndetermined) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{15}
}

func (x *TransitiveUndetermined) GetExplanation() *anypb.Any {
	if x != nil {
		return x.Explanation
	}
	return nil
}

type DependencyMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DependencyPattern *ScaPattern      `protobuf:"bytes,345131372,opt,name=dependency_pattern,json=dependencyPattern,proto3" json:"dependency_pattern,omitempty"`
	FoundDependency   *FoundDependency `protobuf:"bytes,28307609,opt,name=found_dependency,json=foundDependency,proto3" json:"found_dependency,omitempty"`
	Lockfile          string           `protobuf:"bytes,99886121,opt,name=lockfile,proto3" json:"lockfile,omitempty"`
}

func (x *DependencyMatch) Reset() {
	*x = DependencyMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyMatch) ProtoMessage() {}

func (x *DependencyMatch) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyMatch.ProtoReflect.Descriptor instead.
func (*DependencyMatch) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{16}
}

func (x *DependencyMatch) GetDependencyPattern() *ScaPattern {
	if x != nil {
		return x.DependencyPattern
	}
	return nil
}

func (x *DependencyMatch) GetFoundDependency() *FoundDependency {
	if x != nil {
		return x.FoundDependency
	}
	return nil
}

func (x *DependencyMatch) GetLockfile() string {
	if x != nil {
		return x.Lockfile
	}
	return ""
}

type ScaPattern struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ecosystem   *anypb.Any `protobuf:"bytes,7072103,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	Package     string     `protobuf:"bytes,337745074,opt,name=package,proto3" json:"package,omitempty"`
	SemverRange string     `protobuf:"bytes,154778121,opt,name=semver_range,json=semverRange,proto3" json:"semver_range,omitempty"`
}

func (x *ScaPattern) Reset() {
	*x = ScaPattern{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaPattern) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaPattern) ProtoMessage() {}

func (x *ScaPattern) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaPattern.ProtoReflect.Descriptor instead.
func (*ScaPattern) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{17}
}

func (x *ScaPattern) GetEcosystem() *anypb.Any {
	if x != nil {
		return x.Ecosystem
	}
	return nil
}

func (x *ScaPattern) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *ScaPattern) GetSemverRange() string {
	if x != nil {
		return x.SemverRange
	}
	return ""
}

type FoundDependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Package       string                `protobuf:"bytes,337745074,opt,name=package,proto3" json:"package,omitempty"`
	Version       string                `protobuf:"bytes,508888787,opt,name=version,proto3" json:"version,omitempty"`
	Ecosystem     *anypb.Any            `protobuf:"bytes,7072103,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	AllowedHashes map[string]*anypb.Any `protobuf:"bytes,24443075,rep,name=allowed_hashes,json=allowedHashes,proto3" json:"allowed_hashes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ResolvedUrl   string                `protobuf:"bytes,359565789,opt,name=resolved_url,json=resolvedUrl,proto3" json:"resolved_url,omitempty"`
	Transitivity  *anypb.Any            `protobuf:"bytes,299525532,opt,name=transitivity,proto3" json:"transitivity,omitempty"`
	ManifestPath  string                `protobuf:"bytes,277099501,opt,name=manifest_path,json=manifestPath,proto3" json:"manifest_path,omitempty"`
	LockfilePath  string                `protobuf:"bytes,249238697,opt,name=lockfile_path,json=lockfilePath,proto3" json:"lockfile_path,omitempty"`
	LineNumber    int64                 `protobuf:"varint,82464417,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	Children      []*DependencyChild    `protobuf:"bytes,164828051,rep,name=children,proto3" json:"children,omitempty"`
	GitRef        string                `protobuf:"bytes,109607572,opt,name=git_ref,json=gitRef,proto3" json:"git_ref,omitempty"`
}

func (x *FoundDependency) Reset() {
	*x = FoundDependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FoundDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FoundDependency) ProtoMessage() {}

func (x *FoundDependency) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FoundDependency.ProtoReflect.Descriptor instead.
func (*FoundDependency) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{18}
}

func (x *FoundDependency) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *FoundDependency) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FoundDependency) GetEcosystem() *anypb.Any {
	if x != nil {
		return x.Ecosystem
	}
	return nil
}

func (x *FoundDependency) GetAllowedHashes() map[string]*anypb.Any {
	if x != nil {
		return x.AllowedHashes
	}
	return nil
}

func (x *FoundDependency) GetResolvedUrl() string {
	if x != nil {
		return x.ResolvedUrl
	}
	return ""
}

func (x *FoundDependency) GetTransitivity() *anypb.Any {
	if x != nil {
		return x.Transitivity
	}
	return nil
}

func (x *FoundDependency) GetManifestPath() string {
	if x != nil {
		return x.ManifestPath
	}
	return ""
}

func (x *FoundDependency) GetLockfilePath() string {
	if x != nil {
		return x.LockfilePath
	}
	return ""
}

func (x *FoundDependency) GetLineNumber() int64 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *FoundDependency) GetChildren() []*DependencyChild {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *FoundDependency) GetGitRef() string {
	if x != nil {
		return x.GitRef
	}
	return ""
}

type DependencyChild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Package string `protobuf:"bytes,337745074,opt,name=package,proto3" json:"package,omitempty"`
	Version string `protobuf:"bytes,508888787,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *DependencyChild) Reset() {
	*x = DependencyChild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyChild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyChild) ProtoMessage() {}

func (x *DependencyChild) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyChild.ProtoReflect.Descriptor instead.
func (*DependencyChild) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{19}
}

func (x *DependencyChild) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *DependencyChild) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type HistoricalInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GitCommit          string `protobuf:"bytes,94625844,opt,name=git_commit,json=gitCommit,proto3" json:"git_commit,omitempty"`
	GitBlob            string `protobuf:"bytes,300172593,opt,name=git_blob,json=gitBlob,proto3" json:"git_blob,omitempty"`
	GitCommitTimestamp string `protobuf:"bytes,499714429,opt,name=git_commit_timestamp,json=gitCommitTimestamp,proto3" json:"git_commit_timestamp,omitempty"`
}

func (x *HistoricalInfo) Reset() {
	*x = HistoricalInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalInfo) ProtoMessage() {}

func (x *HistoricalInfo) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalInfo.ProtoReflect.Descriptor instead.
func (*HistoricalInfo) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{20}
}

func (x *HistoricalInfo) GetGitCommit() string {
	if x != nil {
		return x.GitCommit
	}
	return ""
}

func (x *HistoricalInfo) GetGitBlob() string {
	if x != nil {
		return x.GitBlob
	}
	return ""
}

func (x *HistoricalInfo) GetGitCommitTimestamp() string {
	if x != nil {
		return x.GitCommitTimestamp
	}
	return ""
}

type IncompatibleRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId      string `protobuf:"bytes,42354089,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	ThisVersion string `protobuf:"bytes,452718495,opt,name=this_version,json=thisVersion,proto3" json:"this_version,omitempty"`
	MinVersion  string `protobuf:"bytes,205101600,opt,name=min_version,json=minVersion,proto3" json:"min_version,omitempty"`
	MaxVersion  string `protobuf:"bytes,205110962,opt,name=max_version,json=maxVersion,proto3" json:"max_version,omitempty"`
}

func (x *IncompatibleRule) Reset() {
	*x = IncompatibleRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncompatibleRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncompatibleRule) ProtoMessage() {}

func (x *IncompatibleRule) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncompatibleRule.ProtoReflect.Descriptor instead.
func (*IncompatibleRule) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{21}
}

func (x *IncompatibleRule) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *IncompatibleRule) GetThisVersion() string {
	if x != nil {
		return x.ThisVersion
	}
	return ""
}

func (x *IncompatibleRule) GetMinVersion() string {
	if x != nil {
		return x.MinVersion
	}
	return ""
}

func (x *IncompatibleRule) GetMaxVersion() string {
	if x != nil {
		return x.MaxVersion
	}
	return ""
}

type CliError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int64        `protobuf:"varint,3108531,opt,name=code,proto3" json:"code,omitempty"`
	Level    *anypb.Any   `protobuf:"bytes,102865796,opt,name=level,proto3" json:"level,omitempty"`
	Type     *anypb.Any   `protobuf:"bytes,3120390,opt,name=type,proto3" json:"type,omitempty"`
	RuleId   string       `protobuf:"bytes,42354089,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	Message  string       `protobuf:"bytes,337998899,opt,name=message,proto3" json:"message,omitempty"`
	Path     string       `protobuf:"bytes,3212859,opt,name=path,proto3" json:"path,omitempty"`
	LongMsg  string       `protobuf:"bytes,242299620,opt,name=long_msg,json=longMsg,proto3" json:"long_msg,omitempty"`
	ShortMsg string       `protobuf:"bytes,7220394,opt,name=short_msg,json=shortMsg,proto3" json:"short_msg,omitempty"`
	Spans    []*ErrorSpan `protobuf:"bytes,109578729,rep,name=spans,proto3" json:"spans,omitempty"`
	Help     string       `protobuf:"bytes,3443615,opt,name=help,proto3" json:"help,omitempty"`
}

func (x *CliError) Reset() {
	*x = CliError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliError) ProtoMessage() {}

func (x *CliError) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliError.ProtoReflect.Descriptor instead.
func (*CliError) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{22}
}

func (x *CliError) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CliError) GetLevel() *anypb.Any {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *CliError) GetType() *anypb.Any {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *CliError) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *CliError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CliError) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CliError) GetLongMsg() string {
	if x != nil {
		return x.LongMsg
	}
	return ""
}

func (x *CliError) GetShortMsg() string {
	if x != nil {
		return x.ShortMsg
	}
	return ""
}

func (x *CliError) GetSpans() []*ErrorSpan {
	if x != nil {
		return x.Spans
	}
	return nil
}

func (x *CliError) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

type ErrorSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File         string    `protobuf:"bytes,3116036,opt,name=file,proto3" json:"file,omitempty"`
	Start        *Position `protobuf:"bytes,110621538,opt,name=start,proto3" json:"start,omitempty"`
	End          *Position `protobuf:"bytes,99611,opt,name=end,proto3" json:"end,omitempty"`
	SourceHash   string    `protobuf:"bytes,412117553,opt,name=source_hash,json=sourceHash,proto3" json:"source_hash,omitempty"`
	ConfigStart  *Position `protobuf:"bytes,476302353,opt,name=config_start,json=configStart,proto3" json:"config_start,omitempty"`
	ConfigEnd    *Position `protobuf:"bytes,359091445,opt,name=config_end,json=configEnd,proto3" json:"config_end,omitempty"`
	ConfigPath   []string  `protobuf:"bytes,261927867,rep,name=config_path,json=configPath,proto3" json:"config_path,omitempty"`
	ContextStart *Position `protobuf:"bytes,424938157,opt,name=context_start,json=contextStart,proto3" json:"context_start,omitempty"`
	ContextEnd   *Position `protobuf:"bytes,12625475,opt,name=context_end,json=contextEnd,proto3" json:"context_end,omitempty"`
}

func (x *ErrorSpan) Reset() {
	*x = ErrorSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorSpan) ProtoMessage() {}

func (x *ErrorSpan) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorSpan.ProtoReflect.Descriptor instead.
func (*ErrorSpan) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{23}
}

func (x *ErrorSpan) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *ErrorSpan) GetStart() *Position {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ErrorSpan) GetEnd() *Position {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *ErrorSpan) GetSourceHash() string {
	if x != nil {
		return x.SourceHash
	}
	return ""
}

func (x *ErrorSpan) GetConfigStart() *Position {
	if x != nil {
		return x.ConfigStart
	}
	return nil
}

func (x *ErrorSpan) GetConfigEnd() *Position {
	if x != nil {
		return x.ConfigEnd
	}
	return nil
}

func (x *ErrorSpan) GetConfigPath() []string {
	if x != nil {
		return x.ConfigPath
	}
	return nil
}

func (x *ErrorSpan) GetContextStart() *Position {
	if x != nil {
		return x.ContextStart
	}
	return nil
}

func (x *ErrorSpan) GetContextEnd() *Position {
	if x != nil {
		return x.ContextEnd
	}
	return nil
}

type SkippedTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path    string     `protobuf:"bytes,3212859,opt,name=path,proto3" json:"path,omitempty"`
	Reason  *anypb.Any `protobuf:"bytes,34014402,opt,name=reason,proto3" json:"reason,omitempty"`
	Details string     `protobuf:"bytes,28147206,opt,name=details,proto3" json:"details,omitempty"`
	RuleId  string     `protobuf:"bytes,42354089,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
}

func (x *SkippedTarget) Reset() {
	*x = SkippedTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkippedTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkippedTarget) ProtoMessage() {}

func (x *SkippedTarget) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkippedTarget.ProtoReflect.Descriptor instead.
func (*SkippedTarget) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{24}
}

func (x *SkippedTarget) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SkippedTarget) GetReason() *anypb.Any {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *SkippedTarget) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *SkippedTarget) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

type ScannedAndSkipped struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scanned []string         `protobuf:"bytes,478818202,rep,name=scanned,proto3" json:"scanned,omitempty"`
	Skipped []*SkippedTarget `protobuf:"bytes,480732762,rep,name=skipped,proto3" json:"skipped,omitempty"`
}

func (x *ScannedAndSkipped) Reset() {
	*x = ScannedAndSkipped{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScannedAndSkipped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScannedAndSkipped) ProtoMessage() {}

func (x *ScannedAndSkipped) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScannedAndSkipped.ProtoReflect.Descriptor instead.
func (*ScannedAndSkipped) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{25}
}

func (x *ScannedAndSkipped) GetScanned() []string {
	if x != nil {
		return x.Scanned
	}
	return nil
}

func (x *ScannedAndSkipped) GetSkipped() []*SkippedTarget {
	if x != nil {
		return x.Skipped
	}
	return nil
}

type SkippedRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId   string    `protobuf:"bytes,42354089,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	Details  string    `protobuf:"bytes,28147206,opt,name=details,proto3" json:"details,omitempty"`
	Position *Position `protobuf:"bytes,206964729,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *SkippedRule) Reset() {
	*x = SkippedRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkippedRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkippedRule) ProtoMessage() {}

func (x *SkippedRule) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkippedRule.ProtoReflect.Descriptor instead.
func (*SkippedRule) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{26}
}

func (x *SkippedRule) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *SkippedRule) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *SkippedRule) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type TargetDiscoveryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetPaths []string         `protobuf:"bytes,516466271,rep,name=target_paths,json=targetPaths,proto3" json:"target_paths,omitempty"`
	Errors      []*CoreError     `protobuf:"bytes,179828283,rep,name=errors,proto3" json:"errors,omitempty"`
	Skipped     []*SkippedTarget `protobuf:"bytes,480732762,rep,name=skipped,proto3" json:"skipped,omitempty"`
}

func (x *TargetDiscoveryResult) Reset() {
	*x = TargetDiscoveryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetDiscoveryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetDiscoveryResult) ProtoMessage() {}

func (x *TargetDiscoveryResult) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetDiscoveryResult.ProtoReflect.Descriptor instead.
func (*TargetDiscoveryResult) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{27}
}

func (x *TargetDiscoveryResult) GetTargetPaths() []string {
	if x != nil {
		return x.TargetPaths
	}
	return nil
}

func (x *TargetDiscoveryResult) GetErrors() []*CoreError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *TargetDiscoveryResult) GetSkipped() []*SkippedTarget {
	if x != nil {
		return x.Skipped
	}
	return nil
}

type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules          []string           `protobuf:"bytes,109321335,rep,name=rules,proto3" json:"rules,omitempty"`
	RulesParseTime float32            `protobuf:"fixed32,367689164,opt,name=rules_parse_time,json=rulesParseTime,proto3" json:"rules_parse_time,omitempty"`
	ProfilingTimes map[string]float32 `protobuf:"bytes,190109087,rep,name=profiling_times,json=profilingTimes,proto3" json:"profiling_times,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	ParsingTime    *ParsingTime       `protobuf:"bytes,228761080,opt,name=parsing_time,json=parsingTime,proto3" json:"parsing_time,omitempty"`
	Targets        []*TargetTimes     `protobuf:"bytes,253663046,rep,name=targets,proto3" json:"targets,omitempty"`
	TotalBytes     int64              `protobuf:"varint,525010859,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	MaxMemoryBytes int64              `protobuf:"varint,179011569,opt,name=max_memory_bytes,json=maxMemoryBytes,proto3" json:"max_memory_bytes,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{28}
}

func (x *Profile) GetRules() []string {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *Profile) GetRulesParseTime() float32 {
	if x != nil {
		return x.RulesParseTime
	}
	return 0
}

func (x *Profile) GetProfilingTimes() map[string]float32 {
	if x != nil {
		return x.ProfilingTimes
	}
	return nil
}

func (x *Profile) GetParsingTime() *ParsingTime {
	if x != nil {
		return x.ParsingTime
	}
	return nil
}

func (x *Profile) GetTargets() []*TargetTimes {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *Profile) GetTotalBytes() int64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *Profile) GetMaxMemoryBytes() int64 {
	if x != nil {
		return x.MaxMemoryBytes
	}
	return 0
}

type FileTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fpath string  `protobuf:"bytes,99598731,opt,name=fpath,proto3" json:"fpath,omitempty"`
	Ftime float32 `protobuf:"fixed32,96627443,opt,name=ftime,proto3" json:"ftime,omitempty"`
}

func (x *FileTime) Reset() {
	*x = FileTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTime) ProtoMessage() {}

func (x *FileTime) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTime.ProtoReflect.Descriptor instead.
func (*FileTime) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{29}
}

func (x *FileTime) GetFpath() string {
	if x != nil {
		return x.Fpath
	}
	return ""
}

func (x *FileTime) GetFtime() float32 {
	if x != nil {
		return x.Ftime
	}
	return 0
}

type SummaryStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mean   float32 `protobuf:"fixed32,3373467,opt,name=mean,proto3" json:"mean,omitempty"`
	StdDev float32 `protobuf:"fixed32,338078465,opt,name=std_dev,json=stdDev,proto3" json:"std_dev,omitempty"`
}

func (x *SummaryStats) Reset() {
	*x = SummaryStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SummaryStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SummaryStats) ProtoMessage() {}

func (x *SummaryStats) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SummaryStats.ProtoReflect.Descriptor instead.
func (*SummaryStats) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{30}
}

func (x *SummaryStats) GetMean() float32 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *SummaryStats) GetStdDev() float32 {
	if x != nil {
		return x.StdDev
	}
	return 0
}

type ParsingTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalTime     float32       `protobuf:"fixed32,508947525,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	PerFileTime   *SummaryStats `protobuf:"bytes,207796925,opt,name=per_file_time,json=perFileTime,proto3" json:"per_file_time,omitempty"`
	VerySlowFiles []*FileTime   `protobuf:"bytes,367005099,rep,name=very_slow_files,json=verySlowFiles,proto3" json:"very_slow_files,omitempty"`
}

func (x *ParsingTime) Reset() {
	*x = ParsingTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParsingTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsingTime) ProtoMessage() {}

func (x *ParsingTime) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsingTime.ProtoReflect.Descriptor instead.
func (*ParsingTime) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{31}
}

func (x *ParsingTime) GetTotalTime() float32 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *ParsingTime) GetPerFileTime() *SummaryStats {
	if x != nil {
		return x.PerFileTime
	}
	return nil
}

func (x *ParsingTime) GetVerySlowFiles() []*FileTime {
	if x != nil {
		return x.VerySlowFiles
	}
	return nil
}

type TargetTimes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path       string    `protobuf:"bytes,3212859,opt,name=path,proto3" json:"path,omitempty"`
	NumBytes   int64     `protobuf:"varint,49709845,opt,name=num_bytes,json=numBytes,proto3" json:"num_bytes,omitempty"`
	MatchTimes []float32 `protobuf:"fixed32,189904321,rep,packed,name=match_times,json=matchTimes,proto3" json:"match_times,omitempty"`
	ParseTimes []float32 `protobuf:"fixed32,187608495,rep,packed,name=parse_times,json=parseTimes,proto3" json:"parse_times,omitempty"`
	RunTime    float32   `protobuf:"fixed32,463101456,opt,name=run_time,json=runTime,proto3" json:"run_time,omitempty"`
}

func (x *TargetTimes) Reset() {
	*x = TargetTimes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetTimes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetTimes) ProtoMessage() {}

func (x *TargetTimes) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetTimes.ProtoReflect.Descriptor instead.
func (*TargetTimes) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{32}
}

func (x *TargetTimes) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TargetTimes) GetNumBytes() int64 {
	if x != nil {
		return x.NumBytes
	}
	return 0
}

func (x *TargetTimes) GetMatchTimes() []float32 {
	if x != nil {
		return x.MatchTimes
	}
	return nil
}

func (x *TargetTimes) GetParseTimes() []float32 {
	if x != nil {
		return x.ParseTimes
	}
	return nil
}

func (x *TargetTimes) GetRunTime() float32 {
	if x != nil {
		return x.RunTime
	}
	return 0
}

type CliOutputExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths                  *ScannedAndSkipped         `protobuf:"bytes,109417774,opt,name=paths,proto3" json:"paths,omitempty"`
	Time                   *Profile                   `protobuf:"bytes,3117011,opt,name=time,proto3" json:"time,omitempty"`
	Explanations           []*MatchingExplanation     `protobuf:"bytes,406800568,rep,name=explanations,proto3" json:"explanations,omitempty"`
	RulesByEngine          []*anypb.Any               `protobuf:"bytes,209830003,rep,name=rules_by_engine,json=rulesByEngine,proto3" json:"rules_by_engine,omitempty"`
	EngineRequested        *anypb.Any                 `protobuf:"bytes,513422373,opt,name=engine_requested,json=engineRequested,proto3" json:"engine_requested,omitempty"`
	InterfileLanguagesUsed []string                   `protobuf:"bytes,314311072,rep,name=interfile_languages_used,json=interfileLanguagesUsed,proto3" json:"interfile_languages_used,omitempty"`
	SkippedRules           []*SkippedRule             `protobuf:"bytes,55568936,rep,name=skipped_rules,json=skippedRules,proto3" json:"skipped_rules,omitempty"`
	Subprojects            []*CliOutputSubprojectInfo `protobuf:"bytes,475733982,rep,name=subprojects,proto3" json:"subprojects,omitempty"`
}

func (x *CliOutputExtra) Reset() {
	*x = CliOutputExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliOutputExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliOutputExtra) ProtoMessage() {}

func (x *CliOutputExtra) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliOutputExtra.ProtoReflect.Descriptor instead.
func (*CliOutputExtra) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{33}
}

func (x *CliOutputExtra) GetPaths() *ScannedAndSkipped {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *CliOutputExtra) GetTime() *Profile {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *CliOutputExtra) GetExplanations() []*MatchingExplanation {
	if x != nil {
		return x.Explanations
	}
	return nil
}

func (x *CliOutputExtra) GetRulesByEngine() []*anypb.Any {
	if x != nil {
		return x.RulesByEngine
	}
	return nil
}

func (x *CliOutputExtra) GetEngineRequested() *anypb.Any {
	if x != nil {
		return x.EngineRequested
	}
	return nil
}

func (x *CliOutputExtra) GetInterfileLanguagesUsed() []string {
	if x != nil {
		return x.InterfileLanguagesUsed
	}
	return nil
}

func (x *CliOutputExtra) GetSkippedRules() []*SkippedRule {
	if x != nil {
		return x.SkippedRules
	}
	return nil
}

func (x *CliOutputExtra) GetSubprojects() []*CliOutputSubprojectInfo {
	if x != nil {
		return x.Subprojects
	}
	return nil
}

type ConfigError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File   string     `protobuf:"bytes,3116036,opt,name=file,proto3" json:"file,omitempty"`
	Reason *anypb.Any `protobuf:"bytes,34014402,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *ConfigError) Reset() {
	*x = ConfigError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigError) ProtoMessage() {}

func (x *ConfigError) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigError.ProtoReflect.Descriptor instead.
func (*ConfigError) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{34}
}

func (x *ConfigError) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *ConfigError) GetReason() *anypb.Any {
	if x != nil {
		return x.Reason
	}
	return nil
}

type TestsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results               map[string]*Checks        `protobuf:"bytes,260545850,rep,name=results,proto3" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FixtestResults        map[string]*FixtestResult `protobuf:"bytes,370327112,rep,name=fixtest_results,json=fixtestResults,proto3" json:"fixtest_results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ConfigMissingTests    []string                  `protobuf:"bytes,33854174,rep,name=config_missing_tests,json=configMissingTests,proto3" json:"config_missing_tests,omitempty"`
	ConfigMissingFixtests []string                  `protobuf:"bytes,4414682,rep,name=config_missing_fixtests,json=configMissingFixtests,proto3" json:"config_missing_fixtests,omitempty"`
	ConfigWithErrors      []*ConfigError            `protobuf:"bytes,299906664,rep,name=config_with_errors,json=configWithErrors,proto3" json:"config_with_errors,omitempty"`
}

func (x *TestsResult) Reset() {
	*x = TestsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestsResult) ProtoMessage() {}

func (x *TestsResult) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestsResult.ProtoReflect.Descriptor instead.
func (*TestsResult) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{35}
}

func (x *TestsResult) GetResults() map[string]*Checks {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TestsResult) GetFixtestResults() map[string]*FixtestResult {
	if x != nil {
		return x.FixtestResults
	}
	return nil
}

func (x *TestsResult) GetConfigMissingTests() []string {
	if x != nil {
		return x.ConfigMissingTests
	}
	return nil
}

func (x *TestsResult) GetConfigMissingFixtests() []string {
	if x != nil {
		return x.ConfigMissingFixtests
	}
	return nil
}

func (x *TestsResult) GetConfigWithErrors() []*ConfigError {
	if x != nil {
		return x.ConfigWithErrors
	}
	return nil
}

type Checks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Checks map[string]*RuleResult `protobuf:"bytes,172993339,rep,name=checks,proto3" json:"checks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Checks) Reset() {
	*x = Checks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Checks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Checks) ProtoMessage() {}

func (x *Checks) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Checks.ProtoReflect.Descriptor instead.
func (*Checks) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{36}
}

func (x *Checks) GetChecks() map[string]*RuleResult {
	if x != nil {
		return x.Checks
	}
	return nil
}

type RuleResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passed    bool                         `protobuf:"varint,275375765,opt,name=passed,proto3" json:"passed,omitempty"`
	Matches   map[string]*ExpectedReported `protobuf:"bytes,363750006,rep,name=matches,proto3" json:"matches,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Errors    []int64                      `protobuf:"varint,179828283,rep,packed,name=errors,proto3" json:"errors,omitempty"`
	Diagnosis *MatchingDiagnosis           `protobuf:"bytes,489755742,opt,name=diagnosis,proto3" json:"diagnosis,omitempty"`
}

func (x *RuleResult) Reset() {
	*x = RuleResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleResult) ProtoMessage() {}

func (x *RuleResult) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleResult.ProtoReflect.Descriptor instead.
func (*RuleResult) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{37}
}

func (x *RuleResult) GetPassed() bool {
	if x != nil {
		return x.Passed
	}
	return false
}

func (x *RuleResult) GetMatches() map[string]*ExpectedReported {
	if x != nil {
		return x.Matches
	}
	return nil
}

func (x *RuleResult) GetErrors() []int64 {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *RuleResult) GetDiagnosis() *MatchingDiagnosis {
	if x != nil {
		return x.Diagnosis
	}
	return nil
}

type ExpectedReported struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedLines []int64 `protobuf:"varint,205672918,rep,packed,name=expected_lines,json=expectedLines,proto3" json:"expected_lines,omitempty"`
	ReportedLines []int64 `protobuf:"varint,219823067,rep,packed,name=reported_lines,json=reportedLines,proto3" json:"reported_lines,omitempty"`
}

func (x *ExpectedReported) Reset() {
	*x = ExpectedReported{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpectedReported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpectedReported) ProtoMessage() {}

func (x *ExpectedReported) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpectedReported.ProtoReflect.Descriptor instead.
func (*ExpectedReported) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{38}
}

func (x *ExpectedReported) GetExpectedLines() []int64 {
	if x != nil {
		return x.ExpectedLines
	}
	return nil
}

func (x *ExpectedReported) GetReportedLines() []int64 {
	if x != nil {
		return x.ReportedLines
	}
	return nil
}

type FixtestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passed bool `protobuf:"varint,275375765,opt,name=passed,proto3" json:"passed,omitempty"`
}

func (x *FixtestResult) Reset() {
	*x = FixtestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixtestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixtestResult) ProtoMessage() {}

func (x *FixtestResult) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixtestResult.ProtoReflect.Descriptor instead.
func (*FixtestResult) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{39}
}

func (x *FixtestResult) GetPassed() bool {
	if x != nil {
		return x.Passed
	}
	return false
}

type MatchingDiagnosis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target                     string                        `protobuf:"bytes,196212821,opt,name=target,proto3" json:"target,omitempty"`
	UnexpectedMatchDiagnoses   []*UnexpectedMatchDiagnosis   `protobuf:"bytes,26764990,rep,name=unexpected_match_diagnoses,json=unexpectedMatchDiagnoses,proto3" json:"unexpected_match_diagnoses,omitempty"`
	UnexpectedNoMatchDiagnoses []*UnexpectedNoMatchDiagnosis `protobuf:"bytes,179104248,rep,name=unexpected_no_match_diagnoses,json=unexpectedNoMatchDiagnoses,proto3" json:"unexpected_no_match_diagnoses,omitempty"`
}

func (x *MatchingDiagnosis) Reset() {
	*x = MatchingDiagnosis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchingDiagnosis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchingDiagnosis) ProtoMessage() {}

func (x *MatchingDiagnosis) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchingDiagnosis.ProtoReflect.Descriptor instead.
func (*MatchingDiagnosis) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{40}
}

func (x *MatchingDiagnosis) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *MatchingDiagnosis) GetUnexpectedMatchDiagnoses() []*UnexpectedMatchDiagnosis {
	if x != nil {
		return x.UnexpectedMatchDiagnoses
	}
	return nil
}

func (x *MatchingDiagnosis) GetUnexpectedNoMatchDiagnoses() []*UnexpectedNoMatchDiagnosis {
	if x != nil {
		return x.UnexpectedNoMatchDiagnoses
	}
	return nil
}

type UnexpectedMatchDiagnosis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchedText     *Snippet         `protobuf:"bytes,316873200,opt,name=matched_text,json=matchedText,proto3" json:"matched_text,omitempty"`
	OriginatingKind *anypb.Any       `protobuf:"bytes,305139273,opt,name=originating_kind,json=originatingKind,proto3" json:"originating_kind,omitempty"`
	OriginatingText *Snippet         `protobuf:"bytes,264619463,opt,name=originating_text,json=originatingText,proto3" json:"originating_text,omitempty"`
	KillingParents  []*KillingParent `protobuf:"bytes,319756597,rep,name=killing_parents,json=killingParents,proto3" json:"killing_parents,omitempty"`
}

func (x *UnexpectedMatchDiagnosis) Reset() {
	*x = UnexpectedMatchDiagnosis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnexpectedMatchDiagnosis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnexpectedMatchDiagnosis) ProtoMessage() {}

func (x *UnexpectedMatchDiagnosis) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnexpectedMatchDiagnosis.ProtoReflect.Descriptor instead.
func (*UnexpectedMatchDiagnosis) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{41}
}

func (x *UnexpectedMatchDiagnosis) GetMatchedText() *Snippet {
	if x != nil {
		return x.MatchedText
	}
	return nil
}

func (x *UnexpectedMatchDiagnosis) GetOriginatingKind() *anypb.Any {
	if x != nil {
		return x.OriginatingKind
	}
	return nil
}

func (x *UnexpectedMatchDiagnosis) GetOriginatingText() *Snippet {
	if x != nil {
		return x.OriginatingText
	}
	return nil
}

func (x *UnexpectedMatchDiagnosis) GetKillingParents() []*KillingParent {
	if x != nil {
		return x.KillingParents
	}
	return nil
}

type UnexpectedNoMatchDiagnosis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line int64      `protobuf:"varint,3117964,opt,name=line,proto3" json:"line,omitempty"`
	Kind *anypb.Any `protobuf:"bytes,3088172,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *UnexpectedNoMatchDiagnosis) Reset() {
	*x = UnexpectedNoMatchDiagnosis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnexpectedNoMatchDiagnosis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnexpectedNoMatchDiagnosis) ProtoMessage() {}

func (x *UnexpectedNoMatchDiagnosis) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnexpectedNoMatchDiagnosis.ProtoReflect.Descriptor instead.
func (*UnexpectedNoMatchDiagnosis) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{42}
}

func (x *UnexpectedNoMatchDiagnosis) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *UnexpectedNoMatchDiagnosis) GetKind() *anypb.Any {
	if x != nil {
		return x.Kind
	}
	return nil
}

type Snippet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line int64  `protobuf:"varint,3117964,opt,name=line,proto3" json:"line,omitempty"`
	Text string `protobuf:"bytes,3574323,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Snippet) Reset() {
	*x = Snippet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Snippet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snippet) ProtoMessage() {}

func (x *Snippet) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snippet.ProtoReflect.Descriptor instead.
func (*Snippet) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{43}
}

func (x *Snippet) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Snippet) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type KillingParent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KillingParentKind *anypb.Any `protobuf:"bytes,367710694,opt,name=killing_parent_kind,json=killingParentKind,proto3" json:"killing_parent_kind,omitempty"`
	Snippet           *Snippet   `protobuf:"bytes,185277154,opt,name=snippet,proto3" json:"snippet,omitempty"`
}

func (x *KillingParent) Reset() {
	*x = KillingParent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KillingParent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KillingParent) ProtoMessage() {}

func (x *KillingParent) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KillingParent.ProtoReflect.Descriptor instead.
func (*KillingParent) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{44}
}

func (x *KillingParent) GetKillingParentKind() *anypb.Any {
	if x != nil {
		return x.KillingParentKind
	}
	return nil
}

func (x *KillingParent) GetSnippet() *Snippet {
	if x != nil {
		return x.Snippet
	}
	return nil
}

type Features struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Autofix                       bool `protobuf:"varint,82457874,opt,name=autofix,proto3" json:"autofix,omitempty"`
	Deepsemgrep                   bool `protobuf:"varint,444846865,opt,name=deepsemgrep,proto3" json:"deepsemgrep,omitempty"`
	DependencyQuery               bool `protobuf:"varint,471197362,opt,name=dependency_query,json=dependencyQuery,proto3" json:"dependency_query,omitempty"`
	PathToTransitivity            bool `protobuf:"varint,52910370,opt,name=path_to_transitivity,json=pathToTransitivity,proto3" json:"path_to_transitivity,omitempty"`
	ScanAllDepsInDiffScan         bool `protobuf:"varint,261708029,opt,name=scan_all_deps_in_diff_scan,json=scanAllDepsInDiffScan,proto3" json:"scan_all_deps_in_diff_scan,omitempty"`
	SymbolAnalysis                bool `protobuf:"varint,299212646,opt,name=symbol_analysis,json=symbolAnalysis,proto3" json:"symbol_analysis,omitempty"`
	TransitiveReachabilityEnabled bool `protobuf:"varint,114598304,opt,name=transitive_reachability_enabled,json=transitiveReachabilityEnabled,proto3" json:"transitive_reachability_enabled,omitempty"`
}

func (x *Features) Reset() {
	*x = Features{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Features) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Features) ProtoMessage() {}

func (x *Features) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Features.ProtoReflect.Descriptor instead.
func (*Features) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{45}
}

func (x *Features) GetAutofix() bool {
	if x != nil {
		return x.Autofix
	}
	return false
}

func (x *Features) GetDeepsemgrep() bool {
	if x != nil {
		return x.Deepsemgrep
	}
	return false
}

func (x *Features) GetDependencyQuery() bool {
	if x != nil {
		return x.DependencyQuery
	}
	return false
}

func (x *Features) GetPathToTransitivity() bool {
	if x != nil {
		return x.PathToTransitivity
	}
	return false
}

func (x *Features) GetScanAllDepsInDiffScan() bool {
	if x != nil {
		return x.ScanAllDepsInDiffScan
	}
	return false
}

func (x *Features) GetSymbolAnalysis() bool {
	if x != nil {
		return x.SymbolAnalysis
	}
	return false
}

func (x *Features) GetTransitiveReachabilityEnabled() bool {
	if x != nil {
		return x.TransitiveReachabilityEnabled
	}
	return false
}

type TriageIgnored struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TriageIgnoredSyntacticIds  []string `protobuf:"bytes,211590151,rep,name=triage_ignored_syntactic_ids,json=triageIgnoredSyntacticIds,proto3" json:"triage_ignored_syntactic_ids,omitempty"`
	TriageIgnoredMatchBasedIds []string `protobuf:"bytes,327942260,rep,name=triage_ignored_match_based_ids,json=triageIgnoredMatchBasedIds,proto3" json:"triage_ignored_match_based_ids,omitempty"`
}

func (x *TriageIgnored) Reset() {
	*x = TriageIgnored{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriageIgnored) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriageIgnored) ProtoMessage() {}

func (x *TriageIgnored) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriageIgnored.ProtoReflect.Descriptor instead.
func (*TriageIgnored) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{46}
}

func (x *TriageIgnored) GetTriageIgnoredSyntacticIds() []string {
	if x != nil {
		return x.TriageIgnoredSyntacticIds
	}
	return nil
}

func (x *TriageIgnored) GetTriageIgnoredMatchBasedIds() []string {
	if x != nil {
		return x.TriageIgnoredMatchBasedIds
	}
	return nil
}

type ScanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info         *ScanInfo            `protobuf:"bytes,3408338,opt,name=info,proto3" json:"info,omitempty"`
	Config       *ScanConfiguration   `protobuf:"bytes,364565635,opt,name=config,proto3" json:"config,omitempty"`
	EngineParams *EngineConfiguration `protobuf:"bytes,411399043,opt,name=engine_params,json=engineParams,proto3" json:"engine_params,omitempty"`
}

func (x *ScanResponse) Reset() {
	*x = ScanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanResponse) ProtoMessage() {}

func (x *ScanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanResponse.ProtoReflect.Descriptor instead.
func (*ScanResponse) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{47}
}

func (x *ScanResponse) GetInfo() *ScanInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ScanResponse) GetConfig() *ScanConfiguration {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ScanResponse) GetEngineParams() *EngineConfiguration {
	if x != nil {
		return x.EngineParams
	}
	return nil
}

type ScanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64        `protobuf:"varint,3205,opt,name=id,proto3" json:"id,omitempty"`
	EnabledProducts []*anypb.Any `protobuf:"bytes,447415338,rep,name=enabled_products,json=enabledProducts,proto3" json:"enabled_products,omitempty"`
	DeploymentId    int64        `protobuf:"varint,188822146,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	DeploymentName  string       `protobuf:"bytes,129624728,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
}

func (x *ScanInfo) Reset() {
	*x = ScanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanInfo) ProtoMessage() {}

func (x *ScanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanInfo.ProtoReflect.Descriptor instead.
func (*ScanInfo) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{48}
}

func (x *ScanInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScanInfo) GetEnabledProducts() []*anypb.Any {
	if x != nil {
		return x.EnabledProducts
	}
	return nil
}

func (x *ScanInfo) GetDeploymentId() int64 {
	if x != nil {
		return x.DeploymentId
	}
	return 0
}

func (x *ScanInfo) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

type ScanConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules                      *anypb.Any `protobuf:"bytes,109321335,opt,name=rules,proto3" json:"rules,omitempty"`
	TriageIgnoredSyntacticIds  []string   `protobuf:"bytes,211590151,rep,name=triage_ignored_syntactic_ids,json=triageIgnoredSyntacticIds,proto3" json:"triage_ignored_syntactic_ids,omitempty"`
	TriageIgnoredMatchBasedIds []string   `protobuf:"bytes,327942260,rep,name=triage_ignored_match_based_ids,json=triageIgnoredMatchBasedIds,proto3" json:"triage_ignored_match_based_ids,omitempty"`
	FipsMode                   bool       `protobuf:"varint,37517314,opt,name=fips_mode,json=fipsMode,proto3" json:"fips_mode,omitempty"`
}

func (x *ScanConfiguration) Reset() {
	*x = ScanConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanConfiguration) ProtoMessage() {}

func (x *ScanConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanConfiguration.ProtoReflect.Descriptor instead.
func (*ScanConfiguration) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{49}
}

func (x *ScanConfiguration) GetRules() *anypb.Any {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *ScanConfiguration) GetTriageIgnoredSyntacticIds() []string {
	if x != nil {
		return x.TriageIgnoredSyntacticIds
	}
	return nil
}

func (x *ScanConfiguration) GetTriageIgnoredMatchBasedIds() []string {
	if x != nil {
		return x.TriageIgnoredMatchBasedIds
	}
	return nil
}

func (x *ScanConfiguration) GetFipsMode() bool {
	if x != nil {
		return x.FipsMode
	}
	return false
}

type EngineConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Autofix                       bool                     `protobuf:"varint,82457874,opt,name=autofix,proto3" json:"autofix,omitempty"`
	Deepsemgrep                   bool                     `protobuf:"varint,444846865,opt,name=deepsemgrep,proto3" json:"deepsemgrep,omitempty"`
	DependencyQuery               bool                     `protobuf:"varint,471197362,opt,name=dependency_query,json=dependencyQuery,proto3" json:"dependency_query,omitempty"`
	PathToTransitivity            bool                     `protobuf:"varint,52910370,opt,name=path_to_transitivity,json=pathToTransitivity,proto3" json:"path_to_transitivity,omitempty"`
	ScanAllDepsInDiffScan         bool                     `protobuf:"varint,261708029,opt,name=scan_all_deps_in_diff_scan,json=scanAllDepsInDiffScan,proto3" json:"scan_all_deps_in_diff_scan,omitempty"`
	SymbolAnalysis                bool                     `protobuf:"varint,299212646,opt,name=symbol_analysis,json=symbolAnalysis,proto3" json:"symbol_analysis,omitempty"`
	TransitiveReachabilityEnabled bool                     `protobuf:"varint,114598304,opt,name=transitive_reachability_enabled,json=transitiveReachabilityEnabled,proto3" json:"transitive_reachability_enabled,omitempty"`
	IgnoredFiles                  []string                 `protobuf:"bytes,482076310,rep,name=ignored_files,json=ignoredFiles,proto3" json:"ignored_files,omitempty"`
	ProductIgnoredFiles           []*anypb.Any             `protobuf:"bytes,298217262,rep,name=product_ignored_files,json=productIgnoredFiles,proto3" json:"product_ignored_files,omitempty"`
	GenericSlowRollout            bool                     `protobuf:"varint,78139686,opt,name=generic_slow_rollout,json=genericSlowRollout,proto3" json:"generic_slow_rollout,omitempty"`
	HistoricalConfig              *HistoricalConfiguration `protobuf:"bytes,66628402,opt,name=historical_config,json=historicalConfig,proto3" json:"historical_config,omitempty"`
	AlwaysSuppressErrors          bool                     `protobuf:"varint,432871568,opt,name=always_suppress_errors,json=alwaysSuppressErrors,proto3" json:"always_suppress_errors,omitempty"`
}

func (x *EngineConfiguration) Reset() {
	*x = EngineConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineConfiguration) ProtoMessage() {}

func (x *EngineConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineConfiguration.ProtoReflect.Descriptor instead.
func (*EngineConfiguration) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{50}
}

func (x *EngineConfiguration) GetAutofix() bool {
	if x != nil {
		return x.Autofix
	}
	return false
}

func (x *EngineConfiguration) GetDeepsemgrep() bool {
	if x != nil {
		return x.Deepsemgrep
	}
	return false
}

func (x *EngineConfiguration) GetDependencyQuery() bool {
	if x != nil {
		return x.DependencyQuery
	}
	return false
}

func (x *EngineConfiguration) GetPathToTransitivity() bool {
	if x != nil {
		return x.PathToTransitivity
	}
	return false
}

func (x *EngineConfiguration) GetScanAllDepsInDiffScan() bool {
	if x != nil {
		return x.ScanAllDepsInDiffScan
	}
	return false
}

func (x *EngineConfiguration) GetSymbolAnalysis() bool {
	if x != nil {
		return x.SymbolAnalysis
	}
	return false
}

func (x *EngineConfiguration) GetTransitiveReachabilityEnabled() bool {
	if x != nil {
		return x.TransitiveReachabilityEnabled
	}
	return false
}

func (x *EngineConfiguration) GetIgnoredFiles() []string {
	if x != nil {
		return x.IgnoredFiles
	}
	return nil
}

func (x *EngineConfiguration) GetProductIgnoredFiles() []*anypb.Any {
	if x != nil {
		return x.ProductIgnoredFiles
	}
	return nil
}

func (x *EngineConfiguration) GetGenericSlowRollout() bool {
	if x != nil {
		return x.GenericSlowRollout
	}
	return false
}

func (x *EngineConfiguration) GetHistoricalConfig() *HistoricalConfiguration {
	if x != nil {
		return x.HistoricalConfig
	}
	return nil
}

func (x *EngineConfiguration) GetAlwaysSuppressErrors() bool {
	if x != nil {
		return x.AlwaysSuppressErrors
	}
	return false
}

type HistoricalConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool  `protobuf:"varint,476613995,opt,name=enabled,proto3" json:"enabled,omitempty"`
	LookbackDays int64 `protobuf:"varint,382926518,opt,name=lookback_days,json=lookbackDays,proto3" json:"lookback_days,omitempty"`
}

func (x *HistoricalConfiguration) Reset() {
	*x = HistoricalConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalConfiguration) ProtoMessage() {}

func (x *HistoricalConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalConfiguration.ProtoReflect.Descriptor instead.
func (*HistoricalConfiguration) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{51}
}

func (x *HistoricalConfiguration) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *HistoricalConfiguration) GetLookbackDays() int64 {
	if x != nil {
		return x.LookbackDays
	}
	return 0
}

type ScanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectMetadata *ProjectMetadata  `protobuf:"bytes,24255885,opt,name=project_metadata,json=projectMetadata,proto3" json:"project_metadata,omitempty"`
	ScanMetadata    *ScanMetadata     `protobuf:"bytes,76122041,opt,name=scan_metadata,json=scanMetadata,proto3" json:"scan_metadata,omitempty"`
	ProjectConfig   *CiConfigFromRepo `protobuf:"bytes,317758767,opt,name=project_config,json=projectConfig,proto3" json:"project_config,omitempty"`
}

func (x *ScanRequest) Reset() {
	*x = ScanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanRequest) ProtoMessage() {}

func (x *ScanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanRequest.ProtoReflect.Descriptor instead.
func (*ScanRequest) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{52}
}

func (x *ScanRequest) GetProjectMetadata() *ProjectMetadata {
	if x != nil {
		return x.ProjectMetadata
	}
	return nil
}

func (x *ScanRequest) GetScanMetadata() *ScanMetadata {
	if x != nil {
		return x.ScanMetadata
	}
	return nil
}

func (x *ScanRequest) GetProjectConfig() *CiConfigFromRepo {
	if x != nil {
		return x.ProjectConfig
	}
	return nil
}

type ProjectMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScanEnvironment           string `protobuf:"bytes,288669428,opt,name=scan_environment,json=scanEnvironment,proto3" json:"scan_environment,omitempty"`
	Repository                string `protobuf:"bytes,439913047,opt,name=repository,proto3" json:"repository,omitempty"`
	RepoUrl                   string `protobuf:"bytes,245057343,opt,name=repo_url,json=repoUrl,proto3" json:"repo_url,omitempty"`
	RepoId                    string `protobuf:"bytes,42655347,opt,name=repo_id,json=repoId,proto3" json:"repo_id,omitempty"`
	OrgId                     string `protobuf:"bytes,278463023,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	RepoDisplayName           string `protobuf:"bytes,340226562,opt,name=repo_display_name,json=repoDisplayName,proto3" json:"repo_display_name,omitempty"`
	Branch                    string `protobuf:"bytes,387879587,opt,name=branch,proto3" json:"branch,omitempty"`
	Commit                    string `protobuf:"bytes,200081263,opt,name=commit,proto3" json:"commit,omitempty"`
	CommitTitle               string `protobuf:"bytes,23517072,opt,name=commit_title,json=commitTitle,proto3" json:"commit_title,omitempty"`
	CommitTimestamp           string `protobuf:"bytes,43592767,opt,name=commit_timestamp,json=commitTimestamp,proto3" json:"commit_timestamp,omitempty"`
	CommitAuthorEmail         string `protobuf:"bytes,458576327,opt,name=commit_author_email,json=commitAuthorEmail,proto3" json:"commit_author_email,omitempty"`
	CommitAuthorName          string `protobuf:"bytes,534568416,opt,name=commit_author_name,json=commitAuthorName,proto3" json:"commit_author_name,omitempty"`
	CommitAuthorUsername      string `protobuf:"bytes,247483738,opt,name=commit_author_username,json=commitAuthorUsername,proto3" json:"commit_author_username,omitempty"`
	CommitAuthorImageUrl      string `protobuf:"bytes,314681517,opt,name=commit_author_image_url,json=commitAuthorImageUrl,proto3" json:"commit_author_image_url,omitempty"`
	CiJobUrl                  string `protobuf:"bytes,514550082,opt,name=ci_job_url,json=ciJobUrl,proto3" json:"ci_job_url,omitempty"`
	On                        string `protobuf:"bytes,3521,opt,name=on,proto3" json:"on,omitempty"`
	PullRequestAuthorUsername string `protobuf:"bytes,51694226,opt,name=pull_request_author_username,json=pullRequestAuthorUsername,proto3" json:"pull_request_author_username,omitempty"`
	PullRequestAuthorImageUrl string `protobuf:"bytes,111812919,opt,name=pull_request_author_image_url,json=pullRequestAuthorImageUrl,proto3" json:"pull_request_author_image_url,omitempty"`
	PullRequestId             string `protobuf:"bytes,68641510,opt,name=pull_request_id,json=pullRequestId,proto3" json:"pull_request_id,omitempty"`
	PullRequestTitle          string `protobuf:"bytes,262859048,opt,name=pull_request_title,json=pullRequestTitle,proto3" json:"pull_request_title,omitempty"`
	BaseSha                   string `protobuf:"bytes,58840223,opt,name=base_sha,json=baseSha,proto3" json:"base_sha,omitempty"`
	StartSha                  string `protobuf:"bytes,227257877,opt,name=start_sha,json=startSha,proto3" json:"start_sha,omitempty"`
	IsFullScan                bool   `protobuf:"varint,137078333,opt,name=is_full_scan,json=isFullScan,proto3" json:"is_full_scan,omitempty"`
	IsScaScan                 bool   `protobuf:"varint,27492159,opt,name=is_sca_scan,json=isScaScan,proto3" json:"is_sca_scan,omitempty"`
	IsCodeScan                bool   `protobuf:"varint,132339791,opt,name=is_code_scan,json=isCodeScan,proto3" json:"is_code_scan,omitempty"`
	IsSecretsScan             bool   `protobuf:"varint,41780370,opt,name=is_secrets_scan,json=isSecretsScan,proto3" json:"is_secrets_scan,omitempty"`
	ProjectId                 string `protobuf:"bytes,279111194,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ProjectMetadata) Reset() {
	*x = ProjectMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectMetadata) ProtoMessage() {}

func (x *ProjectMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectMetadata.ProtoReflect.Descriptor instead.
func (*ProjectMetadata) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{53}
}

func (x *ProjectMetadata) GetScanEnvironment() string {
	if x != nil {
		return x.ScanEnvironment
	}
	return ""
}

func (x *ProjectMetadata) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *ProjectMetadata) GetRepoUrl() string {
	if x != nil {
		return x.RepoUrl
	}
	return ""
}

func (x *ProjectMetadata) GetRepoId() string {
	if x != nil {
		return x.RepoId
	}
	return ""
}

func (x *ProjectMetadata) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *ProjectMetadata) GetRepoDisplayName() string {
	if x != nil {
		return x.RepoDisplayName
	}
	return ""
}

func (x *ProjectMetadata) GetBranch() string {
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *ProjectMetadata) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *ProjectMetadata) GetCommitTitle() string {
	if x != nil {
		return x.CommitTitle
	}
	return ""
}

func (x *ProjectMetadata) GetCommitTimestamp() string {
	if x != nil {
		return x.CommitTimestamp
	}
	return ""
}

func (x *ProjectMetadata) GetCommitAuthorEmail() string {
	if x != nil {
		return x.CommitAuthorEmail
	}
	return ""
}

func (x *ProjectMetadata) GetCommitAuthorName() string {
	if x != nil {
		return x.CommitAuthorName
	}
	return ""
}

func (x *ProjectMetadata) GetCommitAuthorUsername() string {
	if x != nil {
		return x.CommitAuthorUsername
	}
	return ""
}

func (x *ProjectMetadata) GetCommitAuthorImageUrl() string {
	if x != nil {
		return x.CommitAuthorImageUrl
	}
	return ""
}

func (x *ProjectMetadata) GetCiJobUrl() string {
	if x != nil {
		return x.CiJobUrl
	}
	return ""
}

func (x *ProjectMetadata) GetOn() string {
	if x != nil {
		return x.On
	}
	return ""
}

func (x *ProjectMetadata) GetPullRequestAuthorUsername() string {
	if x != nil {
		return x.PullRequestAuthorUsername
	}
	return ""
}

func (x *ProjectMetadata) GetPullRequestAuthorImageUrl() string {
	if x != nil {
		return x.PullRequestAuthorImageUrl
	}
	return ""
}

func (x *ProjectMetadata) GetPullRequestId() string {
	if x != nil {
		return x.PullRequestId
	}
	return ""
}

func (x *ProjectMetadata) GetPullRequestTitle() string {
	if x != nil {
		return x.PullRequestTitle
	}
	return ""
}

func (x *ProjectMetadata) GetBaseSha() string {
	if x != nil {
		return x.BaseSha
	}
	return ""
}

func (x *ProjectMetadata) GetStartSha() string {
	if x != nil {
		return x.StartSha
	}
	return ""
}

func (x *ProjectMetadata) GetIsFullScan() bool {
	if x != nil {
		return x.IsFullScan
	}
	return false
}

func (x *ProjectMetadata) GetIsScaScan() bool {
	if x != nil {
		return x.IsScaScan
	}
	return false
}

func (x *ProjectMetadata) GetIsCodeScan() bool {
	if x != nil {
		return x.IsCodeScan
	}
	return false
}

func (x *ProjectMetadata) GetIsSecretsScan() bool {
	if x != nil {
		return x.IsSecretsScan
	}
	return false
}

func (x *ProjectMetadata) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ScanMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CliVersion        string       `protobuf:"bytes,205096878,opt,name=cli_version,json=cliVersion,proto3" json:"cli_version,omitempty"`
	UniqueId          string       `protobuf:"bytes,445148607,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	RequestedProducts []*anypb.Any `protobuf:"bytes,6989766,rep,name=requested_products,json=requestedProducts,proto3" json:"requested_products,omitempty"`
	DryRun            bool         `protobuf:"varint,151515763,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	SmsScanId         string       `protobuf:"bytes,129251445,opt,name=sms_scan_id,json=smsScanId,proto3" json:"sms_scan_id,omitempty"`
}

func (x *ScanMetadata) Reset() {
	*x = ScanMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanMetadata) ProtoMessage() {}

func (x *ScanMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanMetadata.ProtoReflect.Descriptor instead.
func (*ScanMetadata) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{54}
}

func (x *ScanMetadata) GetCliVersion() string {
	if x != nil {
		return x.CliVersion
	}
	return ""
}

func (x *ScanMetadata) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *ScanMetadata) GetRequestedProducts() []*anypb.Any {
	if x != nil {
		return x.RequestedProducts
	}
	return nil
}

func (x *ScanMetadata) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

func (x *ScanMetadata) GetSmsScanId() string {
	if x != nil {
		return x.SmsScanId
	}
	return ""
}

type CiConfigFromRepo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version string   `protobuf:"bytes,508888787,opt,name=version,proto3" json:"version,omitempty"`
	Tags    []string `protobuf:"bytes,3528071,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CiConfigFromRepo) Reset() {
	*x = CiConfigFromRepo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiConfigFromRepo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiConfigFromRepo) ProtoMessage() {}

func (x *CiConfigFromRepo) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiConfigFromRepo.ProtoReflect.Descriptor instead.
func (*CiConfigFromRepo) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{55}
}

func (x *CiConfigFromRepo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CiConfigFromRepo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type Finding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckId         string              `protobuf:"bytes,244492357,opt,name=check_id,json=checkId,proto3" json:"check_id,omitempty"`
	Path            string              `protobuf:"bytes,3212859,opt,name=path,proto3" json:"path,omitempty"`
	Line            int64               `protobuf:"varint,3117964,opt,name=line,proto3" json:"line,omitempty"`
	Column          int64               `protobuf:"varint,32237808,opt,name=column,proto3" json:"column,omitempty"`
	EndLine         int64               `protobuf:"varint,269465307,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	EndColumn       int64               `protobuf:"varint,119242219,opt,name=end_column,json=endColumn,proto3" json:"end_column,omitempty"`
	Message         string              `protobuf:"bytes,337998899,opt,name=message,proto3" json:"message,omitempty"`
	Severity        *anypb.Any          `protobuf:"bytes,191113633,opt,name=severity,proto3" json:"severity,omitempty"`
	Index           int64               `protobuf:"varint,113931026,opt,name=index,proto3" json:"index,omitempty"`
	CommitDate      string              `protobuf:"bytes,139249355,opt,name=commit_date,json=commitDate,proto3" json:"commit_date,omitempty"`
	SyntacticId     string              `protobuf:"bytes,386155329,opt,name=syntactic_id,json=syntacticId,proto3" json:"syntactic_id,omitempty"`
	MatchBasedId    string              `protobuf:"bytes,394189736,opt,name=match_based_id,json=matchBasedId,proto3" json:"match_based_id,omitempty"`
	Hashes          *FindingHashes      `protobuf:"bytes,167614410,opt,name=hashes,proto3" json:"hashes,omitempty"`
	Metadata        *anypb.Any          `protobuf:"bytes,534382816,opt,name=metadata,proto3" json:"metadata,omitempty"`
	IsBlocking      bool                `protobuf:"varint,487146492,opt,name=is_blocking,json=isBlocking,proto3" json:"is_blocking,omitempty"`
	FixedLines      []string            `protobuf:"bytes,405597072,rep,name=fixed_lines,json=fixedLines,proto3" json:"fixed_lines,omitempty"`
	ScaInfo         *ScaMatch           `protobuf:"bytes,493451,opt,name=sca_info,json=scaInfo,proto3" json:"sca_info,omitempty"`
	DataflowTrace   *MatchDataflowTrace `protobuf:"bytes,359307815,opt,name=dataflow_trace,json=dataflowTrace,proto3" json:"dataflow_trace,omitempty"`
	ValidationState *anypb.Any          `protobuf:"bytes,332615966,opt,name=validation_state,json=validationState,proto3" json:"validation_state,omitempty"`
	HistoricalInfo  *HistoricalInfo     `protobuf:"bytes,358982721,opt,name=historical_info,json=historicalInfo,proto3" json:"historical_info,omitempty"`
	EngineKind      *anypb.Any          `protobuf:"bytes,428564670,opt,name=engine_kind,json=engineKind,proto3" json:"engine_kind,omitempty"`
}

func (x *Finding) Reset() {
	*x = Finding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Finding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Finding) ProtoMessage() {}

func (x *Finding) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Finding.ProtoReflect.Descriptor instead.
func (*Finding) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{56}
}

func (x *Finding) GetCheckId() string {
	if x != nil {
		return x.CheckId
	}
	return ""
}

func (x *Finding) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Finding) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Finding) GetColumn() int64 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *Finding) GetEndLine() int64 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *Finding) GetEndColumn() int64 {
	if x != nil {
		return x.EndColumn
	}
	return 0
}

func (x *Finding) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Finding) GetSeverity() *anypb.Any {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *Finding) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Finding) GetCommitDate() string {
	if x != nil {
		return x.CommitDate
	}
	return ""
}

func (x *Finding) GetSyntacticId() string {
	if x != nil {
		return x.SyntacticId
	}
	return ""
}

func (x *Finding) GetMatchBasedId() string {
	if x != nil {
		return x.MatchBasedId
	}
	return ""
}

func (x *Finding) GetHashes() *FindingHashes {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *Finding) GetMetadata() *anypb.Any {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Finding) GetIsBlocking() bool {
	if x != nil {
		return x.IsBlocking
	}
	return false
}

func (x *Finding) GetFixedLines() []string {
	if x != nil {
		return x.FixedLines
	}
	return nil
}

func (x *Finding) GetScaInfo() *ScaMatch {
	if x != nil {
		return x.ScaInfo
	}
	return nil
}

func (x *Finding) GetDataflowTrace() *MatchDataflowTrace {
	if x != nil {
		return x.DataflowTrace
	}
	return nil
}

func (x *Finding) GetValidationState() *anypb.Any {
	if x != nil {
		return x.ValidationState
	}
	return nil
}

func (x *Finding) GetHistoricalInfo() *HistoricalInfo {
	if x != nil {
		return x.HistoricalInfo
	}
	return nil
}

func (x *Finding) GetEngineKind() *anypb.Any {
	if x != nil {
		return x.EngineKind
	}
	return nil
}

type FindingHashes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLineHash string `protobuf:"bytes,166523834,opt,name=start_line_hash,json=startLineHash,proto3" json:"start_line_hash,omitempty"`
	EndLineHash   string `protobuf:"bytes,203509511,opt,name=end_line_hash,json=endLineHash,proto3" json:"end_line_hash,omitempty"`
	CodeHash      string `protobuf:"bytes,135625069,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
	PatternHash   string `protobuf:"bytes,242617803,opt,name=pattern_hash,json=patternHash,proto3" json:"pattern_hash,omitempty"`
}

func (x *FindingHashes) Reset() {
	*x = FindingHashes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindingHashes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindingHashes) ProtoMessage() {}

func (x *FindingHashes) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindingHashes.ProtoReflect.Descriptor instead.
func (*FindingHashes) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{57}
}

func (x *FindingHashes) GetStartLineHash() string {
	if x != nil {
		return x.StartLineHash
	}
	return ""
}

func (x *FindingHashes) GetEndLineHash() string {
	if x != nil {
		return x.EndLineHash
	}
	return ""
}

func (x *FindingHashes) GetCodeHash() string {
	if x != nil {
		return x.CodeHash
	}
	return ""
}

func (x *FindingHashes) GetPatternHash() string {
	if x != nil {
		return x.PatternHash
	}
	return ""
}

type CiScanResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Findings      []*Finding            `protobuf:"bytes,343207531,rep,name=findings,proto3" json:"findings,omitempty"`
	Ignores       []*Finding            `protobuf:"bytes,373337124,rep,name=ignores,proto3" json:"ignores,omitempty"`
	Token         string                `protobuf:"bytes,104702585,opt,name=token,proto3" json:"token,omitempty"`
	SearchedPaths []string              `protobuf:"bytes,302953681,rep,name=searched_paths,json=searchedPaths,proto3" json:"searched_paths,omitempty"`
	RenamedPaths  []string              `protobuf:"bytes,204829593,rep,name=renamed_paths,json=renamedPaths,proto3" json:"renamed_paths,omitempty"`
	RuleIds       []string              `protobuf:"bytes,212698331,rep,name=rule_ids,json=ruleIds,proto3" json:"rule_ids,omitempty"`
	Contributions []*Contribution       `protobuf:"bytes,7572534,rep,name=contributions,proto3" json:"contributions,omitempty"`
	Dependencies  map[string]*anypb.Any `protobuf:"bytes,469817480,rep,name=dependencies,proto3" json:"dependencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CiScanResults) Reset() {
	*x = CiScanResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiScanResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiScanResults) ProtoMessage() {}

func (x *CiScanResults) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiScanResults.ProtoReflect.Descriptor instead.
func (*CiScanResults) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{58}
}

func (x *CiScanResults) GetFindings() []*Finding {
	if x != nil {
		return x.Findings
	}
	return nil
}

func (x *CiScanResults) GetIgnores() []*Finding {
	if x != nil {
		return x.Ignores
	}
	return nil
}

func (x *CiScanResults) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CiScanResults) GetSearchedPaths() []string {
	if x != nil {
		return x.SearchedPaths
	}
	return nil
}

func (x *CiScanResults) GetRenamedPaths() []string {
	if x != nil {
		return x.RenamedPaths
	}
	return nil
}

func (x *CiScanResults) GetRuleIds() []string {
	if x != nil {
		return x.RuleIds
	}
	return nil
}

func (x *CiScanResults) GetContributions() []*Contribution {
	if x != nil {
		return x.Contributions
	}
	return nil
}

func (x *CiScanResults) GetDependencies() map[string]*anypb.Any {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type Contributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitAuthorName  string `protobuf:"bytes,534568416,opt,name=commit_author_name,json=commitAuthorName,proto3" json:"commit_author_name,omitempty"`
	CommitAuthorEmail string `protobuf:"bytes,458576327,opt,name=commit_author_email,json=commitAuthorEmail,proto3" json:"commit_author_email,omitempty"`
}

func (x *Contributor) Reset() {
	*x = Contributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contributor) ProtoMessage() {}

func (x *Contributor) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contributor.ProtoReflect.Descriptor instead.
func (*Contributor) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{59}
}

func (x *Contributor) GetCommitAuthorName() string {
	if x != nil {
		return x.CommitAuthorName
	}
	return ""
}

func (x *Contributor) GetCommitAuthorEmail() string {
	if x != nil {
		return x.CommitAuthorEmail
	}
	return ""
}

type Contribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommitHash      string       `protobuf:"bytes,310068374,opt,name=commit_hash,json=commitHash,proto3" json:"commit_hash,omitempty"`
	CommitTimestamp string       `protobuf:"bytes,43592767,opt,name=commit_timestamp,json=commitTimestamp,proto3" json:"commit_timestamp,omitempty"`
	Contributor     *Contributor `protobuf:"bytes,119395250,opt,name=contributor,proto3" json:"contributor,omitempty"`
}

func (x *Contribution) Reset() {
	*x = Contribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contribution) ProtoMessage() {}

func (x *Contribution) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contribution.ProtoReflect.Descriptor instead.
func (*Contribution) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{60}
}

func (x *Contribution) GetCommitHash() string {
	if x != nil {
		return x.CommitHash
	}
	return ""
}

func (x *Contribution) GetCommitTimestamp() string {
	if x != nil {
		return x.CommitTimestamp
	}
	return ""
}

func (x *Contribution) GetContributor() *Contributor {
	if x != nil {
		return x.Contributor
	}
	return nil
}

type CiScanResultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Errors []*CiScanResultsResponseError `protobuf:"bytes,179828283,rep,name=errors,proto3" json:"errors,omitempty"`
	TaskId string                        `protobuf:"bytes,42538944,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *CiScanResultsResponse) Reset() {
	*x = CiScanResultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiScanResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiScanResultsResponse) ProtoMessage() {}

func (x *CiScanResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiScanResultsResponse.ProtoReflect.Descriptor instead.
func (*CiScanResultsResponse) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{61}
}

func (x *CiScanResultsResponse) GetErrors() []*CiScanResultsResponseError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *CiScanResultsResponse) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

type CiScanResultsResponseError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,337998899,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CiScanResultsResponseError) Reset() {
	*x = CiScanResultsResponseError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiScanResultsResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiScanResultsResponseError) ProtoMessage() {}

func (x *CiScanResultsResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiScanResultsResponseError.ProtoReflect.Descriptor instead.
func (*CiScanResultsResponseError) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{62}
}

func (x *CiScanResultsResponseError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CiScanComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitCode               int64                    `protobuf:"varint,288120243,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	Stats                  *CiScanCompleteStats     `protobuf:"bytes,109757599,opt,name=stats,proto3" json:"stats,omitempty"`
	Dependencies           map[string]*anypb.Any    `protobuf:"bytes,469817480,rep,name=dependencies,proto3" json:"dependencies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DependencyParserErrors []*DependencyParserError `protobuf:"bytes,379401816,rep,name=dependency_parser_errors,json=dependencyParserErrors,proto3" json:"dependency_parser_errors,omitempty"`
	TaskId                 string                   `protobuf:"bytes,42538944,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	FinalAttempt           bool                     `protobuf:"varint,303764100,opt,name=final_attempt,json=finalAttempt,proto3" json:"final_attempt,omitempty"`
}

func (x *CiScanComplete) Reset() {
	*x = CiScanComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiScanComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiScanComplete) ProtoMessage() {}

func (x *CiScanComplete) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiScanComplete.ProtoReflect.Descriptor instead.
func (*CiScanComplete) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{63}
}

func (x *CiScanComplete) GetExitCode() int64 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *CiScanComplete) GetStats() *CiScanCompleteStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *CiScanComplete) GetDependencies() map[string]*anypb.Any {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *CiScanComplete) GetDependencyParserErrors() []*DependencyParserError {
	if x != nil {
		return x.DependencyParserErrors
	}
	return nil
}

func (x *CiScanComplete) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *CiScanComplete) GetFinalAttempt() bool {
	if x != nil {
		return x.FinalAttempt
	}
	return false
}

type CiScanCompleteStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Findings          int64                    `protobuf:"varint,343207531,opt,name=findings,proto3" json:"findings,omitempty"`
	Errors            []*CliError              `protobuf:"bytes,179828283,rep,name=errors,proto3" json:"errors,omitempty"`
	TotalTime         float32                  `protobuf:"fixed32,508947525,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	UnsupportedExts   map[string]int64         `protobuf:"bytes,533004295,rep,name=unsupported_exts,json=unsupportedExts,proto3" json:"unsupported_exts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	LockfileScanInfo  map[string]int64         `protobuf:"bytes,229438996,rep,name=lockfile_scan_info,json=lockfileScanInfo,proto3" json:"lockfile_scan_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ParseRate         map[string]*ParsingStats `protobuf:"bytes,50643605,rep,name=parse_rate,json=parseRate,proto3" json:"parse_rate,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EngineRequested   string                   `protobuf:"bytes,513422373,opt,name=engine_requested,json=engineRequested,proto3" json:"engine_requested,omitempty"`
	FindingsByProduct map[string]int64         `protobuf:"bytes,499456012,rep,name=findings_by_product,json=findingsByProduct,proto3" json:"findings_by_product,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	SupplyChainStats  *SupplyChainStats        `protobuf:"bytes,329027804,opt,name=supply_chain_stats,json=supplyChainStats,proto3" json:"supply_chain_stats,omitempty"`
}

func (x *CiScanCompleteStats) Reset() {
	*x = CiScanCompleteStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiScanCompleteStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiScanCompleteStats) ProtoMessage() {}

func (x *CiScanCompleteStats) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiScanCompleteStats.ProtoReflect.Descriptor instead.
func (*CiScanCompleteStats) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{64}
}

func (x *CiScanCompleteStats) GetFindings() int64 {
	if x != nil {
		return x.Findings
	}
	return 0
}

func (x *CiScanCompleteStats) GetErrors() []*CliError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *CiScanCompleteStats) GetTotalTime() float32 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *CiScanCompleteStats) GetUnsupportedExts() map[string]int64 {
	if x != nil {
		return x.UnsupportedExts
	}
	return nil
}

func (x *CiScanCompleteStats) GetLockfileScanInfo() map[string]int64 {
	if x != nil {
		return x.LockfileScanInfo
	}
	return nil
}

func (x *CiScanCompleteStats) GetParseRate() map[string]*ParsingStats {
	if x != nil {
		return x.ParseRate
	}
	return nil
}

func (x *CiScanCompleteStats) GetEngineRequested() string {
	if x != nil {
		return x.EngineRequested
	}
	return ""
}

func (x *CiScanCompleteStats) GetFindingsByProduct() map[string]int64 {
	if x != nil {
		return x.FindingsByProduct
	}
	return nil
}

func (x *CiScanCompleteStats) GetSupplyChainStats() *SupplyChainStats {
	if x != nil {
		return x.SupplyChainStats
	}
	return nil
}

type ParsingStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetsParsed int64 `protobuf:"varint,16414165,opt,name=targets_parsed,json=targetsParsed,proto3" json:"targets_parsed,omitempty"`
	NumTargets    int64 `protobuf:"varint,67699658,opt,name=num_targets,json=numTargets,proto3" json:"num_targets,omitempty"`
	BytesParsed   int64 `protobuf:"varint,275003857,opt,name=bytes_parsed,json=bytesParsed,proto3" json:"bytes_parsed,omitempty"`
	NumBytes      int64 `protobuf:"varint,49709845,opt,name=num_bytes,json=numBytes,proto3" json:"num_bytes,omitempty"`
}

func (x *ParsingStats) Reset() {
	*x = ParsingStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParsingStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsingStats) ProtoMessage() {}

func (x *ParsingStats) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsingStats.ProtoReflect.Descriptor instead.
func (*ParsingStats) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{65}
}

func (x *ParsingStats) GetTargetsParsed() int64 {
	if x != nil {
		return x.TargetsParsed
	}
	return 0
}

func (x *ParsingStats) GetNumTargets() int64 {
	if x != nil {
		return x.NumTargets
	}
	return 0
}

func (x *ParsingStats) GetBytesParsed() int64 {
	if x != nil {
		return x.BytesParsed
	}
	return 0
}

func (x *ParsingStats) GetNumBytes() int64 {
	if x != nil {
		return x.NumBytes
	}
	return 0
}

type CiScanCompleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success                  bool     `protobuf:"varint,224900935,opt,name=success,proto3" json:"success,omitempty"`
	AppBlockOverride         bool     `protobuf:"varint,45266970,opt,name=app_block_override,json=appBlockOverride,proto3" json:"app_block_override,omitempty"`
	AppBlockReason           string   `protobuf:"bytes,276965897,opt,name=app_block_reason,json=appBlockReason,proto3" json:"app_block_reason,omitempty"`
	AppBlockingMatchBasedIds []string `protobuf:"bytes,482968425,rep,name=app_blocking_match_based_ids,json=appBlockingMatchBasedIds,proto3" json:"app_blocking_match_based_ids,omitempty"`
}

func (x *CiScanCompleteResponse) Reset() {
	*x = CiScanCompleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiScanCompleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiScanCompleteResponse) ProtoMessage() {}

func (x *CiScanCompleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiScanCompleteResponse.ProtoReflect.Descriptor instead.
func (*CiScanCompleteResponse) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{66}
}

func (x *CiScanCompleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CiScanCompleteResponse) GetAppBlockOverride() bool {
	if x != nil {
		return x.AppBlockOverride
	}
	return false
}

func (x *CiScanCompleteResponse) GetAppBlockReason() string {
	if x != nil {
		return x.AppBlockReason
	}
	return ""
}

func (x *CiScanCompleteResponse) GetAppBlockingMatchBasedIds() []string {
	if x != nil {
		return x.AppBlockingMatchBasedIds
	}
	return nil
}

type DependencyParserError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   string     `protobuf:"bytes,3212859,opt,name=path,proto3" json:"path,omitempty"`
	Parser *anypb.Any `protobuf:"bytes,139312007,opt,name=parser,proto3" json:"parser,omitempty"`
	Reason string     `protobuf:"bytes,34014402,opt,name=reason,proto3" json:"reason,omitempty"`
	Line   int64      `protobuf:"varint,3117964,opt,name=line,proto3" json:"line,omitempty"`
	Col    int64      `protobuf:"varint,107328,opt,name=col,proto3" json:"col,omitempty"`
	Text   string     `protobuf:"bytes,3574323,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *DependencyParserError) Reset() {
	*x = DependencyParserError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyParserError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyParserError) ProtoMessage() {}

func (x *DependencyParserError) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyParserError.ProtoReflect.Descriptor instead.
func (*DependencyParserError) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{67}
}

func (x *DependencyParserError) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DependencyParserError) GetParser() *anypb.Any {
	if x != nil {
		return x.Parser
	}
	return nil
}

func (x *DependencyParserError) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *DependencyParserError) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *DependencyParserError) GetCol() int64 {
	if x != nil {
		return x.Col
	}
	return 0
}

func (x *DependencyParserError) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type SupplyChainStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubprojectsStats []*SubprojectStats `protobuf:"bytes,28460775,rep,name=subprojects_stats,json=subprojectsStats,proto3" json:"subprojects_stats,omitempty"`
}

func (x *SupplyChainStats) Reset() {
	*x = SupplyChainStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyChainStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyChainStats) ProtoMessage() {}

func (x *SupplyChainStats) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyChainStats.ProtoReflect.Descriptor instead.
func (*SupplyChainStats) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{68}
}

func (x *SupplyChainStats) GetSubprojectsStats() []*SubprojectStats {
	if x != nil {
		return x.SubprojectsStats
	}
	return nil
}

type CliOutputSubprojectInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DependencySources []string                   `protobuf:"bytes,4836694,rep,name=dependency_sources,json=dependencySources,proto3" json:"dependency_sources,omitempty"`
	Resolved          bool                       `protobuf:"varint,38597050,opt,name=resolved,proto3" json:"resolved,omitempty"`
	UnresolvedReason  *anypb.Any                 `protobuf:"bytes,145801784,opt,name=unresolved_reason,json=unresolvedReason,proto3" json:"unresolved_reason,omitempty"`
	ResolvedStats     *DependencyResolutionStats `protobuf:"bytes,364874699,opt,name=resolved_stats,json=resolvedStats,proto3" json:"resolved_stats,omitempty"`
}

func (x *CliOutputSubprojectInfo) Reset() {
	*x = CliOutputSubprojectInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliOutputSubprojectInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliOutputSubprojectInfo) ProtoMessage() {}

func (x *CliOutputSubprojectInfo) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliOutputSubprojectInfo.ProtoReflect.Descriptor instead.
func (*CliOutputSubprojectInfo) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{69}
}

func (x *CliOutputSubprojectInfo) GetDependencySources() []string {
	if x != nil {
		return x.DependencySources
	}
	return nil
}

func (x *CliOutputSubprojectInfo) GetResolved() bool {
	if x != nil {
		return x.Resolved
	}
	return false
}

func (x *CliOutputSubprojectInfo) GetUnresolvedReason() *anypb.Any {
	if x != nil {
		return x.UnresolvedReason
	}
	return nil
}

func (x *CliOutputSubprojectInfo) GetResolvedStats() *DependencyResolutionStats {
	if x != nil {
		return x.ResolvedStats
	}
	return nil
}

type SubprojectStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubprojectId      string                     `protobuf:"bytes,481879717,opt,name=subproject_id,json=subprojectId,proto3" json:"subproject_id,omitempty"`
	DependencySources []*DependencySourceFile    `protobuf:"bytes,4836694,rep,name=dependency_sources,json=dependencySources,proto3" json:"dependency_sources,omitempty"`
	ResolvedStats     *DependencyResolutionStats `protobuf:"bytes,364874699,opt,name=resolved_stats,json=resolvedStats,proto3" json:"resolved_stats,omitempty"`
	UnresolvedReason  *anypb.Any                 `protobuf:"bytes,145801784,opt,name=unresolved_reason,json=unresolvedReason,proto3" json:"unresolved_reason,omitempty"`
	Errors            []*anypb.Any               `protobuf:"bytes,179828283,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *SubprojectStats) Reset() {
	*x = SubprojectStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubprojectStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubprojectStats) ProtoMessage() {}

func (x *SubprojectStats) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubprojectStats.ProtoReflect.Descriptor instead.
func (*SubprojectStats) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{70}
}

func (x *SubprojectStats) GetSubprojectId() string {
	if x != nil {
		return x.SubprojectId
	}
	return ""
}

func (x *SubprojectStats) GetDependencySources() []*DependencySourceFile {
	if x != nil {
		return x.DependencySources
	}
	return nil
}

func (x *SubprojectStats) GetResolvedStats() *DependencyResolutionStats {
	if x != nil {
		return x.ResolvedStats
	}
	return nil
}

func (x *SubprojectStats) GetUnresolvedReason() *anypb.Any {
	if x != nil {
		return x.UnresolvedReason
	}
	return nil
}

func (x *SubprojectStats) GetErrors() []*anypb.Any {
	if x != nil {
		return x.Errors
	}
	return nil
}

type DependencySourceFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *anypb.Any `protobuf:"bytes,3088172,opt,name=kind,proto3" json:"kind,omitempty"`
	Path string     `protobuf:"bytes,3212859,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *DependencySourceFile) Reset() {
	*x = DependencySourceFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencySourceFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencySourceFile) ProtoMessage() {}

func (x *DependencySourceFile) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencySourceFile.ProtoReflect.Descriptor instead.
func (*DependencySourceFile) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{71}
}

func (x *DependencySourceFile) GetKind() *anypb.Any {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *DependencySourceFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type DependencyResolutionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResolutionMethod *anypb.Any `protobuf:"bytes,495111318,opt,name=resolution_method,json=resolutionMethod,proto3" json:"resolution_method,omitempty"`
	DependencyCount  int64      `protobuf:"varint,507475109,opt,name=dependency_count,json=dependencyCount,proto3" json:"dependency_count,omitempty"`
	Ecosystem        *anypb.Any `protobuf:"bytes,7072103,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
}

func (x *DependencyResolutionStats) Reset() {
	*x = DependencyResolutionStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DependencyResolutionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyResolutionStats) ProtoMessage() {}

func (x *DependencyResolutionStats) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyResolutionStats.ProtoReflect.Descriptor instead.
func (*DependencyResolutionStats) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{72}
}

func (x *DependencyResolutionStats) GetResolutionMethod() *anypb.Any {
	if x != nil {
		return x.ResolutionMethod
	}
	return nil
}

func (x *DependencyResolutionStats) GetDependencyCount() int64 {
	if x != nil {
		return x.DependencyCount
	}
	return 0
}

func (x *DependencyResolutionStats) GetEcosystem() *anypb.Any {
	if x != nil {
		return x.Ecosystem
	}
	return nil
}

type CiScanFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitCode int64  `protobuf:"varint,288120243,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	Stderr   string `protobuf:"bytes,150887844,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *CiScanFailure) Reset() {
	*x = CiScanFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiScanFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiScanFailure) ProtoMessage() {}

func (x *CiScanFailure) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiScanFailure.ProtoReflect.Descriptor instead.
func (*CiScanFailure) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{73}
}

func (x *CiScanFailure) GetExitCode() int64 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *CiScanFailure) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

type DeploymentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64  `protobuf:"varint,3205,opt,name=id,proto3" json:"id,omitempty"`
	Name                string `protobuf:"bytes,3116757,opt,name=name,proto3" json:"name,omitempty"`
	OrganizationId      int64  `protobuf:"varint,406301483,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	DisplayName         string `protobuf:"bytes,333474672,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ScmName             string `protobuf:"bytes,228525604,opt,name=scm_name,json=scmName,proto3" json:"scm_name,omitempty"`
	Slug                string `protobuf:"bytes,3184373,opt,name=slug,proto3" json:"slug,omitempty"`
	SourceType          string `protobuf:"bytes,28767383,opt,name=source_type,json=sourceType,proto3" json:"source_type,omitempty"`
	DefaultUserRole     string `protobuf:"bytes,341961986,opt,name=default_user_role,json=defaultUserRole,proto3" json:"default_user_role,omitempty"`
	HasAutofix          bool   `protobuf:"varint,200569152,opt,name=has_autofix,json=hasAutofix,proto3" json:"has_autofix,omitempty"`
	HasDeepsemgrep      bool   `protobuf:"varint,529169105,opt,name=has_deepsemgrep,json=hasDeepsemgrep,proto3" json:"has_deepsemgrep,omitempty"`
	HasTriageViaComment bool   `protobuf:"varint,438443412,opt,name=has_triage_via_comment,json=hasTriageViaComment,proto3" json:"has_triage_via_comment,omitempty"`
	HasDependencyQuery  bool   `protobuf:"varint,481855234,opt,name=has_dependency_query,json=hasDependencyQuery,proto3" json:"has_dependency_query,omitempty"`
}

func (x *DeploymentConfig) Reset() {
	*x = DeploymentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentConfig) ProtoMessage() {}

func (x *DeploymentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentConfig.ProtoReflect.Descriptor instead.
func (*DeploymentConfig) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{74}
}

func (x *DeploymentConfig) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeploymentConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeploymentConfig) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *DeploymentConfig) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *DeploymentConfig) GetScmName() string {
	if x != nil {
		return x.ScmName
	}
	return ""
}

func (x *DeploymentConfig) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *DeploymentConfig) GetSourceType() string {
	if x != nil {
		return x.SourceType
	}
	return ""
}

func (x *DeploymentConfig) GetDefaultUserRole() string {
	if x != nil {
		return x.DefaultUserRole
	}
	return ""
}

func (x *DeploymentConfig) GetHasAutofix() bool {
	if x != nil {
		return x.HasAutofix
	}
	return false
}

func (x *DeploymentConfig) GetHasDeepsemgrep() bool {
	if x != nil {
		return x.HasDeepsemgrep
	}
	return false
}

func (x *DeploymentConfig) GetHasTriageViaComment() bool {
	if x != nil {
		return x.HasTriageViaComment
	}
	return false
}

func (x *DeploymentConfig) GetHasDependencyQuery() bool {
	if x != nil {
		return x.HasDependencyQuery
	}
	return false
}

type HasFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasAutofix          bool `protobuf:"varint,200569152,opt,name=has_autofix,json=hasAutofix,proto3" json:"has_autofix,omitempty"`
	HasDeepsemgrep      bool `protobuf:"varint,529169105,opt,name=has_deepsemgrep,json=hasDeepsemgrep,proto3" json:"has_deepsemgrep,omitempty"`
	HasTriageViaComment bool `protobuf:"varint,438443412,opt,name=has_triage_via_comment,json=hasTriageViaComment,proto3" json:"has_triage_via_comment,omitempty"`
	HasDependencyQuery  bool `protobuf:"varint,481855234,opt,name=has_dependency_query,json=hasDependencyQuery,proto3" json:"has_dependency_query,omitempty"`
}

func (x *HasFeatures) Reset() {
	*x = HasFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HasFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasFeatures) ProtoMessage() {}

func (x *HasFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasFeatures.ProtoReflect.Descriptor instead.
func (*HasFeatures) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{75}
}

func (x *HasFeatures) GetHasAutofix() bool {
	if x != nil {
		return x.HasAutofix
	}
	return false
}

func (x *HasFeatures) GetHasDeepsemgrep() bool {
	if x != nil {
		return x.HasDeepsemgrep
	}
	return false
}

func (x *HasFeatures) GetHasTriageViaComment() bool {
	if x != nil {
		return x.HasTriageViaComment
	}
	return false
}

func (x *HasFeatures) GetHasDependencyQuery() bool {
	if x != nil {
		return x.HasDependencyQuery
	}
	return false
}

type DeploymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deployment *DeploymentConfig `protobuf:"bytes,498084672,opt,name=deployment,proto3" json:"deployment,omitempty"`
}

func (x *DeploymentResponse) Reset() {
	*x = DeploymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentResponse) ProtoMessage() {}

func (x *DeploymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentResponse.ProtoReflect.Descriptor instead.
func (*DeploymentResponse) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{76}
}

func (x *DeploymentResponse) GetDeployment() *DeploymentConfig {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type ScanConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentId                  int64              `protobuf:"varint,188822146,opt,name=deployment_id,json=deploymentId,proto3" json:"deployment_id,omitempty"`
	DeploymentName                string             `protobuf:"bytes,129624728,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	PolicyNames                   []string           `protobuf:"bytes,175625923,rep,name=policy_names,json=policyNames,proto3" json:"policy_names,omitempty"`
	RuleConfig                    string             `protobuf:"bytes,403140712,opt,name=rule_config,json=ruleConfig,proto3" json:"rule_config,omitempty"`
	Autofix                       bool               `protobuf:"varint,82457874,opt,name=autofix,proto3" json:"autofix,omitempty"`
	Deepsemgrep                   bool               `protobuf:"varint,444846865,opt,name=deepsemgrep,proto3" json:"deepsemgrep,omitempty"`
	DependencyQuery               bool               `protobuf:"varint,471197362,opt,name=dependency_query,json=dependencyQuery,proto3" json:"dependency_query,omitempty"`
	PathToTransitivity            bool               `protobuf:"varint,52910370,opt,name=path_to_transitivity,json=pathToTransitivity,proto3" json:"path_to_transitivity,omitempty"`
	ScanAllDepsInDiffScan         bool               `protobuf:"varint,261708029,opt,name=scan_all_deps_in_diff_scan,json=scanAllDepsInDiffScan,proto3" json:"scan_all_deps_in_diff_scan,omitempty"`
	SymbolAnalysis                bool               `protobuf:"varint,299212646,opt,name=symbol_analysis,json=symbolAnalysis,proto3" json:"symbol_analysis,omitempty"`
	TransitiveReachabilityEnabled bool               `protobuf:"varint,114598304,opt,name=transitive_reachability_enabled,json=transitiveReachabilityEnabled,proto3" json:"transitive_reachability_enabled,omitempty"`
	TriageIgnoredSyntacticIds     []string           `protobuf:"bytes,211590151,rep,name=triage_ignored_syntactic_ids,json=triageIgnoredSyntacticIds,proto3" json:"triage_ignored_syntactic_ids,omitempty"`
	TriageIgnoredMatchBasedIds    []string           `protobuf:"bytes,327942260,rep,name=triage_ignored_match_based_ids,json=triageIgnoredMatchBasedIds,proto3" json:"triage_ignored_match_based_ids,omitempty"`
	IgnoredFiles                  []string           `protobuf:"bytes,482076310,rep,name=ignored_files,json=ignoredFiles,proto3" json:"ignored_files,omitempty"`
	EnabledProducts               []*anypb.Any       `protobuf:"bytes,447415338,rep,name=enabled_products,json=enabledProducts,proto3" json:"enabled_products,omitempty"`
	Actions                       []*anypb.Any       `protobuf:"bytes,91184897,rep,name=actions,proto3" json:"actions,omitempty"`
	CiConfigFromCloud             *CiConfigFromCloud `protobuf:"bytes,120268883,opt,name=ci_config_from_cloud,json=ciConfigFromCloud,proto3" json:"ci_config_from_cloud,omitempty"`
}

func (x *ScanConfig) Reset() {
	*x = ScanConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanConfig) ProtoMessage() {}

func (x *ScanConfig) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanConfig.ProtoReflect.Descriptor instead.
func (*ScanConfig) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{77}
}

func (x *ScanConfig) GetDeploymentId() int64 {
	if x != nil {
		return x.DeploymentId
	}
	return 0
}

func (x *ScanConfig) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *ScanConfig) GetPolicyNames() []string {
	if x != nil {
		return x.PolicyNames
	}
	return nil
}

func (x *ScanConfig) GetRuleConfig() string {
	if x != nil {
		return x.RuleConfig
	}
	return ""
}

func (x *ScanConfig) GetAutofix() bool {
	if x != nil {
		return x.Autofix
	}
	return false
}

func (x *ScanConfig) GetDeepsemgrep() bool {
	if x != nil {
		return x.Deepsemgrep
	}
	return false
}

func (x *ScanConfig) GetDependencyQuery() bool {
	if x != nil {
		return x.DependencyQuery
	}
	return false
}

func (x *ScanConfig) GetPathToTransitivity() bool {
	if x != nil {
		return x.PathToTransitivity
	}
	return false
}

func (x *ScanConfig) GetScanAllDepsInDiffScan() bool {
	if x != nil {
		return x.ScanAllDepsInDiffScan
	}
	return false
}

func (x *ScanConfig) GetSymbolAnalysis() bool {
	if x != nil {
		return x.SymbolAnalysis
	}
	return false
}

func (x *ScanConfig) GetTransitiveReachabilityEnabled() bool {
	if x != nil {
		return x.TransitiveReachabilityEnabled
	}
	return false
}

func (x *ScanConfig) GetTriageIgnoredSyntacticIds() []string {
	if x != nil {
		return x.TriageIgnoredSyntacticIds
	}
	return nil
}

func (x *ScanConfig) GetTriageIgnoredMatchBasedIds() []string {
	if x != nil {
		return x.TriageIgnoredMatchBasedIds
	}
	return nil
}

func (x *ScanConfig) GetIgnoredFiles() []string {
	if x != nil {
		return x.IgnoredFiles
	}
	return nil
}

func (x *ScanConfig) GetEnabledProducts() []*anypb.Any {
	if x != nil {
		return x.EnabledProducts
	}
	return nil
}

func (x *ScanConfig) GetActions() []*anypb.Any {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ScanConfig) GetCiConfigFromCloud() *CiConfigFromCloud {
	if x != nil {
		return x.CiConfigFromCloud
	}
	return nil
}

type TrCacheKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuleId        string `protobuf:"bytes,42354089,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	RuleVersion   string `protobuf:"bytes,452304705,opt,name=rule_version,json=ruleVersion,proto3" json:"rule_version,omitempty"`
	EngineVersion int64  `protobuf:"varint,337736996,opt,name=engine_version,json=engineVersion,proto3" json:"engine_version,omitempty"`
	PackageUrl    string `protobuf:"bytes,122959490,opt,name=package_url,json=packageUrl,proto3" json:"package_url,omitempty"`
	Extra         string `protobuf:"bytes,93093008,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *TrCacheKey) Reset() {
	*x = TrCacheKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrCacheKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrCacheKey) ProtoMessage() {}

func (x *TrCacheKey) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrCacheKey.ProtoReflect.Descriptor instead.
func (*TrCacheKey) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{78}
}

func (x *TrCacheKey) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

func (x *TrCacheKey) GetRuleVersion() string {
	if x != nil {
		return x.RuleVersion
	}
	return ""
}

func (x *TrCacheKey) GetEngineVersion() int64 {
	if x != nil {
		return x.EngineVersion
	}
	return 0
}

func (x *TrCacheKey) GetPackageUrl() string {
	if x != nil {
		return x.PackageUrl
	}
	return ""
}

func (x *TrCacheKey) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type TrCacheMatchResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matches []*CliMatch `protobuf:"bytes,363750006,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *TrCacheMatchResult) Reset() {
	*x = TrCacheMatchResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrCacheMatchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrCacheMatchResult) ProtoMessage() {}

func (x *TrCacheMatchResult) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrCacheMatchResult.ProtoReflect.Descriptor instead.
func (*TrCacheMatchResult) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{79}
}

func (x *TrCacheMatchResult) GetMatches() []*CliMatch {
	if x != nil {
		return x.Matches
	}
	return nil
}

type TrQueryCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*TrCacheKey `protobuf:"bytes,365120787,rep,name=entries,proto3" json:"entries,omitempty"`
}

func (x *TrQueryCacheRequest) Reset() {
	*x = TrQueryCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrQueryCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrQueryCacheRequest) ProtoMessage() {}

func (x *TrQueryCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrQueryCacheRequest.ProtoReflect.Descriptor instead.
func (*TrQueryCacheRequest) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{80}
}

func (x *TrQueryCacheRequest) GetEntries() []*TrCacheKey {
	if x != nil {
		return x.Entries
	}
	return nil
}

type TrQueryCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cached []*anypb.Any `protobuf:"bytes,275032675,rep,name=cached,proto3" json:"cached,omitempty"`
}

func (x *TrQueryCacheResponse) Reset() {
	*x = TrQueryCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrQueryCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrQueryCacheResponse) ProtoMessage() {}

func (x *TrQueryCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrQueryCacheResponse.ProtoReflect.Descriptor instead.
func (*TrQueryCacheResponse) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{81}
}

func (x *TrQueryCacheResponse) GetCached() []*anypb.Any {
	if x != nil {
		return x.Cached
	}
	return nil
}

type TrAddCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewEntries []*anypb.Any `protobuf:"bytes,446110625,rep,name=new_entries,json=newEntries,proto3" json:"new_entries,omitempty"`
}

func (x *TrAddCacheRequest) Reset() {
	*x = TrAddCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrAddCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrAddCacheRequest) ProtoMessage() {}

func (x *TrAddCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrAddCacheRequest.ProtoReflect.Descriptor instead.
func (*TrAddCacheRequest) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{82}
}

func (x *TrAddCacheRequest) GetNewEntries() []*anypb.Any {
	if x != nil {
		return x.NewEntries
	}
	return nil
}

type CiConfigFromCloud struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepoConfig *CiConfig    `protobuf:"bytes,403441970,opt,name=repo_config,json=repoConfig,proto3" json:"repo_config,omitempty"`
	OrgConfig  *CiConfig    `protobuf:"bytes,463285466,opt,name=org_config,json=orgConfig,proto3" json:"org_config,omitempty"`
	DirsConfig []*anypb.Any `protobuf:"bytes,403563166,rep,name=dirs_config,json=dirsConfig,proto3" json:"dirs_config,omitempty"`
	Actions    []*anypb.Any `protobuf:"bytes,91184897,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *CiConfigFromCloud) Reset() {
	*x = CiConfigFromCloud{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiConfigFromCloud) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiConfigFromCloud) ProtoMessage() {}

func (x *CiConfigFromCloud) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiConfigFromCloud.ProtoReflect.Descriptor instead.
func (*CiConfigFromCloud) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{83}
}

func (x *CiConfigFromCloud) GetRepoConfig() *CiConfig {
	if x != nil {
		return x.RepoConfig
	}
	return nil
}

func (x *CiConfigFromCloud) GetOrgConfig() *CiConfig {
	if x != nil {
		return x.OrgConfig
	}
	return nil
}

func (x *CiConfigFromCloud) GetDirsConfig() []*anypb.Any {
	if x != nil {
		return x.DirsConfig
	}
	return nil
}

func (x *CiConfigFromCloud) GetActions() []*anypb.Any {
	if x != nil {
		return x.Actions
	}
	return nil
}

type CiConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Env                           map[string]string `protobuf:"bytes,116909,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnabledProducts               []*anypb.Any      `protobuf:"bytes,447415338,rep,name=enabled_products,json=enabledProducts,proto3" json:"enabled_products,omitempty"`
	IgnoredFiles                  []string          `protobuf:"bytes,482076310,rep,name=ignored_files,json=ignoredFiles,proto3" json:"ignored_files,omitempty"`
	Autofix                       bool              `protobuf:"varint,82457874,opt,name=autofix,proto3" json:"autofix,omitempty"`
	Deepsemgrep                   bool              `protobuf:"varint,444846865,opt,name=deepsemgrep,proto3" json:"deepsemgrep,omitempty"`
	DependencyQuery               bool              `protobuf:"varint,471197362,opt,name=dependency_query,json=dependencyQuery,proto3" json:"dependency_query,omitempty"`
	PathToTransitivity            bool              `protobuf:"varint,52910370,opt,name=path_to_transitivity,json=pathToTransitivity,proto3" json:"path_to_transitivity,omitempty"`
	ScanAllDepsInDiffScan         bool              `protobuf:"varint,261708029,opt,name=scan_all_deps_in_diff_scan,json=scanAllDepsInDiffScan,proto3" json:"scan_all_deps_in_diff_scan,omitempty"`
	SymbolAnalysis                bool              `protobuf:"varint,299212646,opt,name=symbol_analysis,json=symbolAnalysis,proto3" json:"symbol_analysis,omitempty"`
	TransitiveReachabilityEnabled bool              `protobuf:"varint,114598304,opt,name=transitive_reachability_enabled,json=transitiveReachabilityEnabled,proto3" json:"transitive_reachability_enabled,omitempty"`
}

func (x *CiConfig) Reset() {
	*x = CiConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiConfig) ProtoMessage() {}

func (x *CiConfig) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiConfig.ProtoReflect.Descriptor instead.
func (*CiConfig) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{84}
}

func (x *CiConfig) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

func (x *CiConfig) GetEnabledProducts() []*anypb.Any {
	if x != nil {
		return x.EnabledProducts
	}
	return nil
}

func (x *CiConfig) GetIgnoredFiles() []string {
	if x != nil {
		return x.IgnoredFiles
	}
	return nil
}

func (x *CiConfig) GetAutofix() bool {
	if x != nil {
		return x.Autofix
	}
	return false
}

func (x *CiConfig) GetDeepsemgrep() bool {
	if x != nil {
		return x.Deepsemgrep
	}
	return false
}

func (x *CiConfig) GetDependencyQuery() bool {
	if x != nil {
		return x.DependencyQuery
	}
	return false
}

func (x *CiConfig) GetPathToTransitivity() bool {
	if x != nil {
		return x.PathToTransitivity
	}
	return false
}

func (x *CiConfig) GetScanAllDepsInDiffScan() bool {
	if x != nil {
		return x.ScanAllDepsInDiffScan
	}
	return false
}

func (x *CiConfig) GetSymbolAnalysis() bool {
	if x != nil {
		return x.SymbolAnalysis
	}
	return false
}

func (x *CiConfig) GetTransitiveReachabilityEnabled() bool {
	if x != nil {
		return x.TransitiveReachabilityEnabled
	}
	return false
}

type CoreOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version                string                     `protobuf:"bytes,508888787,opt,name=version,proto3" json:"version,omitempty"`
	Results                []*CoreMatch               `protobuf:"bytes,260545850,rep,name=results,proto3" json:"results,omitempty"`
	Errors                 []*CoreError               `protobuf:"bytes,179828283,rep,name=errors,proto3" json:"errors,omitempty"`
	Paths                  *ScannedAndSkipped         `protobuf:"bytes,109417774,opt,name=paths,proto3" json:"paths,omitempty"`
	Time                   *Profile                   `protobuf:"bytes,3117011,opt,name=time,proto3" json:"time,omitempty"`
	Explanations           []*MatchingExplanation     `protobuf:"bytes,406800568,rep,name=explanations,proto3" json:"explanations,omitempty"`
	RulesByEngine          []*anypb.Any               `protobuf:"bytes,209830003,rep,name=rules_by_engine,json=rulesByEngine,proto3" json:"rules_by_engine,omitempty"`
	EngineRequested        *anypb.Any                 `protobuf:"bytes,513422373,opt,name=engine_requested,json=engineRequested,proto3" json:"engine_requested,omitempty"`
	InterfileLanguagesUsed []string                   `protobuf:"bytes,314311072,rep,name=interfile_languages_used,json=interfileLanguagesUsed,proto3" json:"interfile_languages_used,omitempty"`
	SkippedRules           []*SkippedRule             `protobuf:"bytes,55568936,rep,name=skipped_rules,json=skippedRules,proto3" json:"skipped_rules,omitempty"`
	Subprojects            []*CliOutputSubprojectInfo `protobuf:"bytes,475733982,rep,name=subprojects,proto3" json:"subprojects,omitempty"`
	SymbolAnalysis         []*SymbolUsage             `protobuf:"bytes,299212646,rep,name=symbol_analysis,json=symbolAnalysis,proto3" json:"symbol_analysis,omitempty"`
}

func (x *CoreOutput) Reset() {
	*x = CoreOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreOutput) ProtoMessage() {}

func (x *CoreOutput) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreOutput.ProtoReflect.Descriptor instead.
func (*CoreOutput) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{85}
}

func (x *CoreOutput) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CoreOutput) GetResults() []*CoreMatch {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *CoreOutput) GetErrors() []*CoreError {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *CoreOutput) GetPaths() *ScannedAndSkipped {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *CoreOutput) GetTime() *Profile {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *CoreOutput) GetExplanations() []*MatchingExplanation {
	if x != nil {
		return x.Explanations
	}
	return nil
}

func (x *CoreOutput) GetRulesByEngine() []*anypb.Any {
	if x != nil {
		return x.RulesByEngine
	}
	return nil
}

func (x *CoreOutput) GetEngineRequested() *anypb.Any {
	if x != nil {
		return x.EngineRequested
	}
	return nil
}

func (x *CoreOutput) GetInterfileLanguagesUsed() []string {
	if x != nil {
		return x.InterfileLanguagesUsed
	}
	return nil
}

func (x *CoreOutput) GetSkippedRules() []*SkippedRule {
	if x != nil {
		return x.SkippedRules
	}
	return nil
}

func (x *CoreOutput) GetSubprojects() []*CliOutputSubprojectInfo {
	if x != nil {
		return x.Subprojects
	}
	return nil
}

func (x *CoreOutput) GetSymbolAnalysis() []*SymbolUsage {
	if x != nil {
		return x.SymbolAnalysis
	}
	return nil
}

type CoreOutputExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SymbolAnalysis []*SymbolUsage `protobuf:"bytes,299212646,rep,name=symbol_analysis,json=symbolAnalysis,proto3" json:"symbol_analysis,omitempty"`
}

func (x *CoreOutputExtra) Reset() {
	*x = CoreOutputExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreOutputExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreOutputExtra) ProtoMessage() {}

func (x *CoreOutputExtra) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreOutputExtra.ProtoReflect.Descriptor instead.
func (*CoreOutputExtra) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{86}
}

func (x *CoreOutputExtra) GetSymbolAnalysis() []*SymbolUsage {
	if x != nil {
		return x.SymbolAnalysis
	}
	return nil
}

type CoreMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CheckId string          `protobuf:"bytes,244492357,opt,name=check_id,json=checkId,proto3" json:"check_id,omitempty"`
	Path    string          `protobuf:"bytes,3212859,opt,name=path,proto3" json:"path,omitempty"`
	Start   *Position       `protobuf:"bytes,110621538,opt,name=start,proto3" json:"start,omitempty"`
	End     *Position       `protobuf:"bytes,99611,opt,name=end,proto3" json:"end,omitempty"`
	Extra   *CoreMatchExtra `protobuf:"bytes,93093008,opt,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CoreMatch) Reset() {
	*x = CoreMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreMatch) ProtoMessage() {}

func (x *CoreMatch) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreMatch.ProtoReflect.Descriptor instead.
func (*CoreMatch) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{87}
}

func (x *CoreMatch) GetCheckId() string {
	if x != nil {
		return x.CheckId
	}
	return ""
}

func (x *CoreMatch) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CoreMatch) GetStart() *Position {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *CoreMatch) GetEnd() *Position {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *CoreMatch) GetExtra() *CoreMatchExtra {
	if x != nil {
		return x.Extra
	}
	return nil
}

type CoreMatchExtra struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metavars        map[string]*MetavarValue `protobuf:"bytes,81814710,rep,name=metavars,proto3" json:"metavars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EngineKind      *anypb.Any               `protobuf:"bytes,428564670,opt,name=engine_kind,json=engineKind,proto3" json:"engine_kind,omitempty"`
	IsIgnored       bool                     `protobuf:"varint,531173073,opt,name=is_ignored,json=isIgnored,proto3" json:"is_ignored,omitempty"`
	Message         string                   `protobuf:"bytes,337998899,opt,name=message,proto3" json:"message,omitempty"`
	Metadata        *anypb.Any               `protobuf:"bytes,534382816,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Severity        *anypb.Any               `protobuf:"bytes,191113633,opt,name=severity,proto3" json:"severity,omitempty"`
	Fix             string                   `protobuf:"bytes,118677,opt,name=fix,proto3" json:"fix,omitempty"`
	DataflowTrace   *MatchDataflowTrace      `protobuf:"bytes,359307815,opt,name=dataflow_trace,json=dataflowTrace,proto3" json:"dataflow_trace,omitempty"`
	ScaMatch        *ScaMatch                `protobuf:"bytes,199861263,opt,name=sca_match,json=scaMatch,proto3" json:"sca_match,omitempty"`
	ValidationState *anypb.Any               `protobuf:"bytes,332615966,opt,name=validation_state,json=validationState,proto3" json:"validation_state,omitempty"`
	HistoricalInfo  *HistoricalInfo          `protobuf:"bytes,358982721,opt,name=historical_info,json=historicalInfo,proto3" json:"historical_info,omitempty"`
	ExtraExtra      *anypb.Any               `protobuf:"bytes,60155542,opt,name=extra_extra,json=extraExtra,proto3" json:"extra_extra,omitempty"`
}

func (x *CoreMatchExtra) Reset() {
	*x = CoreMatchExtra{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreMatchExtra) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreMatchExtra) ProtoMessage() {}

func (x *CoreMatchExtra) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreMatchExtra.ProtoReflect.Descriptor instead.
func (*CoreMatchExtra) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{88}
}

func (x *CoreMatchExtra) GetMetavars() map[string]*MetavarValue {
	if x != nil {
		return x.Metavars
	}
	return nil
}

func (x *CoreMatchExtra) GetEngineKind() *anypb.Any {
	if x != nil {
		return x.EngineKind
	}
	return nil
}

func (x *CoreMatchExtra) GetIsIgnored() bool {
	if x != nil {
		return x.IsIgnored
	}
	return false
}

func (x *CoreMatchExtra) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CoreMatchExtra) GetMetadata() *anypb.Any {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CoreMatchExtra) GetSeverity() *anypb.Any {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *CoreMatchExtra) GetFix() string {
	if x != nil {
		return x.Fix
	}
	return ""
}

func (x *CoreMatchExtra) GetDataflowTrace() *MatchDataflowTrace {
	if x != nil {
		return x.DataflowTrace
	}
	return nil
}

func (x *CoreMatchExtra) GetScaMatch() *ScaMatch {
	if x != nil {
		return x.ScaMatch
	}
	return nil
}

func (x *CoreMatchExtra) GetValidationState() *anypb.Any {
	if x != nil {
		return x.ValidationState
	}
	return nil
}

func (x *CoreMatchExtra) GetHistoricalInfo() *HistoricalInfo {
	if x != nil {
		return x.HistoricalInfo
	}
	return nil
}

func (x *CoreMatchExtra) GetExtraExtra() *anypb.Any {
	if x != nil {
		return x.ExtraExtra
	}
	return nil
}

type CoreError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorType *anypb.Any `protobuf:"bytes,428933134,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
	Severity  *anypb.Any `protobuf:"bytes,191113633,opt,name=severity,proto3" json:"severity,omitempty"`
	Message   string     `protobuf:"bytes,337998899,opt,name=message,proto3" json:"message,omitempty"`
	Details   string     `protobuf:"bytes,28147206,opt,name=details,proto3" json:"details,omitempty"`
	Location  *Location  `protobuf:"bytes,206711021,opt,name=location,proto3" json:"location,omitempty"`
	RuleId    string     `protobuf:"bytes,42354089,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
}

func (x *CoreError) Reset() {
	*x = CoreError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreError) ProtoMessage() {}

func (x *CoreError) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreError.ProtoReflect.Descriptor instead.
func (*CoreError) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{89}
}

func (x *CoreError) GetErrorType() *anypb.Any {
	if x != nil {
		return x.ErrorType
	}
	return nil
}

func (x *CoreError) GetSeverity() *anypb.Any {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *CoreError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CoreError) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *CoreError) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *CoreError) GetRuleId() string {
	if x != nil {
		return x.RuleId
	}
	return ""
}

type TargetingConf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exclude                     []string   `protobuf:"bytes,270358534,rep,name=exclude,proto3" json:"exclude,omitempty"`
	Include_                    []string   `protobuf:"bytes,481104025,rep,name=include_,json=include,proto3" json:"include_,omitempty"`
	MaxTargetBytes              int64      `protobuf:"varint,12818053,opt,name=max_target_bytes,json=maxTargetBytes,proto3" json:"max_target_bytes,omitempty"`
	RespectGitignore            bool       `protobuf:"varint,205345800,opt,name=respect_gitignore,json=respectGitignore,proto3" json:"respect_gitignore,omitempty"`
	RespectSemgrepignoreFiles   bool       `protobuf:"varint,303139013,opt,name=respect_semgrepignore_files,json=respectSemgrepignoreFiles,proto3" json:"respect_semgrepignore_files,omitempty"`
	SemgrepignoreFilename       string     `protobuf:"bytes,427920979,opt,name=semgrepignore_filename,json=semgrepignoreFilename,proto3" json:"semgrepignore_filename,omitempty"`
	AlwaysSelectExplicitTargets bool       `protobuf:"varint,233062798,opt,name=always_select_explicit_targets,json=alwaysSelectExplicitTargets,proto3" json:"always_select_explicit_targets,omitempty"`
	ExplicitTargets             []string   `protobuf:"bytes,10319231,rep,name=explicit_targets,json=explicitTargets,proto3" json:"explicit_targets,omitempty"`
	ForceProjectRoot            *anypb.Any `protobuf:"bytes,386274895,opt,name=force_project_root,json=forceProjectRoot,proto3" json:"force_project_root,omitempty"`
	ForceNovcsProject           bool       `protobuf:"varint,448272511,opt,name=force_novcs_project,json=forceNovcsProject,proto3" json:"force_novcs_project,omitempty"`
	ExcludeMinifiedFiles        bool       `protobuf:"varint,350140015,opt,name=exclude_minified_files,json=excludeMinifiedFiles,proto3" json:"exclude_minified_files,omitempty"`
	BaselineCommit              string     `protobuf:"bytes,447341693,opt,name=baseline_commit,json=baselineCommit,proto3" json:"baseline_commit,omitempty"`
}

func (x *TargetingConf) Reset() {
	*x = TargetingConf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetingConf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetingConf) ProtoMessage() {}

func (x *TargetingConf) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetingConf.ProtoReflect.Descriptor instead.
func (*TargetingConf) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{90}
}

func (x *TargetingConf) GetExclude() []string {
	if x != nil {
		return x.Exclude
	}
	return nil
}

func (x *TargetingConf) GetInclude_() []string {
	if x != nil {
		return x.Include_
	}
	return nil
}

func (x *TargetingConf) GetMaxTargetBytes() int64 {
	if x != nil {
		return x.MaxTargetBytes
	}
	return 0
}

func (x *TargetingConf) GetRespectGitignore() bool {
	if x != nil {
		return x.RespectGitignore
	}
	return false
}

func (x *TargetingConf) GetRespectSemgrepignoreFiles() bool {
	if x != nil {
		return x.RespectSemgrepignoreFiles
	}
	return false
}

func (x *TargetingConf) GetSemgrepignoreFilename() string {
	if x != nil {
		return x.SemgrepignoreFilename
	}
	return ""
}

func (x *TargetingConf) GetAlwaysSelectExplicitTargets() bool {
	if x != nil {
		return x.AlwaysSelectExplicitTargets
	}
	return false
}

func (x *TargetingConf) GetExplicitTargets() []string {
	if x != nil {
		return x.ExplicitTargets
	}
	return nil
}

func (x *TargetingConf) GetForceProjectRoot() *anypb.Any {
	if x != nil {
		return x.ForceProjectRoot
	}
	return nil
}

func (x *TargetingConf) GetForceNovcsProject() bool {
	if x != nil {
		return x.ForceNovcsProject
	}
	return false
}

func (x *TargetingConf) GetExcludeMinifiedFiles() bool {
	if x != nil {
		return x.ExcludeMinifiedFiles
	}
	return false
}

func (x *TargetingConf) GetBaselineCommit() string {
	if x != nil {
		return x.BaselineCommit
	}
	return ""
}

type CodeTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path             string       `protobuf:"bytes,3212859,opt,name=path,proto3" json:"path,omitempty"`
	Analyzer         string       `protobuf:"bytes,405167385,opt,name=analyzer,proto3" json:"analyzer,omitempty"`
	Products         []*anypb.Any `protobuf:"bytes,302629094,rep,name=products,proto3" json:"products,omitempty"`
	DependencySource *anypb.Any   `protobuf:"bytes,199211442,opt,name=dependency_source,json=dependencySource,proto3" json:"dependency_source,omitempty"`
}

func (x *CodeTarget) Reset() {
	*x = CodeTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeTarget) ProtoMessage() {}

func (x *CodeTarget) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeTarget.ProtoReflect.Descriptor instead.
func (*CodeTarget) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{91}
}

func (x *CodeTarget) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CodeTarget) GetAnalyzer() string {
	if x != nil {
		return x.Analyzer
	}
	return ""
}

func (x *CodeTarget) GetProducts() []*anypb.Any {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *CodeTarget) GetDependencySource() *anypb.Any {
	if x != nil {
		return x.DependencySource
	}
	return nil
}

type ScanningRoots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootPaths     []string       `protobuf:"bytes,452502085,rep,name=root_paths,json=rootPaths,proto3" json:"root_paths,omitempty"`
	TargetingConf *TargetingConf `protobuf:"bytes,159796868,opt,name=targeting_conf,json=targetingConf,proto3" json:"targeting_conf,omitempty"`
}

func (x *ScanningRoots) Reset() {
	*x = ScanningRoots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanningRoots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanningRoots) ProtoMessage() {}

func (x *ScanningRoots) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanningRoots.ProtoReflect.Descriptor instead.
func (*ScanningRoots) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{92}
}

func (x *ScanningRoots) GetRootPaths() []string {
	if x != nil {
		return x.RootPaths
	}
	return nil
}

func (x *ScanningRoots) GetTargetingConf() *TargetingConf {
	if x != nil {
		return x.TargetingConf
	}
	return nil
}

type Edit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path            string `protobuf:"bytes,3212859,opt,name=path,proto3" json:"path,omitempty"`
	StartOffset     int64  `protobuf:"varint,402579410,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	EndOffset       int64  `protobuf:"varint,47889398,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	ReplacementText string `protobuf:"bytes,415031433,opt,name=replacement_text,json=replacementText,proto3" json:"replacement_text,omitempty"`
}

func (x *Edit) Reset() {
	*x = Edit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edit) ProtoMessage() {}

func (x *Edit) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edit.ProtoReflect.Descriptor instead.
func (*Edit) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{93}
}

func (x *Edit) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Edit) GetStartOffset() int64 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *Edit) GetEndOffset() int64 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

func (x *Edit) GetReplacementText() string {
	if x != nil {
		return x.ReplacementText
	}
	return ""
}

type ApplyFixesParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dryrun bool    `protobuf:"varint,39549190,opt,name=dryrun,proto3" json:"dryrun,omitempty"`
	Edits  []*Edit `protobuf:"bytes,109764777,rep,name=edits,proto3" json:"edits,omitempty"`
}

func (x *ApplyFixesParams) Reset() {
	*x = ApplyFixesParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyFixesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyFixesParams) ProtoMessage() {}

func (x *ApplyFixesParams) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyFixesParams.ProtoReflect.Descriptor instead.
func (*ApplyFixesParams) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{94}
}

func (x *ApplyFixesParams) GetDryrun() bool {
	if x != nil {
		return x.Dryrun
	}
	return false
}

func (x *ApplyFixesParams) GetEdits() []*Edit {
	if x != nil {
		return x.Edits
	}
	return nil
}

type ApplyFixesReturn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModifiedFileCount int64        `protobuf:"varint,221435657,opt,name=modified_file_count,json=modifiedFileCount,proto3" json:"modified_file_count,omitempty"`
	FixedLines        []*anypb.Any `protobuf:"bytes,405597072,rep,name=fixed_lines,json=fixedLines,proto3" json:"fixed_lines,omitempty"`
}

func (x *ApplyFixesReturn) Reset() {
	*x = ApplyFixesReturn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyFixesReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyFixesReturn) ProtoMessage() {}

func (x *ApplyFixesReturn) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyFixesReturn.ProtoReflect.Descriptor instead.
func (*ApplyFixesReturn) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{95}
}

func (x *ApplyFixesReturn) GetModifiedFileCount() int64 {
	if x != nil {
		return x.ModifiedFileCount
	}
	return 0
}

func (x *ApplyFixesReturn) GetFixedLines() []*anypb.Any {
	if x != nil {
		return x.FixedLines
	}
	return nil
}

type SarifFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules              string `protobuf:"bytes,109321335,opt,name=rules,proto3" json:"rules,omitempty"`
	IsPro              bool   `protobuf:"varint,65323246,opt,name=is_pro,json=isPro,proto3" json:"is_pro,omitempty"`
	ShowDataflowTraces bool   `protobuf:"varint,310197169,opt,name=show_dataflow_traces,json=showDataflowTraces,proto3" json:"show_dataflow_traces,omitempty"`
}

func (x *SarifFormat) Reset() {
	*x = SarifFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SarifFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SarifFormat) ProtoMessage() {}

func (x *SarifFormat) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SarifFormat.ProtoReflect.Descriptor instead.
func (*SarifFormat) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{96}
}

func (x *SarifFormat) GetRules() string {
	if x != nil {
		return x.Rules
	}
	return ""
}

func (x *SarifFormat) GetIsPro() bool {
	if x != nil {
		return x.IsPro
	}
	return false
}

func (x *SarifFormat) GetShowDataflowTraces() bool {
	if x != nil {
		return x.ShowDataflowTraces
	}
	return false
}

type FormatContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCiInvocation  bool `protobuf:"varint,208091716,opt,name=is_ci_invocation,json=isCiInvocation,proto3" json:"is_ci_invocation,omitempty"`
	IsLoggedIn      bool `protobuf:"varint,214813956,opt,name=is_logged_in,json=isLoggedIn,proto3" json:"is_logged_in,omitempty"`
	IsUsingRegistry bool `protobuf:"varint,133534925,opt,name=is_using_registry,json=isUsingRegistry,proto3" json:"is_using_registry,omitempty"`
}

func (x *FormatContext) Reset() {
	*x = FormatContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatContext) ProtoMessage() {}

func (x *FormatContext) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatContext.ProtoReflect.Descriptor instead.
func (*FormatContext) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{97}
}

func (x *FormatContext) GetIsCiInvocation() bool {
	if x != nil {
		return x.IsCiInvocation
	}
	return false
}

func (x *FormatContext) GetIsLoggedIn() bool {
	if x != nil {
		return x.IsLoggedIn
	}
	return false
}

func (x *FormatContext) GetIsUsingRegistry() bool {
	if x != nil {
		return x.IsUsingRegistry
	}
	return false
}

type DumpRulePartitionsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules       *anypb.Any `protobuf:"bytes,109321335,opt,name=rules,proto3" json:"rules,omitempty"`
	NPartitions int64      `protobuf:"varint,177783558,opt,name=n_partitions,json=nPartitions,proto3" json:"n_partitions,omitempty"`
	OutputDir   string     `protobuf:"bytes,454772709,opt,name=output_dir,json=outputDir,proto3" json:"output_dir,omitempty"`
	Strategy    string     `protobuf:"bytes,351933717,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *DumpRulePartitionsParams) Reset() {
	*x = DumpRulePartitionsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpRulePartitionsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpRulePartitionsParams) ProtoMessage() {}

func (x *DumpRulePartitionsParams) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpRulePartitionsParams.ProtoReflect.Descriptor instead.
func (*DumpRulePartitionsParams) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{98}
}

func (x *DumpRulePartitionsParams) GetRules() *anypb.Any {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *DumpRulePartitionsParams) GetNPartitions() int64 {
	if x != nil {
		return x.NPartitions
	}
	return 0
}

func (x *DumpRulePartitionsParams) GetOutputDir() string {
	if x != nil {
		return x.OutputDir
	}
	return ""
}

func (x *DumpRulePartitionsParams) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

type Manifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *anypb.Any `protobuf:"bytes,3088172,opt,name=kind,proto3" json:"kind,omitempty"`
	Path string     `protobuf:"bytes,3212859,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Manifest) Reset() {
	*x = Manifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Manifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Manifest) ProtoMessage() {}

func (x *Manifest) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Manifest.ProtoReflect.Descriptor instead.
func (*Manifest) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{99}
}

func (x *Manifest) GetKind() *anypb.Any {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Manifest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type Lockfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind *anypb.Any `protobuf:"bytes,3088172,opt,name=kind,proto3" json:"kind,omitempty"`
	Path string     `protobuf:"bytes,3212859,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Lockfile) Reset() {
	*x = Lockfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lockfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lockfile) ProtoMessage() {}

func (x *Lockfile) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lockfile.ProtoReflect.Descriptor instead.
func (*Lockfile) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{100}
}

func (x *Lockfile) GetKind() *anypb.Any {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *Lockfile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ResolutionCmdFailed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,187585974,opt,name=command,proto3" json:"command,omitempty"`
	Message string `protobuf:"bytes,337998899,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResolutionCmdFailed) Reset() {
	*x = ResolutionCmdFailed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolutionCmdFailed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolutionCmdFailed) ProtoMessage() {}

func (x *ResolutionCmdFailed) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolutionCmdFailed.ProtoReflect.Descriptor instead.
func (*ResolutionCmdFailed) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{101}
}

func (x *ResolutionCmdFailed) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ResolutionCmdFailed) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ScaResolutionError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type_                *anypb.Any `protobuf:"bytes,90854885,opt,name=type_,json=type,proto3" json:"type_,omitempty"`
	DependencySourceFile string     `protobuf:"bytes,192503671,opt,name=dependency_source_file,json=dependencySourceFile,proto3" json:"dependency_source_file,omitempty"`
}

func (x *ScaResolutionError) Reset() {
	*x = ScaResolutionError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScaResolutionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScaResolutionError) ProtoMessage() {}

func (x *ScaResolutionError) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScaResolutionError.ProtoReflect.Descriptor instead.
func (*ScaResolutionError) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{102}
}

func (x *ScaResolutionError) GetType_() *anypb.Any {
	if x != nil {
		return x.Type_
	}
	return nil
}

func (x *ScaResolutionError) GetDependencySourceFile() string {
	if x != nil {
		return x.DependencySourceFile
	}
	return ""
}

type Subproject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootDir          string     `protobuf:"bytes,80355605,opt,name=root_dir,json=rootDir,proto3" json:"root_dir,omitempty"`
	Ecosystem        *anypb.Any `protobuf:"bytes,7072103,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	DependencySource *anypb.Any `protobuf:"bytes,199211442,opt,name=dependency_source,json=dependencySource,proto3" json:"dependency_source,omitempty"`
}

func (x *Subproject) Reset() {
	*x = Subproject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subproject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subproject) ProtoMessage() {}

func (x *Subproject) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subproject.ProtoReflect.Descriptor instead.
func (*Subproject) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{103}
}

func (x *Subproject) GetRootDir() string {
	if x != nil {
		return x.RootDir
	}
	return ""
}

func (x *Subproject) GetEcosystem() *anypb.Any {
	if x != nil {
		return x.Ecosystem
	}
	return nil
}

func (x *Subproject) GetDependencySource() *anypb.Any {
	if x != nil {
		return x.DependencySource
	}
	return nil
}

type ResolvedSubproject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info                 *Subproject  `protobuf:"bytes,3408338,opt,name=info,proto3" json:"info,omitempty"`
	ResolutionMethod     *anypb.Any   `protobuf:"bytes,495111318,opt,name=resolution_method,json=resolutionMethod,proto3" json:"resolution_method,omitempty"`
	Ecosystem            *anypb.Any   `protobuf:"bytes,7072103,opt,name=ecosystem,proto3" json:"ecosystem,omitempty"`
	ResolvedDependencies []*anypb.Any `protobuf:"bytes,44204075,rep,name=resolved_dependencies,json=resolvedDependencies,proto3" json:"resolved_dependencies,omitempty"`
	Errors               []*anypb.Any `protobuf:"bytes,179828283,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *ResolvedSubproject) Reset() {
	*x = ResolvedSubproject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolvedSubproject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolvedSubproject) ProtoMessage() {}

func (x *ResolvedSubproject) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolvedSubproject.ProtoReflect.Descriptor instead.
func (*ResolvedSubproject) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{104}
}

func (x *ResolvedSubproject) GetInfo() *Subproject {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ResolvedSubproject) GetResolutionMethod() *anypb.Any {
	if x != nil {
		return x.ResolutionMethod
	}
	return nil
}

func (x *ResolvedSubproject) GetEcosystem() *anypb.Any {
	if x != nil {
		return x.Ecosystem
	}
	return nil
}

func (x *ResolvedSubproject) GetResolvedDependencies() []*anypb.Any {
	if x != nil {
		return x.ResolvedDependencies
	}
	return nil
}

func (x *ResolvedSubproject) GetErrors() []*anypb.Any {
	if x != nil {
		return x.Errors
	}
	return nil
}

type DownloadedDependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcePaths []string `protobuf:"bytes,85512981,rep,name=source_paths,json=sourcePaths,proto3" json:"source_paths,omitempty"`
}

func (x *DownloadedDependency) Reset() {
	*x = DownloadedDependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadedDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadedDependency) ProtoMessage() {}

func (x *DownloadedDependency) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadedDependency.ProtoReflect.Descriptor instead.
func (*DownloadedDependency) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{105}
}

func (x *DownloadedDependency) GetSourcePaths() []string {
	if x != nil {
		return x.SourcePaths
	}
	return nil
}

type UnresolvedSubproject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info   *Subproject  `protobuf:"bytes,3408338,opt,name=info,proto3" json:"info,omitempty"`
	Reason *anypb.Any   `protobuf:"bytes,34014402,opt,name=reason,proto3" json:"reason,omitempty"`
	Errors []*anypb.Any `protobuf:"bytes,179828283,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *UnresolvedSubproject) Reset() {
	*x = UnresolvedSubproject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnresolvedSubproject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnresolvedSubproject) ProtoMessage() {}

func (x *UnresolvedSubproject) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnresolvedSubproject.ProtoReflect.Descriptor instead.
func (*UnresolvedSubproject) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{106}
}

func (x *UnresolvedSubproject) GetInfo() *Subproject {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *UnresolvedSubproject) GetReason() *anypb.Any {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *UnresolvedSubproject) GetErrors() []*anypb.Any {
	if x != nil {
		return x.Errors
	}
	return nil
}

type ResolveDependenciesParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DependencySources            []*anypb.Any `protobuf:"bytes,4836694,rep,name=dependency_sources,json=dependencySources,proto3" json:"dependency_sources,omitempty"`
	DownloadDependencySourceCode bool         `protobuf:"varint,418251529,opt,name=download_dependency_source_code,json=downloadDependencySourceCode,proto3" json:"download_dependency_source_code,omitempty"`
}

func (x *ResolveDependenciesParams) Reset() {
	*x = ResolveDependenciesParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveDependenciesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveDependenciesParams) ProtoMessage() {}

func (x *ResolveDependenciesParams) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveDependenciesParams.ProtoReflect.Descriptor instead.
func (*ResolveDependenciesParams) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{107}
}

func (x *ResolveDependenciesParams) GetDependencySources() []*anypb.Any {
	if x != nil {
		return x.DependencySources
	}
	return nil
}

func (x *ResolveDependenciesParams) GetDownloadDependencySourceCode() bool {
	if x != nil {
		return x.DownloadDependencySourceCode
	}
	return false
}

type TransitiveFinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	M *CoreMatch `protobuf:"bytes,109,opt,name=m,proto3" json:"m,omitempty"`
}

func (x *TransitiveFinding) Reset() {
	*x = TransitiveFinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransitiveFinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitiveFinding) ProtoMessage() {}

func (x *TransitiveFinding) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitiveFinding.ProtoReflect.Descriptor instead.
func (*TransitiveFinding) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{108}
}

func (x *TransitiveFinding) GetM() *CoreMatch {
	if x != nil {
		return x.M
	}
	return nil
}

type TransitiveReachabilityFilterParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RulesPath    string               `protobuf:"bytes,383105103,opt,name=rules_path,json=rulesPath,proto3" json:"rules_path,omitempty"`
	Findings     []*TransitiveFinding `protobuf:"bytes,343207531,rep,name=findings,proto3" json:"findings,omitempty"`
	Dependencies []*anypb.Any         `protobuf:"bytes,469817480,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	WriteToCache bool                 `protobuf:"varint,500623247,opt,name=write_to_cache,json=writeToCache,proto3" json:"write_to_cache,omitempty"`
}

func (x *TransitiveReachabilityFilterParams) Reset() {
	*x = TransitiveReachabilityFilterParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransitiveReachabilityFilterParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransitiveReachabilityFilterParams) ProtoMessage() {}

func (x *TransitiveReachabilityFilterParams) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransitiveReachabilityFilterParams.ProtoReflect.Descriptor instead.
func (*TransitiveReachabilityFilterParams) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{109}
}

func (x *TransitiveReachabilityFilterParams) GetRulesPath() string {
	if x != nil {
		return x.RulesPath
	}
	return ""
}

func (x *TransitiveReachabilityFilterParams) GetFindings() []*TransitiveFinding {
	if x != nil {
		return x.Findings
	}
	return nil
}

func (x *TransitiveReachabilityFilterParams) GetDependencies() []*anypb.Any {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *TransitiveReachabilityFilterParams) GetWriteToCache() bool {
	if x != nil {
		return x.WriteToCache
	}
	return false
}

type SymbolAnalysisUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadUrl string `protobuf:"bytes,22169862,opt,name=upload_url,json=uploadUrl,proto3" json:"upload_url,omitempty"`
}

func (x *SymbolAnalysisUploadResponse) Reset() {
	*x = SymbolAnalysisUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolAnalysisUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolAnalysisUploadResponse) ProtoMessage() {}

func (x *SymbolAnalysisUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolAnalysisUploadResponse.ProtoReflect.Descriptor instead.
func (*SymbolAnalysisUploadResponse) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{110}
}

func (x *SymbolAnalysisUploadResponse) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

type Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fqn []string `protobuf:"bytes,109315,rep,name=fqn,proto3" json:"fqn,omitempty"`
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{111}
}

func (x *Symbol) GetFqn() []string {
	if x != nil {
		return x.Fqn
	}
	return nil
}

type SymbolUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol *Symbol     `protobuf:"bytes,513132717,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Locs   []*Location `protobuf:"bytes,3524653,rep,name=locs,proto3" json:"locs,omitempty"`
}

func (x *SymbolUsage) Reset() {
	*x = SymbolUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SymbolUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SymbolUsage) ProtoMessage() {}

func (x *SymbolUsage) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SymbolUsage.ProtoReflect.Descriptor instead.
func (*SymbolUsage) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{112}
}

func (x *SymbolUsage) GetSymbol() *Symbol {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *SymbolUsage) GetLocs() []*Location {
	if x != nil {
		return x.Locs
	}
	return nil
}

type DiffFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string   `protobuf:"bytes,228703562,opt,name=filename,proto3" json:"filename,omitempty"`
	Diffs    []string `protobuf:"bytes,109344974,rep,name=diffs,proto3" json:"diffs,omitempty"`
	Url      string   `protobuf:"bytes,107439,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *DiffFile) Reset() {
	*x = DiffFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffFile) ProtoMessage() {}

func (x *DiffFile) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffFile.ProtoReflect.Descriptor instead.
func (*DiffFile) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{113}
}

func (x *DiffFile) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *DiffFile) GetDiffs() []string {
	if x != nil {
		return x.Diffs
	}
	return nil
}

func (x *DiffFile) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type DiffFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CveDiffs []*DiffFile `protobuf:"bytes,185530783,rep,name=cve_diffs,json=cveDiffs,proto3" json:"cve_diffs,omitempty"`
}

func (x *DiffFiles) Reset() {
	*x = DiffFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_semgrep_output_v1_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffFiles) ProtoMessage() {}

func (x *DiffFiles) ProtoReflect() protoreflect.Message {
	mi := &file_semgrep_output_v1_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffFiles.ProtoReflect.Descriptor instead.
func (*DiffFiles) Descriptor() ([]byte, []int) {
	return file_semgrep_output_v1_proto_rawDescGZIP(), []int{114}
}

func (x *DiffFiles) GetCveDiffs() []*DiffFile {
	if x != nil {
		return x.CveDiffs
	}
	return nil
}

var File_semgrep_output_v1_proto protoreflect.FileDescriptor

var file_semgrep_output_v1_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x05, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0xd3, 0x8d, 0xd4, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0xba,
	0xba, 0x9e, 0x7c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x36, 0x0a,
	0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xbb, 0xec, 0xdf, 0x55, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0xae,
	0xaa, 0x96, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x05, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xd3, 0x9f, 0xbe,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb8, 0x91, 0xfd, 0xc1, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x78,
	0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0xf3, 0x80, 0x87, 0x64, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0d, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x42, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0xa5, 0xe8, 0xe8,
	0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0f, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a,
	0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0xa0, 0x83, 0xf0, 0x95, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x73,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0xa8, 0xd4, 0xbf,
	0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0xde, 0xbf, 0xec, 0xe2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73,
	0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x43, 0x6c, 0x69, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x75, 0x62, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x50, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x15, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x8c, 0xa7, 0xbe, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18,
	0xc0, 0xc6, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0xd3, 0x80, 0xdd, 0x5d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0xbb, 0x8c, 0xc4,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0xe2, 0xe6, 0xdf, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x2f, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x9b, 0x8a, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x63, 0x5f, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x18, 0xa2, 0x80, 0xc2, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x63, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x18, 0xc8, 0xaf, 0xb5, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x14, 0x70,
	0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x88, 0x9e, 0xae, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x1c, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0xc5, 0xd0, 0xca, 0x74,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0xbb, 0x8c, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0xe2, 0xe6,
	0xdf, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x9b, 0x8a, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67,
	0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x18, 0x90, 0xf9, 0xb1, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x69, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xf6, 0x06, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x4d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x76, 0x61, 0x72, 0x73, 0x18, 0xb6, 0xc9, 0x81, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x69, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x74, 0x72, 0x61, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x76, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x76, 0x61, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0xb3, 0xe8, 0x95, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x66, 0x69, 0x78, 0x18, 0x95, 0x9f, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x69, 0x78, 0x12, 0x23, 0x0a, 0x0b, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x90, 0xd7, 0xb3, 0xc1, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xe0, 0x91, 0xe8, 0xfe, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0xa1, 0xd3, 0x90, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0b, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0xff, 0x9c, 0xb3, 0xcb, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0xff, 0xc4, 0x90, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x18, 0xd1, 0x9d, 0xa4, 0xfd, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x08, 0x73,
	0x63, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x8b, 0x8f, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x73, 0x63,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9e, 0xa2, 0xcd, 0x9e, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc1, 0xc8,
	0x96, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50, 0x0a, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0xa7, 0xb4, 0xaa,
	0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x0d, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0b,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0xbe, 0xc1, 0xad, 0xcc,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x96, 0xcd, 0xd7, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x72, 0x61, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x1a, 0x5c, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x76, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x76, 0x61, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xf2, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x76, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0xe2, 0xe6, 0xdf, 0x34, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x9b, 0x8a,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x61, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0xef, 0xe9, 0xef, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xb4, 0xf9, 0xde, 0x80, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x0b, 0x53, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x73, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0xb5, 0xfe, 0x96, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x99, 0x80, 0xa5, 0x95, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x17, 0x73, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0xa8, 0xd9, 0xee, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0xb6, 0x02, 0x0a, 0x13, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x02,
	0x6f, 0x70, 0x18, 0xff, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x02, 0x6f, 0x70, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x93, 0xa7, 0xcc, 0x4e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0xf6, 0xc4, 0xb9, 0xad, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x03, 0x6c, 0x6f, 0x63, 0x18, 0x80, 0x83,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x6c, 0x6f, 0x63, 0x12, 0x44, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x18, 0x90, 0xf9, 0xb1, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65, 0x6d, 0x67,
	0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0xb9, 0x01,
	0x0a, 0x18, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x4f, 0x0a, 0x17, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0xaa, 0xc3, 0x8f, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x15, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x4e, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x15, 0x62,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x18, 0xaf, 0xc3, 0xe8, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x13, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x12, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x3a, 0x0a, 0x0c, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0xa6, 0xc6, 0xa1, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x0b, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x11,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x72,
	0x73, 0x18, 0xa3, 0xfd, 0x99, 0x93, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65,
	0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74,
	0x65, 0x56, 0x61, 0x72, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x65, 0x56, 0x61, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x6e, 0x6b, 0x18, 0x8e, 0x92, 0x9f, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x6e, 0x6b, 0x22,
	0x70, 0x0a, 0x14, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x12, 0x3a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xed, 0xd1, 0xc8, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0xbe,
	0xb4, 0xb6, 0xce, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x8e, 0x02, 0x0a, 0x08, 0x53, 0x63, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2f,
	0x0a, 0x11, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72,
	0x75, 0x6c, 0x65, 0x18, 0xec, 0x86, 0xaa, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x2f, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0xca, 0x90, 0x93, 0x54, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x73, 0x63, 0x61, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x51, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x18, 0xeb, 0xa2, 0xa2, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x96, 0x97, 0xc8, 0xec, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0xac, 0xbe,
	0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0xf6, 0xc4, 0xb9, 0xad, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x48,
	0x0a, 0x13, 0x63, 0x61, 0x6c, 0x6c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xff, 0xbb, 0xc6, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x12, 0x63, 0x61, 0x6c, 0x6c, 0x67, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe5, 0xf3, 0xa9, 0xf8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x52,
	0x0a, 0x11, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x18, 0xe9, 0x9d, 0x80, 0x56, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x10, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xe5, 0xf3, 0xa9, 0xf8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54,
	0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x64, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe5, 0xf3, 0xa9, 0xf8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x50, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0xec,
	0x92, 0xc9, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x52, 0x11, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x50, 0x0a, 0x10, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x99,
	0xe1, 0xbf, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0f, 0x66, 0x6f, 0x75,
	0x6e, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x18, 0xa9, 0xc8, 0xd0, 0x2f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0a,
	0x53, 0x63, 0x61, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x63,
	0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0xe7, 0xd2, 0xaf, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0xb2, 0xa9, 0x86,
	0xa1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12,
	0x24, 0x0a, 0x0c, 0x73, 0x65, 0x6d, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x89, 0xf4, 0xe6, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6d, 0x76, 0x65, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xf6, 0x04, 0x0a, 0x0f, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x18, 0xb2, 0xa9, 0x86, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0xd3, 0x8d, 0xd4, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0xe7, 0xd2, 0xaf, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x5f, 0x0a, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0xc3,
	0xf1, 0xd3, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0xdd, 0x93,
	0xba, 0xab, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x64, 0x55, 0x72, 0x6c, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x18, 0x9c, 0xcb, 0xe9, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0xed, 0xe7, 0x90, 0x84, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0d, 0x6c,
	0x6f, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0xa9, 0xa9, 0xec,
	0x76, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0xa1, 0x9d, 0xa9, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x69, 0x6e,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x93, 0xa7, 0xcc, 0x4e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x67, 0x69,
	0x74, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x94, 0xf5, 0xa1, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x67, 0x69, 0x74, 0x52, 0x65, 0x66, 0x1a, 0x56, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d,
	0x0a, 0x0f, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x69, 0x6c,
	0x64, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0xb2, 0xa9, 0x86,
	0xa1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12,
	0x1c, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xd3, 0x8d, 0xd4, 0xf2, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01,
	0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x0a, 0x0a, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0xb4,
	0xc0, 0x8f, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x67, 0x69, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0xb1,
	0x8a, 0x91, 0x8f, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x69, 0x74, 0x42, 0x6c, 0x6f,
	0x62, 0x12, 0x34, 0x0a, 0x14, 0x67, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0xfd, 0x92, 0xa4, 0xee, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x67, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x9d, 0x01, 0x0a, 0x10, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x07,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xa9, 0x8b, 0x99, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x68, 0x69, 0x73,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x9f, 0xdf, 0xef, 0xd7, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x74, 0x68, 0x69, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa0,
	0xb4, 0xe6, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0xb2, 0xfd, 0xe6, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x78,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xda, 0x02, 0x0a, 0x08, 0x43, 0x6c, 0x69, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xb3, 0xdd, 0xbd,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x84, 0xb7, 0x86, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x86, 0xba, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0xa9, 0x8b, 0x99, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xb3,
	0xe8, 0x95, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x15, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0xbb, 0x8c, 0xc4, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x08, 0x6c, 0x6f, 0x6e, 0x67,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0xe4, 0xe5, 0xc4, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c,
	0x6f, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0xaa, 0xd9, 0xb8, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x18,
	0xe9, 0x93, 0xa0, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x05, 0x73, 0x70, 0x61, 0x6e, 0x73, 0x12, 0x15, 0x0a,
	0x04, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x9f, 0x97, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x65, 0x6c, 0x70, 0x22, 0xdd, 0x03, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x70,
	0x61, 0x6e, 0x12, 0x15, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x84, 0x98, 0xbe, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0xe2, 0xe6, 0xdf, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65,
	0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x2f, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x9b, 0x8a, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x12, 0x23, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0xb1, 0xd4, 0xc1, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x91, 0x98, 0x8f, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0xf5, 0x99, 0x9d, 0xab, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0xbb, 0xe7, 0xf2, 0x7c, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x44, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0xad,
	0x95, 0xd0, 0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0xc3, 0xcc, 0x82, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65,
	0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x6e, 0x64, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0xbb,
	0x8c, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xc2, 0x89, 0x9c, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x86, 0xfc, 0xb5, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xa9, 0x8b, 0x99, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x07,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x9a, 0xdf, 0xa8, 0xe4, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0xda, 0xcc, 0x9d, 0xe5, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0b, 0x53,
	0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xa9, 0x8b, 0x99, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x86, 0xfc, 0xb5, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xf9, 0x8f, 0xd8, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xb7, 0x01, 0x0a, 0x15, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0xdf, 0xcc, 0xa2, 0xf6, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x73,
	0x12, 0x37, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xbb, 0xec, 0xdf, 0x55, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x73, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x18, 0xda, 0xcc, 0x9d, 0xe5, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x22, 0xc4, 0x03, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0xf7,
	0xb8, 0x90, 0x34, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x10, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xcc, 0xfb, 0xa9, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x50, 0x61, 0x72, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x9f, 0xab, 0xd3, 0x5a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xf8, 0xbb, 0x8a, 0x6d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0xc6, 0xae, 0xfa, 0x78, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xab, 0x8f, 0xac, 0xfa, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x2b, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0xf1, 0xff, 0xad, 0x55, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d,
	0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x41, 0x0a,
	0x13, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x3c, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x05,
	0x66, 0x70, 0x61, 0x74, 0x68, 0x18, 0x8b, 0x83, 0xbf, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x70, 0x61, 0x74, 0x68, 0x12, 0x17, 0x0a, 0x05, 0x66, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xf3,
	0xd5, 0x89, 0x2e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x42,
	0x0a, 0x0c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x15,
	0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x9b, 0xf3, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x1b, 0x0a, 0x07, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76,
	0x18, 0x81, 0xd6, 0x9a, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x74, 0x64, 0x44,
	0x65, 0x76, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xc5, 0xd8, 0xd7, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xbd, 0xf5, 0x8a, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x0b, 0x70, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a,
	0x0f, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0xab, 0x9b, 0x80, 0xaf, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d,
	0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x79, 0x53, 0x6c, 0x6f,
	0x77, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0xbb,
	0x8c, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1e, 0x0a,
	0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x95, 0x86, 0xda, 0x17, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0xc1, 0xeb, 0xc6,
	0x5a, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x18, 0xaf, 0xdb, 0xba, 0x59, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x08, 0x72, 0x75, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x90, 0xbc, 0xe9, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x75, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xb0, 0x04, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73,
	0x18, 0xae, 0xaa, 0x96, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x6d, 0x67,
	0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52,
	0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xd3,
	0x9f, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb8, 0x91, 0xfd, 0xc1, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0xf3, 0x80, 0x87,
	0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0d, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0xa5,
	0xe8, 0xe8, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0f,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0xa0, 0x83, 0xf0, 0x95,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x46, 0x0a,
	0x0d, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0xa8,
	0xd4, 0xbf, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0xde, 0xbf, 0xec, 0xe2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x75, 0x62, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x55, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x84,
	0x98, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0xc2, 0x89, 0x9c, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xb6,
	0x04, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0xba, 0xba, 0x9e, 0x7c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x5f, 0x0a, 0x0f, 0x66, 0x69, 0x78, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0xc8, 0xfc, 0xca, 0xb0,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x46, 0x69, 0x78, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x14, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x18, 0xde, 0xa5, 0x92, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12, 0x39,
	0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x69, 0x78, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0xda, 0xb9, 0x8d, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x78, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18,
	0xe8, 0xec, 0x80, 0x8f, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x6d, 0x67,
	0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x57, 0x69, 0x74, 0x68, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0x55, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x63, 0x0a, 0x13, 0x46, 0x69, 0x78, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x6d,
	0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x78, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa4, 0x01, 0x0a, 0x06, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0xbb, 0xd6, 0xbe,
	0x52, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x1a, 0x58, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb6,
	0x02, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a,
	0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x95, 0xcd, 0xa7, 0x83, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x07, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x18, 0xf6, 0xc4, 0xb9, 0xad, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x76, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xbb, 0xec,
	0xdf, 0x55, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x46,
	0x0a, 0x09, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x18, 0xde, 0xa8, 0xc4, 0xe9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x52, 0x09, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x1a, 0x5f, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x66, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0e, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0xd6, 0xa3,
	0x89, 0x62, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0xdb, 0xf7, 0xe8, 0x68, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22,
	0x2b, 0x0a, 0x0d, 0x46, 0x69, 0x78, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1a, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x95, 0xcd, 0xa7, 0x83, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x22, 0x91, 0x02, 0x0a,
	0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0xd5, 0xf0, 0xc7,
	0x5d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x6c, 0x0a,
	0x1a, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x73, 0x18, 0xbe, 0xcd, 0xe1, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x52, 0x18, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x73, 0x12, 0x73, 0x0a, 0x1d, 0x75,
	0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x73, 0x18, 0xf8, 0xd3, 0xb3,
	0x55, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x69, 0x73, 0x52, 0x1a, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x65, 0x73,
	0x22, 0xbb, 0x02, 0x0a, 0x18, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x41, 0x0a,
	0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0xf0, 0xb3,
	0x8c, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x69, 0x70,
	0x70, 0x65, 0x74, 0x52, 0x0b, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x43, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0xc9, 0x9c, 0xc0, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x48, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0xc7, 0x8b, 0x97, 0x7e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x52, 0x0f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x4d, 0x0a, 0x0f, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0xb5, 0xb2, 0xbc, 0x98, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x4b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x0e,
	0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x60,
	0x0a, 0x1a, 0x55, 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x15, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x8c, 0xa7, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0xac, 0xbe, 0xbc, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0x37, 0x0a, 0x07, 0x53, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x8c, 0xa7, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x15, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0xb3, 0x94, 0xda, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x0d, 0x4b, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x13, 0x6b,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0xe6, 0xa3, 0xab, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x11, 0x6b, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74,
	0x18, 0xe2, 0xb5, 0xac, 0x58, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x6d, 0x67,
	0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x6e,
	0x69, 0x70, 0x70, 0x65, 0x74, 0x52, 0x07, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x22, 0xe7,
	0x02, 0x0a, 0x08, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x07, 0x61,
	0x75, 0x74, 0x6f, 0x66, 0x69, 0x78, 0x18, 0x92, 0xea, 0xa8, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x65, 0x65, 0x70,
	0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x18, 0x91, 0xa6, 0x8f, 0xd4, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x64, 0x65, 0x65, 0x70, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x12, 0x2d,
	0x0a, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0xb2, 0xcd, 0xd7, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x0a,
	0x14, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0xa2, 0xb2, 0x9d, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x70, 0x61, 0x74, 0x68, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x64,
	0x65, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x73, 0x63, 0x61, 0x6e,
	0x18, 0xfd, 0xb1, 0xe5, 0x7c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x63, 0x61, 0x6e, 0x41,
	0x6c, 0x6c, 0x44, 0x65, 0x70, 0x73, 0x49, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x53, 0x63, 0x61, 0x6e,
	0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x18, 0xe6, 0xbe, 0xd6, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x49, 0x0a,
	0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0xa0, 0xc3, 0xd2, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x69,
	0x61, 0x67, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x74, 0x72,
	0x69, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x87, 0xb8, 0xf2, 0x64, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x19, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x64, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x49, 0x64, 0x73, 0x12, 0x46,
	0x0a, 0x1e, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0xf4, 0x80, 0xb0, 0x9c, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x69, 0x61,
	0x67, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x49, 0x64, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0xd2, 0x83, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x83, 0xa9, 0xeb, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a,
	0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x83,
	0xe7, 0x95, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xb4,
	0x01, 0x0a, 0x08, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x85, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x10,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x18, 0xaa, 0x88, 0xac, 0xd5, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x82, 0xe5, 0x84, 0x5a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x98, 0xd5, 0xe7,
	0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xee, 0x01, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x05, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x18, 0xf7, 0xb8, 0x90, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x1c, 0x74, 0x72,
	0x69, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x87, 0xb8, 0xf2, 0x64, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x19, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x64, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x49, 0x64, 0x73, 0x12, 0x46,
	0x0a, 0x1e, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0xf4, 0x80, 0xb0, 0x9c, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x69, 0x61,
	0x67, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x09, 0x66, 0x69, 0x70, 0x73, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x82, 0xf0, 0xf1, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69,
	0x70, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xb4, 0x05, 0x0a, 0x13, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x78, 0x18, 0x92, 0xea, 0xa8, 0x27, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0b, 0x64,
	0x65, 0x65, 0x70, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x18, 0x91, 0xa6, 0x8f, 0xd4, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x65, 0x70, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65,
	0x70, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0xb2, 0xcd, 0xd7, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x33, 0x0a, 0x14, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0xa2, 0xb2, 0x9d, 0x19, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x70, 0x61, 0x74, 0x68, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x6c,
	0x6c, 0x5f, 0x64, 0x65, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x73,
	0x63, 0x61, 0x6e, 0x18, 0xfd, 0xb1, 0xe5, 0x7c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x63,
	0x61, 0x6e, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x73, 0x49, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x53,
	0x63, 0x61, 0x6e, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0xe6, 0xbe, 0xd6, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x12, 0x49, 0x0a, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0xa0, 0xc3, 0xd2, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x96, 0xcd, 0xef,
	0xe5, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0xae, 0xde,
	0x99, 0x8e, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x14, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x73, 0x6c,
	0x6f, 0x77, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x18, 0xa6, 0xa2, 0xa1, 0x25, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x6c, 0x6f, 0x77,
	0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x5a, 0x0a, 0x11, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xb2, 0xd6, 0xe2,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x10, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x16, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x90, 0xb1,
	0xb4, 0xce, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x53,
	0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x60, 0x0a,
	0x17, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0xeb, 0x9a, 0xa2, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x6b, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0xb6, 0xfd, 0xcb, 0xb6, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x44, 0x61, 0x79, 0x73, 0x22,
	0xf8, 0x01, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x50, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x8d, 0xbb, 0xc8, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x47, 0x0a, 0x0d, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0xb9, 0x8f, 0xa6, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65,
	0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e,
	0x53, 0x63, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x73, 0x63,
	0x61, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x0e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xaf, 0xba, 0xc2,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xdf, 0x08, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d,
	0x0a, 0x10, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0xf4, 0xfd, 0xd2, 0x89, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x63,
	0x61, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x18, 0xd7, 0x94, 0xe2, 0xd1,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0xbf, 0x8e,
	0xed, 0x74, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x55, 0x72, 0x6c, 0x12,
	0x1a, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0xf3, 0xbc, 0xab, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0xaf, 0x84, 0xe4, 0x84, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x82, 0xe4, 0x9d, 0xa2,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6f, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0xa3, 0xa5, 0xfa, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0xef, 0xfe, 0xb3,
	0x5f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x90, 0xaf,
	0x9b, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0xbf, 0xd8, 0xe4, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x32, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0xc7, 0xa3, 0xd5, 0xda, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x30, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe0, 0xbb, 0xf3, 0xfe,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xda, 0x9a, 0x81, 0x76, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0xad, 0xd1, 0x86, 0x96,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0a, 0x63,
	0x69, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0xc2, 0xd2, 0xad, 0xf5, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x4a, 0x6f, 0x62, 0x55, 0x72, 0x6c, 0x12, 0x0f, 0x0a,
	0x02, 0x6f, 0x6e, 0x18, 0xc1, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x1c, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x92,
	0x95, 0xd3, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x43, 0x0a, 0x1d, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0xb7, 0xc2, 0xa8, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x0f, 0x70, 0x75, 0x6c, 0x6c, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xe6, 0xc5, 0xdd, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x12, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0xa8, 0xd2, 0xab, 0x7d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x18,
	0x9f, 0xa9, 0x87, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x53, 0x68,
	0x61, 0x12, 0x1e, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x18, 0x95,
	0xdc, 0xae, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x68,
	0x61, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x63, 0x61,
	0x6e, 0x18, 0xbd, 0xcc, 0xae, 0x41, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x75,
	0x6c, 0x6c, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x61,
	0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0xbf, 0xfe, 0x8d, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x53, 0x63, 0x61, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x23, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0xcf, 0xb0, 0x8d, 0x3f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x29,
	0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x63, 0x61,
	0x6e, 0x18, 0x92, 0x89, 0xf6, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x21, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x9a, 0xcc, 0x8b, 0x85, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xda, 0x01, 0x0a,
	0x0c, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xae, 0x8f, 0xe6,
	0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xbf,
	0xdb, 0xa1, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x49, 0x64, 0x12, 0x46, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0xc6, 0xcf, 0xaa, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x72,
	0x79, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0xf3, 0xe4, 0x9f, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x64, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x73, 0x6d, 0x73, 0x5f, 0x73, 0x63,
	0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xf5, 0xf0, 0xd0, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6d, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x10, 0x43, 0x69, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x12, 0x1c, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xd3, 0x8d, 0xd4, 0xf2, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x87, 0xab, 0xd7, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x22, 0xab, 0x07, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c,
	0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0xc5, 0xd0, 0xca, 0x74, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0xbb, 0x8c, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x8c, 0xa7, 0xbe, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x18, 0xf0, 0xd1, 0xaf, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1d, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0xdb, 0xed, 0xbe, 0x80, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0xeb, 0xfb, 0xed, 0x38, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0xb3, 0xe8, 0x95, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x18, 0xa1, 0xd3, 0x90, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x92, 0xe6, 0xa9, 0x36, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x22, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0xcb, 0x8d, 0xb3, 0x42, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0xc1, 0x86, 0x91, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0xa8, 0xb7, 0xfb, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0xca, 0xaf, 0xf6, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x65, 0x6d,
	0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x52, 0x06, 0x68, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0xe0, 0x91, 0xe8, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0xfc, 0x87, 0xa5, 0xe8, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x23, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x90,
	0xd7, 0xb3, 0xc1, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x63, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x8b, 0x8f, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x73, 0x63, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x50,
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x18, 0xa7, 0xb4, 0xaa, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x6d,
	0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x43, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x9e, 0xa2, 0xcd, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xc1, 0xc8, 0x96, 0xab, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0xbe, 0xc1, 0xad, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4b, 0x69, 0x6e, 0x64,
	0x22, 0xa7, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0xba, 0xe7, 0xb3, 0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x0a,
	0x0d, 0x65, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x87,
	0x9e, 0x85, 0x61, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x09, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0xed, 0xf2, 0xd5, 0x40, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0c, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x18, 0xcb, 0x9b, 0xd8, 0x73, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x8c, 0x04, 0x0a, 0x0d, 0x43,
	0x69, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x08,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0xeb, 0xdc, 0xd3, 0xa3, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x73, 0x18, 0xa4, 0xd8, 0x82, 0xb2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x69, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x17, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0xf9, 0xc4, 0xf6, 0x31,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x29, 0x0a, 0x0e, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0xd1, 0xe9,
	0xba, 0x90, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x26, 0x0a, 0x0d, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x99, 0xe7, 0xd5, 0x61, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1c,
	0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0xdb, 0x89, 0xb6, 0x65, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb6, 0x98,
	0xce, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x88, 0xb1, 0x83, 0xe0, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x1a, 0x55, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x73, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xe0,
	0xbb, 0xf3, 0xfe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0xc7, 0xa3, 0xd5, 0xda, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0xa6,
	0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x96,
	0x89, 0xed, 0x93, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0xbf, 0xd8, 0xe4, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f,
	0x72, 0x18, 0xb2, 0xa7, 0xf7, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x6d,
	0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x22, 0x7d, 0x0a, 0x15, 0x43, 0x69, 0x53, 0x63, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x48, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xbb, 0xec, 0xdf, 0x55, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0xc0, 0xaf, 0xa4, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x3a, 0x0a, 0x1a, 0x43, 0x69, 0x53, 0x63, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0xb3, 0xe8, 0x95, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xd3, 0x03, 0x0a, 0x0e, 0x43, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0xb3, 0xbb, 0xb1, 0x89, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x65, 0x78,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x9f, 0x89, 0xab, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x88, 0xb1, 0x83, 0xe0, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x18, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0xd8, 0xec, 0xf4, 0xb4, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x6d,
	0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x16, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0xc0, 0xaf, 0xa4, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x84, 0xa5, 0xec, 0x90, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x1a, 0x55, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xeb, 0x07, 0x0a, 0x13, 0x43, 0x69, 0x53,
	0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x1e, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x18, 0xeb, 0xdc, 0xd3,
	0xa3, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x36, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xbb, 0xec, 0xdf, 0x55, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xc5, 0xd8, 0xd7, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x6a, 0x0a, 0x10, 0x75,
	0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x74, 0x73, 0x18,
	0x87, 0x80, 0x94, 0xfe, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x65, 0x6d, 0x67,
	0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x69,
	0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x75, 0x6e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x73, 0x12, 0x6d, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x94, 0xec,
	0xb3, 0x6d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x53, 0x63, 0x61,
	0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x4c,
	0x6f, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63,
	0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x57, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x95, 0x85, 0x93, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x43, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x70, 0x61, 0x72, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x2d, 0x0a, 0x10, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x18, 0xa5, 0xe8, 0xe8, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x71,
	0x0a, 0x13, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x8c, 0xb0, 0x94, 0xee, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11,
	0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x12, 0x55, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0xdc, 0xa1, 0xf2, 0x9c, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x55, 0x6e, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x45, 0x78, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x43, 0x0a, 0x15,
	0x4c, 0x6f, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x63, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x5d, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x44, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa3, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x73, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x18, 0xd5, 0xeb, 0xe9, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x64, 0x12, 0x22, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x18, 0xca, 0x87, 0xa4, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x64, 0x18, 0xd1, 0xf3, 0x90, 0x83, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x09,
	0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x95, 0x86, 0xda, 0x17, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xd8, 0x01, 0x0a,
	0x16, 0x43, 0x69, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0xc7, 0xee, 0x9e, 0x6b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x2f, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x9a, 0xf0, 0xca, 0x15, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x70, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x89, 0xd4, 0x88, 0x84, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c, 0x61, 0x70, 0x70, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0xe9, 0x86, 0xa6, 0xe6, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x61,
	0x70, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42,
	0x61, 0x73, 0x65, 0x64, 0x49, 0x64, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x15, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0xbb, 0x8c, 0xc4, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x18, 0x87, 0xf7, 0xb6, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0xc2, 0x89, 0x9c, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x8c, 0xa7, 0xbe,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x63,
	0x6f, 0x6c, 0x18, 0xc0, 0xc6, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12,
	0x15, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0xb3, 0x94, 0xda, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x66, 0x0a, 0x10, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x73, 0x75,
	0x62, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0xe7, 0x8d, 0xc9, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x10, 0x73, 0x75,
	0x62, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x89,
	0x02, 0x0a, 0x17, 0x43, 0x6c, 0x69, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x75, 0x62, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x12, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x18, 0xd6, 0x9a, 0xa7, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0xba, 0xe3, 0xb3, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x11, 0x75,
	0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0xb8, 0x84, 0xc3, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x10, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x57, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0xcb, 0x97, 0xfe, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0xe5, 0x02, 0x0a, 0x0f, 0x53,
	0x75, 0x62, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x27,
	0x0a, 0x0d, 0x73, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0xa5, 0xcd, 0xe3, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0xd6, 0x9a,
	0xa7, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x11, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0xcb, 0x97, 0xfe, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x75,
	0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0xb8, 0x84, 0xc3, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x10, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xbb, 0xec, 0xdf, 0x55,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x22, 0x5a, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0xac, 0xbe, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0xbb, 0x8c, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0xc8,
	0x01, 0x0a, 0x19, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x11,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x96, 0x99, 0x8b, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xa5, 0xe9, 0xfd, 0xf1, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0xe7, 0xd2, 0xaf, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09,
	0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x4b, 0x0a, 0x0d, 0x43, 0x69, 0x53,
	0x63, 0x61, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x65, 0x78,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0xb3, 0xbb, 0xb1, 0x89, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x73,
	0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0xa4, 0xbb, 0xf9, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x22, 0xd7, 0x03, 0x0a, 0x10, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0f, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x85, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd5, 0x9d, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xab, 0xd6, 0xde, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0xf0, 0xd6, 0x81, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x73, 0x63, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0xa4, 0x8c, 0xfc, 0x6c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63,
	0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0xf5, 0xad,
	0xc2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x22, 0x0a, 0x0b,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x97, 0xe9, 0xdb, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2e, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x82, 0xda, 0x87, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x22, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x78, 0x18,
	0xc0, 0xe2, 0xd1, 0x5f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x41, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x78, 0x12, 0x2b, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x65, 0x70,
	0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x18, 0xd1, 0xf5, 0xa9, 0xfc, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x44, 0x65, 0x65, 0x70, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65,
	0x70, 0x12, 0x37, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f,
	0x76, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x94, 0xbb, 0x88, 0xd1,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x73, 0x54, 0x72, 0x69, 0x61, 0x67, 0x65,
	0x56, 0x69, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x14, 0x68, 0x61,
	0x73, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x82, 0x8e, 0xe2, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61,
	0x73, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x22, 0xcd, 0x01, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x78, 0x18,
	0xc0, 0xe2, 0xd1, 0x5f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x41, 0x75, 0x74,
	0x6f, 0x66, 0x69, 0x78, 0x12, 0x2b, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x65, 0x70,
	0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x18, 0xd1, 0xf5, 0xa9, 0xfc, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x44, 0x65, 0x65, 0x70, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65,
	0x70, 0x12, 0x37, 0x0a, 0x16, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f,
	0x76, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x94, 0xbb, 0x88, 0xd1,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x68, 0x61, 0x73, 0x54, 0x72, 0x69, 0x61, 0x67, 0x65,
	0x56, 0x69, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x14, 0x68, 0x61,
	0x73, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x82, 0x8e, 0xe2, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61,
	0x73, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x22, 0x5d, 0x0a, 0x12, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0xc0, 0xd6, 0xc0, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0x8f, 0x07, 0x0a, 0x0a, 0x53, 0x63, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26,
	0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x82, 0xe5, 0x84, 0x5a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x98, 0xd5, 0xe7, 0x3d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0xc3, 0xad, 0xdf, 0x53, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0b, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0xe8, 0xe0, 0x9d, 0xc0, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a,
	0x07, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x78, 0x18, 0x92, 0xea, 0xa8, 0x27, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x78, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x65,
	0x65, 0x70, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x18, 0x91, 0xa6, 0x8f, 0xd4, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x65, 0x70, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70,
	0x12, 0x2d, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0xb2, 0xcd, 0xd7, 0xe0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x33, 0x0a, 0x14, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0xa2, 0xb2, 0x9d, 0x19, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x70, 0x61, 0x74, 0x68, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x1a, 0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x6c, 0x6c,
	0x5f, 0x64, 0x65, 0x70, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x73, 0x63,
	0x61, 0x6e, 0x18, 0xfd, 0xb1, 0xe5, 0x7c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x63, 0x61,
	0x6e, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x73, 0x49, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x53, 0x63,
	0x61, 0x6e, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0xe6, 0xbe, 0xd6, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12,
	0x49, 0x0a, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0xa0, 0xc3, 0xd2, 0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x1c, 0x74, 0x72,
	0x69, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x87, 0xb8, 0xf2, 0x64, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x19, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72,
	0x65, 0x64, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x69, 0x63, 0x49, 0x64, 0x73, 0x12, 0x46,
	0x0a, 0x1e, 0x74, 0x72, 0x69, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0xf4, 0x80, 0xb0, 0x9c, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x69, 0x61,
	0x67, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x96, 0xcd, 0xef, 0xe5, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x43, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x18, 0xaa, 0x88, 0xac, 0xd5, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x81, 0xbe, 0xbd, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x14, 0x63, 0x69, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18,
	0xd3, 0xd0, 0xac, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x69, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x11,
	0x63, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x22, 0xb7, 0x01, 0x0a, 0x0a, 0x54, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x1a, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xa9, 0x8b, 0x99, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0c,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xc1, 0xbe, 0xd6,
	0xd7, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa4, 0xea, 0x85, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x82, 0xed,
	0xd0, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x55,
	0x72, 0x6c, 0x12, 0x17, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x90, 0xf9, 0xb1, 0x2c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x4f, 0x0a, 0x12, 0x54,
	0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0xf6, 0xc4, 0xb9,
	0xad, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x13,
	0x54, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x93,
	0x9a, 0x8d, 0xae, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73,
	0x22, 0x48, 0x0a, 0x14, 0x54, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x18, 0xe3, 0xd4, 0x92, 0x83, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x06, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x22, 0x4e, 0x0a, 0x11, 0x54, 0x72,
	0x41, 0x64, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0xa1,
	0xb7, 0xdc, 0xd4, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a,
	0x6e, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x83, 0x02, 0x0a, 0x11, 0x43,
	0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0xb2, 0x92, 0xb0, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67,
	0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x69,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3e, 0x0a, 0x0a, 0x6f, 0x72, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0xda, 0xd9, 0xf4, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d,
	0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43,
	0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x9e, 0xc5, 0xb7, 0xc0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x31, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x81, 0xbe, 0xbd, 0x2b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xc7, 0x04, 0x0a, 0x08, 0x43, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a,
	0x03, 0x65, 0x6e, 0x76, 0x18, 0xad, 0x91, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x43, 0x69, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x03, 0x65, 0x6e, 0x76, 0x12, 0x43, 0x0a, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0xaa, 0x88, 0xac, 0xd5,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x0d,
	0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x96, 0xcd,
	0xef, 0xe5, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x66, 0x69, 0x78,
	0x18, 0x92, 0xea, 0xa8, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x61, 0x75, 0x74, 0x6f, 0x66,
	0x69, 0x78, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x65, 0x65, 0x70, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65,
	0x70, 0x18, 0x91, 0xa6, 0x8f, 0xd4, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65, 0x65,
	0x70, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0xb2, 0xcd, 0xd7,
	0xe0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x14, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18,
	0xa2, 0xb2, 0x9d, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x61, 0x74, 0x68, 0x54, 0x6f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x1a,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0xfd, 0xb1, 0xe5, 0x7c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x63, 0x61, 0x6e, 0x41, 0x6c, 0x6c, 0x44, 0x65, 0x70, 0x73,
	0x49, 0x6e, 0x44, 0x69, 0x66, 0x66, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0xe6, 0xbe,
	0xd6, 0x8e, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x49, 0x0a, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xa0, 0xc3, 0xd2, 0x36, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8b, 0x06, 0x0a, 0x0a, 0x43,
	0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0xd3, 0x8d, 0xd4, 0xf2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0xba, 0xba, 0x9e, 0x7c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65,
	0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xbb, 0xec, 0xdf,
	0x55, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x05, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x18, 0xae, 0xaa, 0x96, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x6b, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0xd3, 0x9f, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65,
	0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb8, 0x91,
	0xfd, 0xc1, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a,
	0x0f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x18, 0xf3, 0x80, 0x87, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x0d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x43,
	0x0a, 0x10, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0xa5, 0xe8, 0xe8, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x0f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18,
	0xa0, 0x83, 0xf0, 0x95, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x69, 0x6c, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x55, 0x73, 0x65,
	0x64, 0x12, 0x46, 0x0a, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0xa8, 0xd4, 0xbf, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65,
	0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e,
	0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0c, 0x73, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0b, 0x73, 0x75, 0x62,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0xde, 0xbf, 0xec, 0xe2, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x53, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0xe6,
	0xbe, 0xd6, 0x8e, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0x5e, 0x0a, 0x0f, 0x43, 0x6f, 0x72, 0x65,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x4b, 0x0a, 0x0f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0xe6,
	0xbe, 0xd6, 0x8e, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x72,
	0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0xc5, 0xd0, 0xca, 0x74, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0xbb, 0x8c, 0xc4,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0xe2, 0xe6, 0xdf, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x2f, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x9b, 0x8a, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x90, 0xf9, 0xb1, 0x2c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x45, 0x78, 0x74, 0x72, 0x61, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x97,
	0x06, 0x0a, 0x0e, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x12, 0x4e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x61, 0x72, 0x73, 0x18, 0xb6, 0xc9,
	0x81, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x45, 0x78, 0x74, 0x72, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x76, 0x61,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x76, 0x61, 0x72,
	0x73, 0x12, 0x39, 0x0a, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0xbe, 0xc1, 0xad, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x18, 0xd1, 0x9d, 0xa4, 0xfd, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xb3, 0xe8, 0x95, 0xa1, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xe0, 0x91, 0xe8, 0xfe, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18,
	0xa1, 0xd3, 0x90, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x03, 0x66, 0x69, 0x78, 0x18,
	0x95, 0x9f, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x66, 0x69, 0x78, 0x12, 0x50, 0x0a, 0x0e,
	0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0xa7,
	0xb4, 0xaa, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52,
	0x0d, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x09, 0x73, 0x63, 0x61, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x8f, 0xc8, 0xa6, 0x5f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x08, 0x73, 0x63, 0x61, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x43, 0x0a, 0x10, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x9e, 0xa2, 0xcd, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x4e, 0x0a, 0x0f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0xc1, 0xc8, 0x96, 0xab, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x38, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x96, 0xcd, 0xd7, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x45, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x5c, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x76, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73,
	0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x76, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x72,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x37, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x8e, 0x80, 0xc4, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x33, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0xa1, 0xd3, 0x90, 0x5b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0xb3, 0xe8, 0x95, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x86, 0xfc,
	0xb5, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x3a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xed, 0xd1, 0xc8, 0x62,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xa9, 0x8b, 0x99, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x81, 0x05, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x1c, 0x0a, 0x07, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x18, 0x86, 0xb0, 0xf5, 0x80, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x18, 0x99, 0xa1, 0xb4, 0xe5, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x85, 0xad, 0x8e, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x67,
	0x69, 0x74, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x18, 0x88, 0xa8, 0xf5, 0x61, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x47, 0x69, 0x74, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x12, 0x42, 0x0a, 0x1b, 0x72, 0x65, 0x73, 0x70, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0xc5, 0x91, 0xc6, 0x90, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x72, 0x65,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x53, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x16, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0xd3, 0x9c, 0x86, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x6d,
	0x67, 0x72, 0x65, 0x70, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x1e, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x18, 0x8e, 0x83, 0x91, 0x6f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x61,
	0x6c, 0x77, 0x61, 0x79, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x45, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x10, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0xff,
	0xea, 0xf5, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69,
	0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0xcf,
	0xac, 0x98, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x10,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x32, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x76, 0x63, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0xff, 0xb0, 0xe0, 0xd5, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x38, 0x0a, 0x16, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x6d, 0x69, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0xef,
	0xec, 0xfa, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x4d, 0x69, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2b,
	0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x18, 0xfd, 0xc8, 0xa7, 0xd5, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x73,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x0a,
	0x43, 0x6f, 0x64, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0xbb, 0x8c, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x1e, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x99, 0xba,
	0x99, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0xe6, 0x81,
	0xa7, 0x90, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0xb2, 0xf3, 0xfe,
	0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x10, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x7e, 0x0a,
	0x0d, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0xc5, 0xc4, 0xe2,
	0xd7, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x18, 0x84, 0x9d, 0x99, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73,
	0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x0d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0x95, 0x01,
	0x0a, 0x04, 0x45, 0x64, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0xbb,
	0x8c, 0xc4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0xd2, 0xbf,
	0xfb, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0xf6, 0xf7, 0xea, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6e, 0x64,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x89, 0xc1, 0xf3, 0xc5, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x78, 0x74, 0x22, 0x5f, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x46, 0x69,
	0x78, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x19, 0x0a, 0x06, 0x64, 0x72, 0x79,
	0x72, 0x75, 0x6e, 0x18, 0x86, 0xf2, 0xed, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x72,
	0x79, 0x72, 0x75, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0xa9, 0xc1,
	0xab, 0x34, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x45, 0x64, 0x69, 0x74, 0x52,
	0x05, 0x65, 0x64, 0x69, 0x74, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x46, 0x69, 0x78, 0x65, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x31, 0x0a, 0x13, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x89, 0xae, 0xcb, 0x69, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39,
	0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x90, 0xd7,
	0xb3, 0xc1, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x0b, 0x53, 0x61, 0x72,
	0x69, 0x66, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0xf7, 0xb8, 0x90, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x12, 0x18, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x18, 0xee, 0x81, 0x93, 0x1f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x12, 0x34, 0x0a, 0x14, 0x73,
	0x68, 0x6f, 0x77, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x73, 0x18, 0xb1, 0xf7, 0xf4, 0x93, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73,
	0x68, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x66, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x73, 0x22, 0x90, 0x01, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x63, 0x69, 0x5f, 0x69, 0x6e, 0x76,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc4, 0xf4, 0x9c, 0x63, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x69, 0x73, 0x43, 0x69, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x18, 0x84, 0x9a, 0xb7, 0x66, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x49, 0x6e, 0x12, 0x2d, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x75, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0xcd, 0xa9, 0xd6, 0x3f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x55, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x22, 0xb2, 0x01, 0x0a, 0x18, 0x44, 0x75, 0x6d, 0x70, 0x52, 0x75, 0x6c,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x2d, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0xf7, 0xb8, 0x90, 0x34, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x0c, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x86, 0x86, 0xe3, 0x54, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x64, 0x69, 0x72, 0x18, 0xe5, 0x8f, 0xed, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x44, 0x69, 0x72, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x95, 0xaa, 0xe8, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x4e, 0x0a, 0x08, 0x4d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0xac, 0xbe,
	0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0xbb, 0x8c, 0xc4, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x4e, 0x0a, 0x08, 0x4c, 0x6f, 0x63,
	0x6b, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0xac, 0xbe,
	0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x15, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0xbb, 0x8c, 0xc4, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x50, 0x0a, 0x13, 0x52, 0x65, 0x73,
	0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6d, 0x64, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0xb6, 0xab, 0xb9, 0x59,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xb3, 0xe8, 0x95, 0xa1, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x7b, 0x0a, 0x12, 0x53,
	0x63, 0x61, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x18, 0xe5, 0xab, 0xa9, 0x2b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x37, 0x0a, 0x16, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0xf7, 0xbe, 0xe5, 0x5b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0a, 0x53, 0x75, 0x62,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x5f,
	0x64, 0x69, 0x72, 0x18, 0x95, 0xc2, 0xa8, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f,
	0x6f, 0x74, 0x44, 0x69, 0x72, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x18, 0xe7, 0xd2, 0xaf, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x44, 0x0a, 0x11,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0xb2, 0xf3, 0xfe, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x53,
	0x75, 0x62, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0xd2, 0x83, 0xd0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x6d,
	0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12,
	0x45, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x96, 0x99, 0x8b, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0xe7, 0xd2, 0xaf, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x09, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x4c, 0x0a,
	0x15, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0xab, 0x80, 0x8a, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0xbb, 0xec, 0xdf, 0x55, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x3c, 0x0a, 0x14,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x73, 0x18, 0x95, 0xa6, 0xe3, 0x28, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x14, 0x55,
	0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x53, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0xd2, 0x83, 0xd0, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0xc2, 0x89, 0x9c, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0xbb, 0xec, 0xdf, 0x55, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x19,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x46, 0x0a, 0x12, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0xd6, 0x9a, 0xa7, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x11,
	0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x49, 0x0a, 0x1f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x64, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x89, 0x86, 0xb8, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x63, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x3f, 0x0a, 0x11,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x2a, 0x0a, 0x01, 0x6d, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x01, 0x6d, 0x22, 0xf5, 0x01,
	0x0a, 0x22, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0a, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0xcf, 0xf0, 0xd6, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x44, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0xeb, 0xdc, 0xd3, 0xa3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a,
	0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x88, 0xb1,
	0x83, 0xe0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0c, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0e, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x8f, 0xcf,
	0xdb, 0xee, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x54, 0x6f,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x22, 0x40, 0x0a, 0x1c, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x86, 0x92, 0xc9, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x22, 0x1c, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x12, 0x0a, 0x03, 0x66, 0x71, 0x6e, 0x18, 0x83, 0xd6, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x66, 0x71, 0x6e, 0x22, 0x78, 0x0a, 0x0b, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0xad,
	0x91, 0xd7, 0xf4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x04, 0x6c,
	0x6f, 0x63, 0x73, 0x18, 0xad, 0x90, 0xd7, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x6c, 0x6f, 0x63, 0x73, 0x22,
	0x56, 0x0a, 0x08, 0x44, 0x69, 0x66, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xca, 0xfa, 0x86, 0x6d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x64, 0x69,
	0x66, 0x66, 0x73, 0x18, 0xce, 0xf1, 0x91, 0x34, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x64, 0x69,
	0x66, 0x66, 0x73, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0xaf, 0xc7, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x48, 0x0a, 0x09, 0x44, 0x69, 0x66, 0x66, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x76, 0x65, 0x5f, 0x64, 0x69, 0x66, 0x66,
	0x73, 0x18, 0x9f, 0xf3, 0xbb, 0x58, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65, 0x6d,
	0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x2e, 0x44,
	0x69, 0x66, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x08, 0x63, 0x76, 0x65, 0x44, 0x69, 0x66, 0x66,
	0x73, 0x42, 0xc4, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65,
	0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0x42, 0x14, 0x53, 0x65, 0x6d,
	0x67, 0x72, 0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x31, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x79, 0x6f, 0x73, 0x68, 0x69, 0x6e, 0x6f, 0x2d, 0x73, 0x2f, 0x73, 0x65, 0x6d, 0x67, 0x72, 0x65,
	0x70, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x6d,
	0x67, 0x72, 0x65, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x53, 0x58, 0x58, 0xaa, 0x02, 0x0f, 0x53, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x56, 0x31, 0xca, 0x02, 0x0f, 0x53, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x31, 0xe2, 0x02, 0x1b, 0x53, 0x65, 0x6d, 0x67, 0x72,
	0x65, 0x70, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x53, 0x65, 0x6d, 0x67, 0x72, 0x65, 0x70,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_semgrep_output_v1_proto_rawDescOnce sync.Once
	file_semgrep_output_v1_proto_rawDescData = file_semgrep_output_v1_proto_rawDesc
)

func file_semgrep_output_v1_proto_rawDescGZIP() []byte {
	file_semgrep_output_v1_proto_rawDescOnce.Do(func() {
		file_semgrep_output_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_semgrep_output_v1_proto_rawDescData)
	})
	return file_semgrep_output_v1_proto_rawDescData
}

var file_semgrep_output_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 130)
var file_semgrep_output_v1_proto_goTypes = []any{
	(*CliOutput)(nil),                          // 0: semgrep_output_v1.CliOutput
	(*Position)(nil),                           // 1: semgrep_output_v1.Position
	(*Location)(nil),                           // 2: semgrep_output_v1.Location
	(*ProFeature)(nil),                         // 3: semgrep_output_v1.ProFeature
	(*CliMatch)(nil),                           // 4: semgrep_output_v1.CliMatch
	(*CliMatchExtra)(nil),                      // 5: semgrep_output_v1.CliMatchExtra
	(*MetavarValue)(nil),                       // 6: semgrep_output_v1.MetavarValue
	(*SvalueValue)(nil),                        // 7: semgrep_output_v1.SvalueValue
	(*MatchingExplanation)(nil),                // 8: semgrep_output_v1.MatchingExplanation
	(*MatchingExplanationExtra)(nil),           // 9: semgrep_output_v1.MatchingExplanationExtra
	(*MatchDataflowTrace)(nil),                 // 10: semgrep_output_v1.MatchDataflowTrace
	(*MatchIntermediateVar)(nil),               // 11: semgrep_output_v1.MatchIntermediateVar
	(*ScaMatch)(nil),                           // 12: semgrep_output_v1.ScaMatch
	(*TransitiveReachable)(nil),                // 13: semgrep_output_v1.TransitiveReachable
	(*TransitiveUnreachable)(nil),              // 14: semgrep_output_v1.TransitiveUnreachable
	(*TransitiveUndetermined)(nil),             // 15: semgrep_output_v1.TransitiveUndetermined
	(*DependencyMatch)(nil),                    // 16: semgrep_output_v1.DependencyMatch
	(*ScaPattern)(nil),                         // 17: semgrep_output_v1.ScaPattern
	(*FoundDependency)(nil),                    // 18: semgrep_output_v1.FoundDependency
	(*DependencyChild)(nil),                    // 19: semgrep_output_v1.DependencyChild
	(*HistoricalInfo)(nil),                     // 20: semgrep_output_v1.HistoricalInfo
	(*IncompatibleRule)(nil),                   // 21: semgrep_output_v1.IncompatibleRule
	(*CliError)(nil),                           // 22: semgrep_output_v1.CliError
	(*ErrorSpan)(nil),                          // 23: semgrep_output_v1.ErrorSpan
	(*SkippedTarget)(nil),                      // 24: semgrep_output_v1.SkippedTarget
	(*ScannedAndSkipped)(nil),                  // 25: semgrep_output_v1.ScannedAndSkipped
	(*SkippedRule)(nil),                        // 26: semgrep_output_v1.SkippedRule
	(*TargetDiscoveryResult)(nil),              // 27: semgrep_output_v1.TargetDiscoveryResult
	(*Profile)(nil),                            // 28: semgrep_output_v1.Profile
	(*FileTime)(nil),                           // 29: semgrep_output_v1.FileTime
	(*SummaryStats)(nil),                       // 30: semgrep_output_v1.SummaryStats
	(*ParsingTime)(nil),                        // 31: semgrep_output_v1.ParsingTime
	(*TargetTimes)(nil),                        // 32: semgrep_output_v1.TargetTimes
	(*CliOutputExtra)(nil),                     // 33: semgrep_output_v1.CliOutputExtra
	(*ConfigError)(nil),                        // 34: semgrep_output_v1.ConfigError
	(*TestsResult)(nil),                        // 35: semgrep_output_v1.TestsResult
	(*Checks)(nil),                             // 36: semgrep_output_v1.Checks
	(*RuleResult)(nil),                         // 37: semgrep_output_v1.RuleResult
	(*ExpectedReported)(nil),                   // 38: semgrep_output_v1.ExpectedReported
	(*FixtestResult)(nil),                      // 39: semgrep_output_v1.FixtestResult
	(*MatchingDiagnosis)(nil),                  // 40: semgrep_output_v1.MatchingDiagnosis
	(*UnexpectedMatchDiagnosis)(nil),           // 41: semgrep_output_v1.UnexpectedMatchDiagnosis
	(*UnexpectedNoMatchDiagnosis)(nil),         // 42: semgrep_output_v1.UnexpectedNoMatchDiagnosis
	(*Snippet)(nil),                            // 43: semgrep_output_v1.Snippet
	(*KillingParent)(nil),                      // 44: semgrep_output_v1.KillingParent
	(*Features)(nil),                           // 45: semgrep_output_v1.Features
	(*TriageIgnored)(nil),                      // 46: semgrep_output_v1.TriageIgnored
	(*ScanResponse)(nil),                       // 47: semgrep_output_v1.ScanResponse
	(*ScanInfo)(nil),                           // 48: semgrep_output_v1.ScanInfo
	(*ScanConfiguration)(nil),                  // 49: semgrep_output_v1.ScanConfiguration
	(*EngineConfiguration)(nil),                // 50: semgrep_output_v1.EngineConfiguration
	(*HistoricalConfiguration)(nil),            // 51: semgrep_output_v1.HistoricalConfiguration
	(*ScanRequest)(nil),                        // 52: semgrep_output_v1.ScanRequest
	(*ProjectMetadata)(nil),                    // 53: semgrep_output_v1.ProjectMetadata
	(*ScanMetadata)(nil),                       // 54: semgrep_output_v1.ScanMetadata
	(*CiConfigFromRepo)(nil),                   // 55: semgrep_output_v1.CiConfigFromRepo
	(*Finding)(nil),                            // 56: semgrep_output_v1.Finding
	(*FindingHashes)(nil),                      // 57: semgrep_output_v1.FindingHashes
	(*CiScanResults)(nil),                      // 58: semgrep_output_v1.CiScanResults
	(*Contributor)(nil),                        // 59: semgrep_output_v1.Contributor
	(*Contribution)(nil),                       // 60: semgrep_output_v1.Contribution
	(*CiScanResultsResponse)(nil),              // 61: semgrep_output_v1.CiScanResultsResponse
	(*CiScanResultsResponseError)(nil),         // 62: semgrep_output_v1.CiScanResultsResponseError
	(*CiScanComplete)(nil),                     // 63: semgrep_output_v1.CiScanComplete
	(*CiScanCompleteStats)(nil),                // 64: semgrep_output_v1.CiScanCompleteStats
	(*ParsingStats)(nil),                       // 65: semgrep_output_v1.ParsingStats
	(*CiScanCompleteResponse)(nil),             // 66: semgrep_output_v1.CiScanCompleteResponse
	(*DependencyParserError)(nil),              // 67: semgrep_output_v1.DependencyParserError
	(*SupplyChainStats)(nil),                   // 68: semgrep_output_v1.SupplyChainStats
	(*CliOutputSubprojectInfo)(nil),            // 69: semgrep_output_v1.CliOutputSubprojectInfo
	(*SubprojectStats)(nil),                    // 70: semgrep_output_v1.SubprojectStats
	(*DependencySourceFile)(nil),               // 71: semgrep_output_v1.DependencySourceFile
	(*DependencyResolutionStats)(nil),          // 72: semgrep_output_v1.DependencyResolutionStats
	(*CiScanFailure)(nil),                      // 73: semgrep_output_v1.CiScanFailure
	(*DeploymentConfig)(nil),                   // 74: semgrep_output_v1.DeploymentConfig
	(*HasFeatures)(nil),                        // 75: semgrep_output_v1.HasFeatures
	(*DeploymentResponse)(nil),                 // 76: semgrep_output_v1.DeploymentResponse
	(*ScanConfig)(nil),                         // 77: semgrep_output_v1.ScanConfig
	(*TrCacheKey)(nil),                         // 78: semgrep_output_v1.TrCacheKey
	(*TrCacheMatchResult)(nil),                 // 79: semgrep_output_v1.TrCacheMatchResult
	(*TrQueryCacheRequest)(nil),                // 80: semgrep_output_v1.TrQueryCacheRequest
	(*TrQueryCacheResponse)(nil),               // 81: semgrep_output_v1.TrQueryCacheResponse
	(*TrAddCacheRequest)(nil),                  // 82: semgrep_output_v1.TrAddCacheRequest
	(*CiConfigFromCloud)(nil),                  // 83: semgrep_output_v1.CiConfigFromCloud
	(*CiConfig)(nil),                           // 84: semgrep_output_v1.CiConfig
	(*CoreOutput)(nil),                         // 85: semgrep_output_v1.CoreOutput
	(*CoreOutputExtra)(nil),                    // 86: semgrep_output_v1.CoreOutputExtra
	(*CoreMatch)(nil),                          // 87: semgrep_output_v1.CoreMatch
	(*CoreMatchExtra)(nil),                     // 88: semgrep_output_v1.CoreMatchExtra
	(*CoreError)(nil),                          // 89: semgrep_output_v1.CoreError
	(*TargetingConf)(nil),                      // 90: semgrep_output_v1.TargetingConf
	(*CodeTarget)(nil),                         // 91: semgrep_output_v1.CodeTarget
	(*ScanningRoots)(nil),                      // 92: semgrep_output_v1.ScanningRoots
	(*Edit)(nil),                               // 93: semgrep_output_v1.Edit
	(*ApplyFixesParams)(nil),                   // 94: semgrep_output_v1.ApplyFixesParams
	(*ApplyFixesReturn)(nil),                   // 95: semgrep_output_v1.ApplyFixesReturn
	(*SarifFormat)(nil),                        // 96: semgrep_output_v1.SarifFormat
	(*FormatContext)(nil),                      // 97: semgrep_output_v1.FormatContext
	(*DumpRulePartitionsParams)(nil),           // 98: semgrep_output_v1.DumpRulePartitionsParams
	(*Manifest)(nil),                           // 99: semgrep_output_v1.Manifest
	(*Lockfile)(nil),                           // 100: semgrep_output_v1.Lockfile
	(*ResolutionCmdFailed)(nil),                // 101: semgrep_output_v1.ResolutionCmdFailed
	(*ScaResolutionError)(nil),                 // 102: semgrep_output_v1.ScaResolutionError
	(*Subproject)(nil),                         // 103: semgrep_output_v1.Subproject
	(*ResolvedSubproject)(nil),                 // 104: semgrep_output_v1.ResolvedSubproject
	(*DownloadedDependency)(nil),               // 105: semgrep_output_v1.DownloadedDependency
	(*UnresolvedSubproject)(nil),               // 106: semgrep_output_v1.UnresolvedSubproject
	(*ResolveDependenciesParams)(nil),          // 107: semgrep_output_v1.ResolveDependenciesParams
	(*TransitiveFinding)(nil),                  // 108: semgrep_output_v1.TransitiveFinding
	(*TransitiveReachabilityFilterParams)(nil), // 109: semgrep_output_v1.TransitiveReachabilityFilterParams
	(*SymbolAnalysisUploadResponse)(nil),       // 110: semgrep_output_v1.SymbolAnalysisUploadResponse
	(*Symbol)(nil),                             // 111: semgrep_output_v1.Symbol
	(*SymbolUsage)(nil),                        // 112: semgrep_output_v1.SymbolUsage
	(*DiffFile)(nil),                           // 113: semgrep_output_v1.DiffFile
	(*DiffFiles)(nil),                          // 114: semgrep_output_v1.DiffFiles
	nil,                                        // 115: semgrep_output_v1.CliMatchExtra.MetavarsEntry
	nil,                                        // 116: semgrep_output_v1.FoundDependency.AllowedHashesEntry
	nil,                                        // 117: semgrep_output_v1.Profile.ProfilingTimesEntry
	nil,                                        // 118: semgrep_output_v1.TestsResult.ResultsEntry
	nil,                                        // 119: semgrep_output_v1.TestsResult.FixtestResultsEntry
	nil,                                        // 120: semgrep_output_v1.Checks.ChecksEntry
	nil,                                        // 121: semgrep_output_v1.RuleResult.MatchesEntry
	nil,                                        // 122: semgrep_output_v1.CiScanResults.DependenciesEntry
	nil,                                        // 123: semgrep_output_v1.CiScanComplete.DependenciesEntry
	nil,                                        // 124: semgrep_output_v1.CiScanCompleteStats.UnsupportedExtsEntry
	nil,                                        // 125: semgrep_output_v1.CiScanCompleteStats.LockfileScanInfoEntry
	nil,                                        // 126: semgrep_output_v1.CiScanCompleteStats.ParseRateEntry
	nil,                                        // 127: semgrep_output_v1.CiScanCompleteStats.FindingsByProductEntry
	nil,                                        // 128: semgrep_output_v1.CiConfig.EnvEntry
	nil,                                        // 129: semgrep_output_v1.CoreMatchExtra.MetavarsEntry
	(*anypb.Any)(nil),                          // 130: google.protobuf.Any
}
var file_semgrep_output_v1_proto_depIdxs = []int32{
	4,   // 0: semgrep_output_v1.CliOutput.results:type_name -> semgrep_output_v1.CliMatch
	22,  // 1: semgrep_output_v1.CliOutput.errors:type_name -> semgrep_output_v1.CliError
	25,  // 2: semgrep_output_v1.CliOutput.paths:type_name -> semgrep_output_v1.ScannedAndSkipped
	28,  // 3: semgrep_output_v1.CliOutput.time:type_name -> semgrep_output_v1.Profile
	8,   // 4: semgrep_output_v1.CliOutput.explanations:type_name -> semgrep_output_v1.MatchingExplanation
	130, // 5: semgrep_output_v1.CliOutput.rules_by_engine:type_name -> google.protobuf.Any
	130, // 6: semgrep_output_v1.CliOutput.engine_requested:type_name -> google.protobuf.Any
	26,  // 7: semgrep_output_v1.CliOutput.skipped_rules:type_name -> semgrep_output_v1.SkippedRule
	69,  // 8: semgrep_output_v1.CliOutput.subprojects:type_name -> semgrep_output_v1.CliOutputSubprojectInfo
	1,   // 9: semgrep_output_v1.Location.start:type_name -> semgrep_output_v1.Position
	1,   // 10: semgrep_output_v1.Location.end:type_name -> semgrep_output_v1.Position
	1,   // 11: semgrep_output_v1.CliMatch.start:type_name -> semgrep_output_v1.Position
	1,   // 12: semgrep_output_v1.CliMatch.end:type_name -> semgrep_output_v1.Position
	5,   // 13: semgrep_output_v1.CliMatch.extra:type_name -> semgrep_output_v1.CliMatchExtra
	115, // 14: semgrep_output_v1.CliMatchExtra.metavars:type_name -> semgrep_output_v1.CliMatchExtra.MetavarsEntry
	130, // 15: semgrep_output_v1.CliMatchExtra.metadata:type_name -> google.protobuf.Any
	130, // 16: semgrep_output_v1.CliMatchExtra.severity:type_name -> google.protobuf.Any
	12,  // 17: semgrep_output_v1.CliMatchExtra.sca_info:type_name -> semgrep_output_v1.ScaMatch
	130, // 18: semgrep_output_v1.CliMatchExtra.validation_state:type_name -> google.protobuf.Any
	20,  // 19: semgrep_output_v1.CliMatchExtra.historical_info:type_name -> semgrep_output_v1.HistoricalInfo
	10,  // 20: semgrep_output_v1.CliMatchExtra.dataflow_trace:type_name -> semgrep_output_v1.MatchDataflowTrace
	130, // 21: semgrep_output_v1.CliMatchExtra.engine_kind:type_name -> google.protobuf.Any
	130, // 22: semgrep_output_v1.CliMatchExtra.extra_extra:type_name -> google.protobuf.Any
	1,   // 23: semgrep_output_v1.MetavarValue.start:type_name -> semgrep_output_v1.Position
	1,   // 24: semgrep_output_v1.MetavarValue.end:type_name -> semgrep_output_v1.Position
	7,   // 25: semgrep_output_v1.MetavarValue.propagated_value:type_name -> semgrep_output_v1.SvalueValue
	1,   // 26: semgrep_output_v1.SvalueValue.svalue_start:type_name -> semgrep_output_v1.Position
	1,   // 27: semgrep_output_v1.SvalueValue.svalue_end:type_name -> semgrep_output_v1.Position
	130, // 28: semgrep_output_v1.MatchingExplanation.op:type_name -> google.protobuf.Any
	8,   // 29: semgrep_output_v1.MatchingExplanation.children:type_name -> semgrep_output_v1.MatchingExplanation
	87,  // 30: semgrep_output_v1.MatchingExplanation.matches:type_name -> semgrep_output_v1.CoreMatch
	2,   // 31: semgrep_output_v1.MatchingExplanation.loc:type_name -> semgrep_output_v1.Location
	9,   // 32: semgrep_output_v1.MatchingExplanation.extra:type_name -> semgrep_output_v1.MatchingExplanationExtra
	130, // 33: semgrep_output_v1.MatchingExplanationExtra.before_negation_matches:type_name -> google.protobuf.Any
	130, // 34: semgrep_output_v1.MatchingExplanationExtra.before_filter_matches:type_name -> google.protobuf.Any
	130, // 35: semgrep_output_v1.MatchDataflowTrace.taint_source:type_name -> google.protobuf.Any
	11,  // 36: semgrep_output_v1.MatchDataflowTrace.intermediate_vars:type_name -> semgrep_output_v1.MatchIntermediateVar
	130, // 37: semgrep_output_v1.MatchDataflowTrace.taint_sink:type_name -> google.protobuf.Any
	2,   // 38: semgrep_output_v1.MatchIntermediateVar.location:type_name -> semgrep_output_v1.Location
	16,  // 39: semgrep_output_v1.ScaMatch.dependency_match:type_name -> semgrep_output_v1.DependencyMatch
	130, // 40: semgrep_output_v1.ScaMatch.kind:type_name -> google.protobuf.Any
	130, // 41: semgrep_output_v1.TransitiveReachable.matches:type_name -> google.protobuf.Any
	130, // 42: semgrep_output_v1.TransitiveReachable.callgraph_reachable:type_name -> google.protobuf.Any
	130, // 43: semgrep_output_v1.TransitiveReachable.explanation:type_name -> google.protobuf.Any
	18,  // 44: semgrep_output_v1.TransitiveUnreachable.analyzed_packages:type_name -> semgrep_output_v1.FoundDependency
	130, // 45: semgrep_output_v1.TransitiveUnreachable.explanation:type_name -> google.protobuf.Any
	130, // 46: semgrep_output_v1.TransitiveUndetermined.explanation:type_name -> google.protobuf.Any
	17,  // 47: semgrep_output_v1.DependencyMatch.dependency_pattern:type_name -> semgrep_output_v1.ScaPattern
	18,  // 48: semgrep_output_v1.DependencyMatch.found_dependency:type_name -> semgrep_output_v1.FoundDependency
	130, // 49: semgrep_output_v1.ScaPattern.ecosystem:type_name -> google.protobuf.Any
	130, // 50: semgrep_output_v1.FoundDependency.ecosystem:type_name -> google.protobuf.Any
	116, // 51: semgrep_output_v1.FoundDependency.allowed_hashes:type_name -> semgrep_output_v1.FoundDependency.AllowedHashesEntry
	130, // 52: semgrep_output_v1.FoundDependency.transitivity:type_name -> google.protobuf.Any
	19,  // 53: semgrep_output_v1.FoundDependency.children:type_name -> semgrep_output_v1.DependencyChild
	130, // 54: semgrep_output_v1.CliError.level:type_name -> google.protobuf.Any
	130, // 55: semgrep_output_v1.CliError.type:type_name -> google.protobuf.Any
	23,  // 56: semgrep_output_v1.CliError.spans:type_name -> semgrep_output_v1.ErrorSpan
	1,   // 57: semgrep_output_v1.ErrorSpan.start:type_name -> semgrep_output_v1.Position
	1,   // 58: semgrep_output_v1.ErrorSpan.end:type_name -> semgrep_output_v1.Position
	1,   // 59: semgrep_output_v1.ErrorSpan.config_start:type_name -> semgrep_output_v1.Position
	1,   // 60: semgrep_output_v1.ErrorSpan.config_end:type_name -> semgrep_output_v1.Position
	1,   // 61: semgrep_output_v1.ErrorSpan.context_start:type_name -> semgrep_output_v1.Position
	1,   // 62: semgrep_output_v1.ErrorSpan.context_end:type_name -> semgrep_output_v1.Position
	130, // 63: semgrep_output_v1.SkippedTarget.reason:type_name -> google.protobuf.Any
	24,  // 64: semgrep_output_v1.ScannedAndSkipped.skipped:type_name -> semgrep_output_v1.SkippedTarget
	1,   // 65: semgrep_output_v1.SkippedRule.position:type_name -> semgrep_output_v1.Position
	89,  // 66: semgrep_output_v1.TargetDiscoveryResult.errors:type_name -> semgrep_output_v1.CoreError
	24,  // 67: semgrep_output_v1.TargetDiscoveryResult.skipped:type_name -> semgrep_output_v1.SkippedTarget
	117, // 68: semgrep_output_v1.Profile.profiling_times:type_name -> semgrep_output_v1.Profile.ProfilingTimesEntry
	31,  // 69: semgrep_output_v1.Profile.parsing_time:type_name -> semgrep_output_v1.ParsingTime
	32,  // 70: semgrep_output_v1.Profile.targets:type_name -> semgrep_output_v1.TargetTimes
	30,  // 71: semgrep_output_v1.ParsingTime.per_file_time:type_name -> semgrep_output_v1.SummaryStats
	29,  // 72: semgrep_output_v1.ParsingTime.very_slow_files:type_name -> semgrep_output_v1.FileTime
	25,  // 73: semgrep_output_v1.CliOutputExtra.paths:type_name -> semgrep_output_v1.ScannedAndSkipped
	28,  // 74: semgrep_output_v1.CliOutputExtra.time:type_name -> semgrep_output_v1.Profile
	8,   // 75: semgrep_output_v1.CliOutputExtra.explanations:type_name -> semgrep_output_v1.MatchingExplanation
	130, // 76: semgrep_output_v1.CliOutputExtra.rules_by_engine:type_name -> google.protobuf.Any
	130, // 77: semgrep_output_v1.CliOutputExtra.engine_requested:type_name -> google.protobuf.Any
	26,  // 78: semgrep_output_v1.CliOutputExtra.skipped_rules:type_name -> semgrep_output_v1.SkippedRule
	69,  // 79: semgrep_output_v1.CliOutputExtra.subprojects:type_name -> semgrep_output_v1.CliOutputSubprojectInfo
	130, // 80: semgrep_output_v1.ConfigError.reason:type_name -> google.protobuf.Any
	118, // 81: semgrep_output_v1.TestsResult.results:type_name -> semgrep_output_v1.TestsResult.ResultsEntry
	119, // 82: semgrep_output_v1.TestsResult.fixtest_results:type_name -> semgrep_output_v1.TestsResult.FixtestResultsEntry
	34,  // 83: semgrep_output_v1.TestsResult.config_with_errors:type_name -> semgrep_output_v1.ConfigError
	120, // 84: semgrep_output_v1.Checks.checks:type_name -> semgrep_output_v1.Checks.ChecksEntry
	121, // 85: semgrep_output_v1.RuleResult.matches:type_name -> semgrep_output_v1.RuleResult.MatchesEntry
	40,  // 86: semgrep_output_v1.RuleResult.diagnosis:type_name -> semgrep_output_v1.MatchingDiagnosis
	41,  // 87: semgrep_output_v1.MatchingDiagnosis.unexpected_match_diagnoses:type_name -> semgrep_output_v1.UnexpectedMatchDiagnosis
	42,  // 88: semgrep_output_v1.MatchingDiagnosis.unexpected_no_match_diagnoses:type_name -> semgrep_output_v1.UnexpectedNoMatchDiagnosis
	43,  // 89: semgrep_output_v1.UnexpectedMatchDiagnosis.matched_text:type_name -> semgrep_output_v1.Snippet
	130, // 90: semgrep_output_v1.UnexpectedMatchDiagnosis.originating_kind:type_name -> google.protobuf.Any
	43,  // 91: semgrep_output_v1.UnexpectedMatchDiagnosis.originating_text:type_name -> semgrep_output_v1.Snippet
	44,  // 92: semgrep_output_v1.UnexpectedMatchDiagnosis.killing_parents:type_name -> semgrep_output_v1.KillingParent
	130, // 93: semgrep_output_v1.UnexpectedNoMatchDiagnosis.kind:type_name -> google.protobuf.Any
	130, // 94: semgrep_output_v1.KillingParent.killing_parent_kind:type_name -> google.protobuf.Any
	43,  // 95: semgrep_output_v1.KillingParent.snippet:type_name -> semgrep_output_v1.Snippet
	48,  // 96: semgrep_output_v1.ScanResponse.info:type_name -> semgrep_output_v1.ScanInfo
	49,  // 97: semgrep_output_v1.ScanResponse.config:type_name -> semgrep_output_v1.ScanConfiguration
	50,  // 98: semgrep_output_v1.ScanResponse.engine_params:type_name -> semgrep_output_v1.EngineConfiguration
	130, // 99: semgrep_output_v1.ScanInfo.enabled_products:type_name -> google.protobuf.Any
	130, // 100: semgrep_output_v1.ScanConfiguration.rules:type_name -> google.protobuf.Any
	130, // 101: semgrep_output_v1.EngineConfiguration.product_ignored_files:type_name -> google.protobuf.Any
	51,  // 102: semgrep_output_v1.EngineConfiguration.historical_config:type_name -> semgrep_output_v1.HistoricalConfiguration
	53,  // 103: semgrep_output_v1.ScanRequest.project_metadata:type_name -> semgrep_output_v1.ProjectMetadata
	54,  // 104: semgrep_output_v1.ScanRequest.scan_metadata:type_name -> semgrep_output_v1.ScanMetadata
	55,  // 105: semgrep_output_v1.ScanRequest.project_config:type_name -> semgrep_output_v1.CiConfigFromRepo
	130, // 106: semgrep_output_v1.ScanMetadata.requested_products:type_name -> google.protobuf.Any
	130, // 107: semgrep_output_v1.Finding.severity:type_name -> google.protobuf.Any
	57,  // 108: semgrep_output_v1.Finding.hashes:type_name -> semgrep_output_v1.FindingHashes
	130, // 109: semgrep_output_v1.Finding.metadata:type_name -> google.protobuf.Any
	12,  // 110: semgrep_output_v1.Finding.sca_info:type_name -> semgrep_output_v1.ScaMatch
	10,  // 111: semgrep_output_v1.Finding.dataflow_trace:type_name -> semgrep_output_v1.MatchDataflowTrace
	130, // 112: semgrep_output_v1.Finding.validation_state:type_name -> google.protobuf.Any
	20,  // 113: semgrep_output_v1.Finding.historical_info:type_name -> semgrep_output_v1.HistoricalInfo
	130, // 114: semgrep_output_v1.Finding.engine_kind:type_name -> google.protobuf.Any
	56,  // 115: semgrep_output_v1.CiScanResults.findings:type_name -> semgrep_output_v1.Finding
	56,  // 116: semgrep_output_v1.CiScanResults.ignores:type_name -> semgrep_output_v1.Finding
	60,  // 117: semgrep_output_v1.CiScanResults.contributions:type_name -> semgrep_output_v1.Contribution
	122, // 118: semgrep_output_v1.CiScanResults.dependencies:type_name -> semgrep_output_v1.CiScanResults.DependenciesEntry
	59,  // 119: semgrep_output_v1.Contribution.contributor:type_name -> semgrep_output_v1.Contributor
	62,  // 120: semgrep_output_v1.CiScanResultsResponse.errors:type_name -> semgrep_output_v1.CiScanResultsResponseError
	64,  // 121: semgrep_output_v1.CiScanComplete.stats:type_name -> semgrep_output_v1.CiScanCompleteStats
	123, // 122: semgrep_output_v1.CiScanComplete.dependencies:type_name -> semgrep_output_v1.CiScanComplete.DependenciesEntry
	67,  // 123: semgrep_output_v1.CiScanComplete.dependency_parser_errors:type_name -> semgrep_output_v1.DependencyParserError
	22,  // 124: semgrep_output_v1.CiScanCompleteStats.errors:type_name -> semgrep_output_v1.CliError
	124, // 125: semgrep_output_v1.CiScanCompleteStats.unsupported_exts:type_name -> semgrep_output_v1.CiScanCompleteStats.UnsupportedExtsEntry
	125, // 126: semgrep_output_v1.CiScanCompleteStats.lockfile_scan_info:type_name -> semgrep_output_v1.CiScanCompleteStats.LockfileScanInfoEntry
	126, // 127: semgrep_output_v1.CiScanCompleteStats.parse_rate:type_name -> semgrep_output_v1.CiScanCompleteStats.ParseRateEntry
	127, // 128: semgrep_output_v1.CiScanCompleteStats.findings_by_product:type_name -> semgrep_output_v1.CiScanCompleteStats.FindingsByProductEntry
	68,  // 129: semgrep_output_v1.CiScanCompleteStats.supply_chain_stats:type_name -> semgrep_output_v1.SupplyChainStats
	130, // 130: semgrep_output_v1.DependencyParserError.parser:type_name -> google.protobuf.Any
	70,  // 131: semgrep_output_v1.SupplyChainStats.subprojects_stats:type_name -> semgrep_output_v1.SubprojectStats
	130, // 132: semgrep_output_v1.CliOutputSubprojectInfo.unresolved_reason:type_name -> google.protobuf.Any
	72,  // 133: semgrep_output_v1.CliOutputSubprojectInfo.resolved_stats:type_name -> semgrep_output_v1.DependencyResolutionStats
	71,  // 134: semgrep_output_v1.SubprojectStats.dependency_sources:type_name -> semgrep_output_v1.DependencySourceFile
	72,  // 135: semgrep_output_v1.SubprojectStats.resolved_stats:type_name -> semgrep_output_v1.DependencyResolutionStats
	130, // 136: semgrep_output_v1.SubprojectStats.unresolved_reason:type_name -> google.protobuf.Any
	130, // 137: semgrep_output_v1.SubprojectStats.errors:type_name -> google.protobuf.Any
	130, // 138: semgrep_output_v1.DependencySourceFile.kind:type_name -> google.protobuf.Any
	130, // 139: semgrep_output_v1.DependencyResolutionStats.resolution_method:type_name -> google.protobuf.Any
	130, // 140: semgrep_output_v1.DependencyResolutionStats.ecosystem:type_name -> google.protobuf.Any
	74,  // 141: semgrep_output_v1.DeploymentResponse.deployment:type_name -> semgrep_output_v1.DeploymentConfig
	130, // 142: semgrep_output_v1.ScanConfig.enabled_products:type_name -> google.protobuf.Any
	130, // 143: semgrep_output_v1.ScanConfig.actions:type_name -> google.protobuf.Any
	83,  // 144: semgrep_output_v1.ScanConfig.ci_config_from_cloud:type_name -> semgrep_output_v1.CiConfigFromCloud
	4,   // 145: semgrep_output_v1.TrCacheMatchResult.matches:type_name -> semgrep_output_v1.CliMatch
	78,  // 146: semgrep_output_v1.TrQueryCacheRequest.entries:type_name -> semgrep_output_v1.TrCacheKey
	130, // 147: semgrep_output_v1.TrQueryCacheResponse.cached:type_name -> google.protobuf.Any
	130, // 148: semgrep_output_v1.TrAddCacheRequest.new_entries:type_name -> google.protobuf.Any
	84,  // 149: semgrep_output_v1.CiConfigFromCloud.repo_config:type_name -> semgrep_output_v1.CiConfig
	84,  // 150: semgrep_output_v1.CiConfigFromCloud.org_config:type_name -> semgrep_output_v1.CiConfig
	130, // 151: semgrep_output_v1.CiConfigFromCloud.dirs_config:type_name -> google.protobuf.Any
	130, // 152: semgrep_output_v1.CiConfigFromCloud.actions:type_name -> google.protobuf.Any
	128, // 153: semgrep_output_v1.CiConfig.env:type_name -> semgrep_output_v1.CiConfig.EnvEntry
	130, // 154: semgrep_output_v1.CiConfig.enabled_products:type_name -> google.protobuf.Any
	87,  // 155: semgrep_output_v1.CoreOutput.results:type_name -> semgrep_output_v1.CoreMatch
	89,  // 156: semgrep_output_v1.CoreOutput.errors:type_name -> semgrep_output_v1.CoreError
	25,  // 157: semgrep_output_v1.CoreOutput.paths:type_name -> semgrep_output_v1.ScannedAndSkipped
	28,  // 158: semgrep_output_v1.CoreOutput.time:type_name -> semgrep_output_v1.Profile
	8,   // 159: semgrep_output_v1.CoreOutput.explanations:type_name -> semgrep_output_v1.MatchingExplanation
	130, // 160: semgrep_output_v1.CoreOutput.rules_by_engine:type_name -> google.protobuf.Any
	130, // 161: semgrep_output_v1.CoreOutput.engine_requested:type_name -> google.protobuf.Any
	26,  // 162: semgrep_output_v1.CoreOutput.skipped_rules:type_name -> semgrep_output_v1.SkippedRule
	69,  // 163: semgrep_output_v1.CoreOutput.subprojects:type_name -> semgrep_output_v1.CliOutputSubprojectInfo
	112, // 164: semgrep_output_v1.CoreOutput.symbol_analysis:type_name -> semgrep_output_v1.SymbolUsage
	112, // 165: semgrep_output_v1.CoreOutputExtra.symbol_analysis:type_name -> semgrep_output_v1.SymbolUsage
	1,   // 166: semgrep_output_v1.CoreMatch.start:type_name -> semgrep_output_v1.Position
	1,   // 167: semgrep_output_v1.CoreMatch.end:type_name -> semgrep_output_v1.Position
	88,  // 168: semgrep_output_v1.CoreMatch.extra:type_name -> semgrep_output_v1.CoreMatchExtra
	129, // 169: semgrep_output_v1.CoreMatchExtra.metavars:type_name -> semgrep_output_v1.CoreMatchExtra.MetavarsEntry
	130, // 170: semgrep_output_v1.CoreMatchExtra.engine_kind:type_name -> google.protobuf.Any
	130, // 171: semgrep_output_v1.CoreMatchExtra.metadata:type_name -> google.protobuf.Any
	130, // 172: semgrep_output_v1.CoreMatchExtra.severity:type_name -> google.protobuf.Any
	10,  // 173: semgrep_output_v1.CoreMatchExtra.dataflow_trace:type_name -> semgrep_output_v1.MatchDataflowTrace
	12,  // 174: semgrep_output_v1.CoreMatchExtra.sca_match:type_name -> semgrep_output_v1.ScaMatch
	130, // 175: semgrep_output_v1.CoreMatchExtra.validation_state:type_name -> google.protobuf.Any
	20,  // 176: semgrep_output_v1.CoreMatchExtra.historical_info:type_name -> semgrep_output_v1.HistoricalInfo
	130, // 177: semgrep_output_v1.CoreMatchExtra.extra_extra:type_name -> google.protobuf.Any
	130, // 178: semgrep_output_v1.CoreError.error_type:type_name -> google.protobuf.Any
	130, // 179: semgrep_output_v1.CoreError.severity:type_name -> google.protobuf.Any
	2,   // 180: semgrep_output_v1.CoreError.location:type_name -> semgrep_output_v1.Location
	130, // 181: semgrep_output_v1.TargetingConf.force_project_root:type_name -> google.protobuf.Any
	130, // 182: semgrep_output_v1.CodeTarget.products:type_name -> google.protobuf.Any
	130, // 183: semgrep_output_v1.CodeTarget.dependency_source:type_name -> google.protobuf.Any
	90,  // 184: semgrep_output_v1.ScanningRoots.targeting_conf:type_name -> semgrep_output_v1.TargetingConf
	93,  // 185: semgrep_output_v1.ApplyFixesParams.edits:type_name -> semgrep_output_v1.Edit
	130, // 186: semgrep_output_v1.ApplyFixesReturn.fixed_lines:type_name -> google.protobuf.Any
	130, // 187: semgrep_output_v1.DumpRulePartitionsParams.rules:type_name -> google.protobuf.Any
	130, // 188: semgrep_output_v1.Manifest.kind:type_name -> google.protobuf.Any
	130, // 189: semgrep_output_v1.Lockfile.kind:type_name -> google.protobuf.Any
	130, // 190: semgrep_output_v1.ScaResolutionError.type_:type_name -> google.protobuf.Any
	130, // 191: semgrep_output_v1.Subproject.ecosystem:type_name -> google.protobuf.Any
	130, // 192: semgrep_output_v1.Subproject.dependency_source:type_name -> google.protobuf.Any
	103, // 193: semgrep_output_v1.ResolvedSubproject.info:type_name -> semgrep_output_v1.Subproject
	130, // 194: semgrep_output_v1.ResolvedSubproject.resolution_method:type_name -> google.protobuf.Any
	130, // 195: semgrep_output_v1.ResolvedSubproject.ecosystem:type_name -> google.protobuf.Any
	130, // 196: semgrep_output_v1.ResolvedSubproject.resolved_dependencies:type_name -> google.protobuf.Any
	130, // 197: semgrep_output_v1.ResolvedSubproject.errors:type_name -> google.protobuf.Any
	103, // 198: semgrep_output_v1.UnresolvedSubproject.info:type_name -> semgrep_output_v1.Subproject
	130, // 199: semgrep_output_v1.UnresolvedSubproject.reason:type_name -> google.protobuf.Any
	130, // 200: semgrep_output_v1.UnresolvedSubproject.errors:type_name -> google.protobuf.Any
	130, // 201: semgrep_output_v1.ResolveDependenciesParams.dependency_sources:type_name -> google.protobuf.Any
	87,  // 202: semgrep_output_v1.TransitiveFinding.m:type_name -> semgrep_output_v1.CoreMatch
	108, // 203: semgrep_output_v1.TransitiveReachabilityFilterParams.findings:type_name -> semgrep_output_v1.TransitiveFinding
	130, // 204: semgrep_output_v1.TransitiveReachabilityFilterParams.dependencies:type_name -> google.protobuf.Any
	111, // 205: semgrep_output_v1.SymbolUsage.symbol:type_name -> semgrep_output_v1.Symbol
	2,   // 206: semgrep_output_v1.SymbolUsage.locs:type_name -> semgrep_output_v1.Location
	113, // 207: semgrep_output_v1.DiffFiles.cve_diffs:type_name -> semgrep_output_v1.DiffFile
	6,   // 208: semgrep_output_v1.CliMatchExtra.MetavarsEntry.value:type_name -> semgrep_output_v1.MetavarValue
	130, // 209: semgrep_output_v1.FoundDependency.AllowedHashesEntry.value:type_name -> google.protobuf.Any
	36,  // 210: semgrep_output_v1.TestsResult.ResultsEntry.value:type_name -> semgrep_output_v1.Checks
	39,  // 211: semgrep_output_v1.TestsResult.FixtestResultsEntry.value:type_name -> semgrep_output_v1.FixtestResult
	37,  // 212: semgrep_output_v1.Checks.ChecksEntry.value:type_name -> semgrep_output_v1.RuleResult
	38,  // 213: semgrep_output_v1.RuleResult.MatchesEntry.value:type_name -> semgrep_output_v1.ExpectedReported
	130, // 214: semgrep_output_v1.CiScanResults.DependenciesEntry.value:type_name -> google.protobuf.Any
	130, // 215: semgrep_output_v1.CiScanComplete.DependenciesEntry.value:type_name -> google.protobuf.Any
	65,  // 216: semgrep_output_v1.CiScanCompleteStats.ParseRateEntry.value:type_name -> semgrep_output_v1.ParsingStats
	6,   // 217: semgrep_output_v1.CoreMatchExtra.MetavarsEntry.value:type_name -> semgrep_output_v1.MetavarValue
	218, // [218:218] is the sub-list for method output_type
	218, // [218:218] is the sub-list for method input_type
	218, // [218:218] is the sub-list for extension type_name
	218, // [218:218] is the sub-list for extension extendee
	0,   // [0:218] is the sub-list for field type_name
}

func init() { file_semgrep_output_v1_proto_init() }
func file_semgrep_output_v1_proto_init() {
	if File_semgrep_output_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_semgrep_output_v1_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CliOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ProFeature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CliMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CliMatchExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*MetavarValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*SvalueValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*MatchingExplanation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*MatchingExplanationExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*MatchDataflowTrace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*MatchIntermediateVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*ScaMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*TransitiveReachable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*TransitiveUnreachable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*TransitiveUndetermined); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*DependencyMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*ScaPattern); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*FoundDependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*DependencyChild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*HistoricalInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*IncompatibleRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*CliError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ErrorSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*SkippedTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*ScannedAndSkipped); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*SkippedRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*TargetDiscoveryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*FileTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*SummaryStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*ParsingTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*TargetTimes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*CliOutputExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*ConfigError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*TestsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*Checks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*RuleResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*ExpectedReported); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*FixtestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*MatchingDiagnosis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*UnexpectedMatchDiagnosis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*UnexpectedNoMatchDiagnosis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*Snippet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*KillingParent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*Features); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*TriageIgnored); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*ScanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*ScanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*ScanConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*EngineConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*HistoricalConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*ScanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*ProjectMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*ScanMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*CiConfigFromRepo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*Finding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*FindingHashes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*CiScanResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*Contributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*Contribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*CiScanResultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*CiScanResultsResponseError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*CiScanComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*CiScanCompleteStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*ParsingStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*CiScanCompleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*DependencyParserError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*SupplyChainStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*CliOutputSubprojectInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*SubprojectStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*DependencySourceFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*DependencyResolutionStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*CiScanFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*DeploymentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*HasFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*DeploymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*ScanConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*TrCacheKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*TrCacheMatchResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*TrQueryCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*TrQueryCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*TrAddCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*CiConfigFromCloud); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*CiConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*CoreOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*CoreOutputExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*CoreMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*CoreMatchExtra); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*CoreError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*TargetingConf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*CodeTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*ScanningRoots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[93].Exporter = func(v any, i int) any {
			switch v := v.(*Edit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[94].Exporter = func(v any, i int) any {
			switch v := v.(*ApplyFixesParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[95].Exporter = func(v any, i int) any {
			switch v := v.(*ApplyFixesReturn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[96].Exporter = func(v any, i int) any {
			switch v := v.(*SarifFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[97].Exporter = func(v any, i int) any {
			switch v := v.(*FormatContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[98].Exporter = func(v any, i int) any {
			switch v := v.(*DumpRulePartitionsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[99].Exporter = func(v any, i int) any {
			switch v := v.(*Manifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[100].Exporter = func(v any, i int) any {
			switch v := v.(*Lockfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[101].Exporter = func(v any, i int) any {
			switch v := v.(*ResolutionCmdFailed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[102].Exporter = func(v any, i int) any {
			switch v := v.(*ScaResolutionError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[103].Exporter = func(v any, i int) any {
			switch v := v.(*Subproject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[104].Exporter = func(v any, i int) any {
			switch v := v.(*ResolvedSubproject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[105].Exporter = func(v any, i int) any {
			switch v := v.(*DownloadedDependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[106].Exporter = func(v any, i int) any {
			switch v := v.(*UnresolvedSubproject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[107].Exporter = func(v any, i int) any {
			switch v := v.(*ResolveDependenciesParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[108].Exporter = func(v any, i int) any {
			switch v := v.(*TransitiveFinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[109].Exporter = func(v any, i int) any {
			switch v := v.(*TransitiveReachabilityFilterParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[110].Exporter = func(v any, i int) any {
			switch v := v.(*SymbolAnalysisUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[111].Exporter = func(v any, i int) any {
			switch v := v.(*Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[112].Exporter = func(v any, i int) any {
			switch v := v.(*SymbolUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[113].Exporter = func(v any, i int) any {
			switch v := v.(*DiffFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_semgrep_output_v1_proto_msgTypes[114].Exporter = func(v any, i int) any {
			switch v := v.(*DiffFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_semgrep_output_v1_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   130,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_semgrep_output_v1_proto_goTypes,
		DependencyIndexes: file_semgrep_output_v1_proto_depIdxs,
		MessageInfos:      file_semgrep_output_v1_proto_msgTypes,
	}.Build()
	File_semgrep_output_v1_proto = out.File
	file_semgrep_output_v1_proto_rawDesc = nil
	file_semgrep_output_v1_proto_goTypes = nil
	file_semgrep_output_v1_proto_depIdxs = nil
}
